{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)c3a9c90f-c25c-4aa7-b879-990d0be9bf4d","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_AppliedMotionMotorASCII","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)f59d09d7-58a6-47dd-84cf-10c64cd3fe62"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_OrientalAZMotor()\n//\tDescription: A PLCOpen Motion compliant library for a Oriental AZ Series drive/motor\n//\t\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: Tuesday, June 2nd 2020\n\n// Outputs for Motion Lib\nPowerState := PowerOn;\nEnableState := DriveEnable;\n\n\n// Exit if drive isn't enabled.\nIF NOT DriveEnable THEN\n\tRETURN;\nEND_IF\n\nhaltONS(CLK := Halt);\nIF haltONS.OSR THEN\n\tasciiHandler.xExecute := FALSE;\n\tasciiHandler();\n\tstate := eAppliedMotionDriveStatesASCII.Halt;\nEND_IF\n\nreadRateTimer(IN := (state = eAppliedMotionDriveStatesASCII.Moving) AND NOT readRateTimer.Q);\nwaitForHaltTimer(IN := state = eAppliedMotionDriveStatesASCII.Halting);\n\n\nCASE readStatusState OF\n\t0: \t//Idle\n\t\tIF readRateTimer.Q AND NOT asciiHandler.xExecute THEN\n\t\t\tasciiHandler.sendData := '2SC$R';\n\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\treadStatusState := 1;\n\t\tEND_IF\n\t\tIF haltONS.OSR THEN\n\t\t\tasciiHandler.xExecute := FALSE;\n\t\tEND_IF\n\t\t\n\t1:\t// Parse Status word\n\t\tIF asciiHandler.xDone THEN\n\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\tstatus(statusCode := TO_WORD(mParseStatusWord(asciiHandler.receivedData)));\n\t\t\treadStatusState := 0;\n\t\tEND_IF\n\t\t\n\t\tIF haltONS.OSR THEN\n\t\t\treadStatusState := 0;\n\t\t\tasciiHandler.xExecute := FALSE;\n\t\tEND_IF\nEND_CASE\n\nIF tryWeirdString THEN\n\ttryWeirdString := FALSE;\n\tresult := mParseStatusWord(weirdString);\nEND_IF\n\n// Get drive data directly from modbus or from master axis\t\nReady := status.motorEnabled;\nAlarmActive := status.driveFaulted;\nMoving := status.moving;\nInPosition := status.inPosition;\n\nIF moving THEN \n\tActVelocity := ProfileVelocity;\nELSE\n\tActVelocity := 0;\nEND_IF\n\n\nalarmONS(CLK := alarmActive);\nIF alarmONS.OSR THEN\n\tError := TRUE;\n\tstate := eAppliedMotionDriveStatesASCII.Faulting;\nEND_IF\n\n\nCASE state OF\n\teAppliedMotionDriveStatesASCII.Idle:\n\t\t\t\t// \tIdle state, wait for command\n\t\t\t\tmClearStatus();\n\t\t\t\tIF MoveAbs THEN\n\t\t\t\t\tAxisState := AXIS_STATE.AS_DiscreteMotion;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.MoveABS;\n\t\t\t\tELSIF MoveRel THEN\n\t\t\t\t\tasciiHandler.sendData := (CONCAT('2VE', mVeloAccDecCalc(ProfileVelocity)));\n\t\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\t\tAxisState := AXIS_STATE.AS_DiscreteMotion;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.MoveInc;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\tELSIF MoveAbsTorque THEN\n\t\t\t\t\tAxisState := AXIS_STATE.AS_DiscreteMotion;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.MoveABS;\n\t\t\t\tELSIF jogForwardCMD OR jogReverseCMD THEN\n\t\t\t\t\tasciiHandler.sendData := (CONCAT('2VE', mVeloAccDecCalc(1)));\n\t\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\t\tAxisState := AXIS_STATE.AS_DiscreteMotion;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.StartJogging;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\tELSIF StartHoming THEN\n\t\t\t\t\t//AxisState := AXIS_STATE.AS_Homing;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Home;\n\t\t\t\tEND_IF\n\n\t\teAppliedMotionDriveStatesASCII.MoveABS:\n\t\t\t\t// Move to absolute position\n\t\t\t\t\n\t\t\t\t\n\t\t\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.MoveInc:\n\t\t\t\t// Move to incremental position\n\t\t\t\tasciiHandler.sendData := (CONCAT('2FL', mDistanceCalc(TargetPosDist)));\n\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Moving;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Home:\n\t\t\t\t//\n\t\t\t\t\n\t\t\t\t\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Homing:\t\t\n\t\t\t\t//\n\t\t\t\tIF inPosition THEN\n\t\t\t\t\tzHome := FALSE;\n\t\t\t\t\tHomingDone := TRUE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.DoneMoving;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.StartJogging:\n\t\t\t\t// \n\t\t\t\tIF jogForwardCMD THEN\n\t\t\t\t\tasciiHandler.sendData := (CONCAT('2FL', mDistanceCalc(30)));\n\t\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Jogging;\n\t\t\t\t\tEND_IF\n\t\t\t\tELSIF jogReverseCMD THEN\n\t\t\t\t\tasciiHandler.sendData := (CONCAT('2FL', mDistanceCalc(-30)));\n\t\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Jogging;\n\t\t\t\t\tEND_IF\n\t\t\t\tELSE\n\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Jogging:\n\t\t\t\t// Jog forward/reverse\n\t\t\t\tIF NOT jogForwardCMD AND NOT jogReverseCMD THEN\n\t\t\t\t\tasciiHandler.sendData := ('2ST$R');\n\t\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\tEND_IF\n\t\teAppliedMotionDriveStatesASCII.SendOpcodeAfterPars:\n\t\t\t\t// \n\t\t\t\t\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.Moving:\n\t\t\t\t// After sending data, we are moving\n\t\t\t\tActVelocity := ProfileVelocity;\n\t\t\t\tIF inPosition AND asciiHandler.xDone THEN\n\t\t\t\t\tTargetReached := TRUE;\n\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.DoneMoving;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.DoneMoving:\n\t\t\t\t// Wait for status to clear\n\t\t\t\tIF NOT MoveAbs AND NOT MoveAbsTorque AND NOT MoveRel AND NOT StartHoming THEN\n\t\t\t\t\tAxisState := AXIS_STATE.AS_Standstill;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\tEND_IF \n\n\t\teAppliedMotionDriveStatesASCII.Halt:\n\t\t\t\t//\n\t\t\t\t\n\t\t\t\tIF NOT asciiHandler.xExecute THEN\n\t\t\t\t\tasciiHandler.sendData := ('2ST$R');\n\t\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Halting;\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.HaltSending:\n\t\t\t\t//\n\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Halting;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Halting:\n\t\t\t\t//\t\t\n\t\t\t\t\n\t\t\t\tIF waitForHaltTimer.Q THEN\n\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\tActVelocity := 0;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\tEND_IF\n\t\t\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.Faulting:\n\t\t\t\t// Faulting - stop drive\n\t\t\t\tmClearStatus();\n\t\t\t\tAxisState := AXIS_STATE.AS_ErrorStop;\n\t\t\t\tError := TRUE;\n\t\t\t\tfreeMotor := TRUE;\n\t\t\t\tasciiHandler.sendData := ('2ST$R');\n\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.FaultGetAlarmCode;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.FaultGetAlarmCode:\n\t\t\t\t// Get alarm code and display\n\t\t\t\tasciiHandler.sendData := ('2AL$R');\n\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\talarms(alarmCode := TO_WORD((mParseStatusWord(asciiHandler.receivedData))));\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.EnableMotor;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Faulted:\n\t\t\t\t// Faulted - wait for clear\n\t\t\t\tIF AckError THEN\n\t\t\t\t\tIF alarmActive THEN\n\t\t\t\t\t\tasciiHandler.sendData := ('2AX$R');\n\t\t\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.EnableMotor;\n\t\t\t\t\t\tEND_IF\n\t\t\t\t\tELSE\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.EnableMotor:\n\t\t\t\t//\n\t\t\t\tasciiHandler.sendData := ('2ME$R');\n\t\t\t\tasciiHandler.xExecute := TRUE;\n\t\t\t\tIF asciiHandler.xDone THEN\n\t\t\t\t\tasciiHandler.xExecute := FALSE;\n\t\t\t\t\tError := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\tEND_IF\nEND_CASE\n\nalarmCode := alarms.alarmCode;\nstatusCode := status.statusCode;\n","LineInfoPersistence":"(string)c3a9c90f-c25c-4aa7-b879-990d0be9bf4d_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_AppliedMotionMotorASCII EXTENDS Axis_REF\nVAR_INPUT\n\tmodbusAddress : USINT;\n\tstepsPerInchSP : DINT := 3999;\n\tzeroOffset : REAL;\n\tjogForwardCMD : BOOL;\n\tjogReverseCMD : BOOL;\nEND_VAR\nVAR_OUTPUT\n\tstatusCode : WORD;\n\talarmCode : WORD;\nEND_VAR\nVAR\n\tdirectDataOp : sctAppliedMotionPars;\n\tdistanceFromDrive : uModbusDWORD;\n\tready : BOOL;\n\talarmActive : BOOL;\n\tmoving : BOOL;\n\tinPosition : BOOL;\n\tatTorqueLimit : BOOL;\n\tatPosition : BOOL;\n\thomeSwitchTrigger : BOOL;\n\thomeNow : BOOL;\n\tP_Preset : BOOL;\n\tstart : BOOL;\n\tzHome : BOOL;\n\tstop : BOOL;\n\tfreeMotor : BOOL;\n\treset : BOOL;\n\tEL_Preset : BOOL;\n\tjogReverse : BOOL;\n\tjogForward : BOOL;\n\treadStatusState : INT;\n\tmodbusWriteResponse : ARRAY[0..20] OF WORD;\n\t\n  \t//writeRIODataMBCommand : IoDrvModbus.ModbusCommand;\n   \treadRateTimer : Standard.TON := (PT:= T#50MS);\n\twaitForHaltTimer : Standard.TON := (PT := T#20MS);\n\treadAfterDDWrite : FB_ONS;\n\treadAfterRIOWrite : FB_ONS;\n\thaltONS : FB_ONS;\n\ttriggerRIOWrite : BOOL;\n\t(*Temp for testing*)\n\ttriggerNow : BOOL;\n\tdisable : BOOL;\n\tstatus : FB_AppliedMotionStatus;\n\talarms : FB_AppliedMotionAlarms;\n\tstate : eAppliedMotionDriveStatesASCII;\n\talarmONS : FB_ONS;\n\t//testing and troubleshooting\n\ttryWeirdString : BOOL;\n\tweirdString : STRING;\n\tresult : DWORD;\nEND_VAR\nVAR_IN_OUT\n\tasciiHandler : FB_CrevisSerial;\nEND_VAR","LineInfoPersistence":"(string)c3a9c90f-c25c-4aa7-b879-990d0be9bf4d_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)3793","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}