{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)544dd623-f55b-417c-9d04-51b7b908359f","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_AppliedMotionMotorMB","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)True","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}},{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)f59d09d7-58a6-47dd-84cf-10c64cd3fe62"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","bool":"System.Boolean","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_OrientalAZMotor()\n//\tDescription: A PLCOpen Motion compliant library for a Oriental AZ Series drive/motor\n//\t\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: Tuesday, June 2nd 2020\n\n// Outputs for Motion Lib\nPowerState := PowerOn;\nEnableState := DriveEnable;\n\n\n// Exit if drive isn't enabled.\nIF NOT DriveEnable THEN\n\tRETURN;\nEND_IF\n\n// Pack data for direct data operation\nmodbusParDataToDrive[0] := directDataOp.Accel;\nmodbusParDataToDrive[1] := directDataOp.Decel;\nmodbusParDataToDrive[2] := directDataOp.Speed;\nmodbusParDataToDrive[3] := directDataOp.Position.wWord[1];\nmodbusParDataToDrive[4] := directDataOp.Position.wWord[0];\n\n// Get raw drive position\n\ndistanceFromDrive.wWord[0] := modbusDataFromDrive[7];\ndistanceFromDrive.wWord[1] := modbusDataFromDrive[6];\nActPos := (TO_REAL(distanceFromDrive.diDint) / TO_REAL(stepsPerInchSP)) + zeroOffset;\n\n\n\n\n\n// Trigger an RIO write whenever it changes\n\n\n\nwriteOpcode(\n\tslave:= MBChannel, \n\txExecute:= , \n\txAbort:= , \n\tiChannelIndex:= 2, \n\txBusy=> , \n\txDone=> , \n\txError=> , \n\txAborted=> , \n\tModbusError=> );\n\nwriteParameters(\n\tslave:= MBChannel, \n\txExecute:= , \n\txAbort:= , \n\tiChannelIndex:= 1, \n\txBusy=> , \n\txDone=> , \n\txError=> , \n\txAborted=> , \n\tModbusError=> );\n\t\n// Read registers from drive\n// On a cyclic basis\t\nreadRateTimer(IN := NOT readRateTimer.Q AND NOT (writeOpcode.xBusy OR writeParameters.xBusy OR readData.xBusy OR readDataAfterWrite.xBusy));\n// And directly after a DD op write\nreadAfterDDWrite(CLK := writeParameters.xDone);\nreadAfterRIOWrite(CLK := writeOpcode.xDone);\n\nreadData(\n\tslave:= MBChannel, \n\txExecute:= readRateTimer.Q OR readData.xBusy, \n\txAbort:= , \n\tiChannelIndex:= 0, \n\txBusy=> , \n\txDone=> , \n\txError=> , \n\txAborted=> , \n\tModbusError=> );\n\n\n\t\nreadDataAfterWrite(\n\tslave:= MBChannel, \n\txExecute:= writeOpcode.xDone, \n\txAbort:= , \n\tiChannelIndex:= 0, \n\txBusy=> , \n\txDone=> , \n\txError=> , \n\txAborted=> , \n\tModbusError=> );\n\t\n(*\nwriteRIODataMBCommand.uiFunctionCode := 16;\nwriteRIODataMBCommand.uiwriteLen := 2;\nwriteRIODataMBCommand.uiwriteOffset := 124;\nwriteRIOData(\n\txExecute:= , \n\txAbort:= , \n\thComPort:= comm, \n\tusiSlaveAddr:= modbusAddress, \n\tmodbusCommand:= writeRIODataMBCommand, \n\ttResponseTimeout:= , \n\tuiSendTimeout:= , \n\tpSendData:= ADR(modbusRIODataToDrive), \n\tpRecvData:= ADR(modbusWriteResponse), \n\ttransmission:= , \n\txDone=> , \n\txBusy=> , \n\txError=> , \n\txAborted=> , \n\tuiDataLength=> , \n\tbyModbusError=> );\n\nwriteDirectOpDataMBCommand.uiFunctionCode := 16;\nwriteDirectOpDataMBCommand.uiwriteLen := 17;\nwriteDirectOpDataMBCommand.uiwriteOffset := 88;\nwriteDirectOpData(\n\txExecute:= , \n\txAbort:= , \n\thComPort:= comm, \n\tusiSlaveAddr:= modbusAddress, \n\tmodbusCommand:= writeDirectOpDataMBCommand, \n\ttResponseTimeout:= , \n\tuiSendTimeout:= , \n\tpSendData:= ADR(modbusDirectDataToDrive), \n\tpRecvData:= ADR(modbusWriteResponse), \n\ttransmission:= , \n\txDone=> , \n\txBusy=> , \n\txError=> , \n\txAborted=> , \n\tuiDataLength=> , \n\tbyModbusError=> );\n\n// Read registers from drive\n// On a cyclic basis\nreadRateTimer(IN := NOT readRateTimer.Q AND NOT (writeRIOData.xBusy OR writeDirectOpData.xBusy) AND NOT isGroup);\n// And directly after a DD op write\nreadAfterDDWrite(CLK := writeDirectOpData.xDone);\nreadAfterRIOWrite(CLK := writeRIOData.xDone);\n\nreadDataMBCommand.uiFunctionCode := 3;\nreadDataMBCommand.uiReadLen := 40;\nreadDataMBCommand.uiReadOffset := 16#1340;\nreadData(\n\txExecute:= readRateTimer.Q OR readAfterDDWrite.OSR OR readAfterRIOWrite.OSR, \n\txAbort:= , \n\thComPort:= comm, \n\tusiSlaveAddr:= 15, \n\tmodbusCommand:= readDataMBCommand, \n\ttResponseTimeout:= , \n\tuiSendTimeout:= , \n\tpSendData:= , \n\tpRecvData:= ADR(modbusDataFromDrive), \n\ttransmission:= , \n\txDone=> , \n\txBusy=> , \n\txError=> , \n\txAborted=> , \n\tuiDataLength=> , \n\tbyModbusError=> );\n*)\n\nstatus(statusCode := modbusDataFromDrive[1]);\nalarms(alarmCode := modbusDataFromDrive[0]);\n// Get drive data directly from modbus or from master axis\t\n\nReady := status.motorEnabled;\nAlarmActive := status.driveFaulted;\nMoving := status.moving;\nInPosition := status.inPosition;\n\n\nhaltONS(CLK := Halt);\nIF haltONS.OSR THEN\n\tstate := eAppliedMotionDriveStates.Faulting;\nEND_IF\n\nIF alarmActive THEN\n\tstate := eAppliedMotionDriveStates.Faulting;\nEND_IF\n\n\nCASE state OF\n\teAppliedMotionDriveStates.Idle:\n\t\t\t\t// \tIdle state, wait for command\n\t\t\t\tmClearStatus();\n\t\t\t\tIF MoveAbs THEN\n\t\t\t\t\tAxisState := AXIS_STATE.AS_DiscreteMotion;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.MoveABS;\n\t\t\t\tELSIF MoveRel THEN\n\t\t\t\t\tAxisState := AXIS_STATE.AS_DiscreteMotion;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.MoveInc;\n\t\t\t\tELSIF MoveAbsTorque THEN\n\t\t\t\t\tAxisState := AXIS_STATE.AS_DiscreteMotion;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.MoveABS;\n\t\t\t\tELSIF jogForwardCMD OR jogReverseCMD THEN\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Jogging;\n\t\t\t\tELSIF StartHoming THEN\n\t\t\t\t\t//AxisState := AXIS_STATE.AS_Homing;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Home;\n\t\t\t\tEND_IF\n\n\teAppliedMotionDriveStates.MoveABS:\n\t\t\t\t// Move to absolute position\n\t\t\t\tdirectDataOp.Position.diDint := mDistanceCalc(TargetPosDist);\n\t\t\t\tdirectDataOp.Speed := mVeloAccDecCalc(ProfileVelocity);\n\t\t\t\tdirectDataOp.Accel := mVeloAccDecCalc(ProfileAcceleration);\n\t\t\t\tdirectDataOp.Decel := mVeloAccDecCalc(ProfileDeceleration);\n\t\t\t\tmodbusOpcodeToDrive[0] := TO_WORD(eAppliedMotionOpcodes.FEED_TO_POSITION);\n\t\t\t\twriteParameters.xExecute := TRUE;\n\t\t\t\tIF writeParameters.xDone THEN\n\t\t\t\t\twriteParameters.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.SendOpcodeAfterPars;\n\t\t\t\tELSIF writeParameters.xError THEN\n\t\t\t\t\twriteParameters.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Faulting;\n\t\t\t\tEND_IF\n\t\t\n\t\t\t\t\n\t\teAppliedMotionDriveStates.MoveInc:\n\t\t\t\t// Move to absolute position\n\t\t\t\tdirectDataOp.Position.diDint := mDistanceCalc(TargetPosDist);\n\t\t\t\tdirectDataOp.Speed := mVeloAccDecCalc(ProfileVelocity);\n\t\t\t\tdirectDataOp.Accel := mVeloAccDecCalc(ProfileAcceleration);\n\t\t\t\tdirectDataOp.Decel := mVeloAccDecCalc(ProfileDeceleration);\n\t\t\t\tmodbusOpcodeToDrive[0] := TO_WORD(eAppliedMotionOpcodes.FEED_TO_LENGTH);\n\t\t\t\twriteParameters.xExecute := TRUE;\n\t\t\t\tIF writeParameters.xDone THEN\n\t\t\t\t\twriteParameters.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Moving;\n\t\t\t\tELSIF writeParameters.xError THEN\n\t\t\t\t\twriteParameters.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Faulting;\n\t\t\t\tEND_IF\t\t\n\t\t\n\t\teAppliedMotionDriveStates.Home:\n\t\t\t\t//\n\t\t\t\tzHome := TRUE;\n\t\t\t\tIF writeOpcode.xDone THEN\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Homing;\n\t\t\t\tELSIF writeOpcode.xError THEN\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Faulting;\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\n\t\teAppliedMotionDriveStates.Homing:\t\t\n\t\t\t\t//\n\t\t\t\tIF inPosition THEN\n\t\t\t\t\tzHome := FALSE;\n\t\t\t\t\tHomingDone := TRUE;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.DoneMoving;\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\teAppliedMotionDriveStates.Jogging:\n\t\t\t\t// Jog forward/reverse\n\t\t\t\tjogForward := jogForwardCMD;\n\t\t\t\tjogReverse := jogReverseCMD;\n\t\t\t\tIF NOT jogForward AND NOT jogReverse THEN\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Idle;\n\t\t\t\tEND_IF\n\t\teAppliedMotionDriveStates.SendOpcodeAfterPars:\n\t\t\t\t// \n\t\t\t\twriteOpcode.xExecute := TRUE;\n\t\t\t\tIF writeParameters.xDone AND readDataAfterWrite.xDone THEN\n\t\t\t\t\twriteOpcode.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Moving;\n\t\t\t\tELSIF writeOpcode.xError THEN\n\t\t\t\t\twriteOpcode.xExecute := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Faulting;\n\t\t\t\tEND_IF\t\t\n\t\t\t\t\n\t\teAppliedMotionDriveStates.Moving:\n\t\t\t\t// After sending data, we are moving\n\t\t\t\tIF inPosition OR (atTorqueLimit AND MoveAbsTorque) THEN\n\t\t\t\t\tTargetReached := TRUE;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.DoneMoving;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStates.DoneMoving:\n\t\t\t\t// Wait for status to clear\n\t\t\t\tIF NOT MoveAbs AND NOT MoveAbsTorque AND NOT MoveRel AND NOT StartHoming THEN\n\t\t\t\t\tAxisState := AXIS_STATE.AS_Standstill;\n\t\t\t\t\tstate := eAppliedMotionDriveStates.Idle;\n\t\t\t\tEND_IF \n\n\t\teAppliedMotionDriveStates.Faulting:\n\t\t\t\t// Faulting - stop drive\n\t\t\t\tmClearStatus();\n\t\t\t\tAxisState := AXIS_STATE.AS_ErrorStop;\n\t\t\t\tError := TRUE;\n\t\t\t\tfreeMotor := TRUE;\n\t\t\t\tstate := eAppliedMotionDriveStates.Faulted;\n\t\t\t\t\n\t\teAppliedMotionDriveStates.Faulted:\n\t\t\t\t// Faulted - wait for clear\n\t\t\t\tIF AckError THEN\n\t\t\t\t\tIF alarmActive THEN\n\t\t\t\t\t\treset := TRUE;\n\t\t\t\t\tEND_IF\n\t\t\t\t\tIF NOT alarmActive THEN\n\t\t\t\t\t\tstate := eAppliedMotionDriveStates.Idle;\n\t\t\t\t\tEND_IF\n\t\t\t\tEND_IF\nEND_CASE\n","LineInfoPersistence":"(string)544dd623-f55b-417c-9d04-51b7b908359f_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_AppliedMotionMotorMB EXTENDS Axis_REF\nVAR_INPUT\n\tmodbusAddress : USINT;\n\tstepsPerInchSP : DINT := 3999;\n\tzeroOffset : REAL;\n\tjogForwardCMD : BOOL;\n\tjogReverseCMD : BOOL;\nEND_VAR\nVAR_OUTPUT\nEND_VAR\nVAR\n\tdirectDataOp : sctAppliedMotionPars;\n\tdistanceFromDrive : uModbusDWORD;\n\tready : BOOL;\n\talarmActive : BOOL;\n\tmoving : BOOL;\n\tinPosition : BOOL;\n\tatTorqueLimit : BOOL;\n\tatPosition : BOOL;\n\thomeSwitchTrigger : BOOL;\n\thomeNow : BOOL;\n\tP_Preset : BOOL;\n\tstart : BOOL;\n\tzHome : BOOL;\n\tstop : BOOL;\n\tfreeMotor : BOOL;\n\treset : BOOL;\n\tEL_Preset : BOOL;\n\tjogReverse : BOOL;\n\tjogForward : BOOL;\n\t\n\tmodbusWriteResponse : ARRAY[0..20] OF WORD;\n\treadData : IoDrvModbus.ModbusChannel;\n\treadDataAfterWrite : IoDrvModbus.ModbusChannel;\n\t//readDataMBCommand : IoDrvModbus.ModbusCommand;\n\twriteParameters : IoDrvModbus.ModbusChannel;\n  \t//writeDirectOpDataMBCommand : IoDrvModbus.ModbusCommand;\n\twriteOpcode : IoDrvModbus.ModbusChannel;\n  \t//writeRIODataMBCommand : IoDrvModbus.ModbusCommand;\n   \treadRateTimer : Standard.TON := (PT:= T#200MS);\n\treadAfterDDWrite : FB_ONS;\n\treadAfterRIOWrite : FB_ONS;\n\thaltONS : FB_ONS;\n\ttriggerRIOWrite : BOOL;\n\t(*Temp for testing*)\n\ttriggerNow : BOOL;\n\tdisable : BOOL;\n\tstatus : FB_AppliedMotionStatus;\n\talarms : FB_AppliedMotionAlarms;\n\tstate : eAppliedMotionDriveStates;\n\t\nEND_VAR\nVAR_IN_OUT\n\tMBChannel : IoDrvModbus.ModbusSlaveComPort;\n\tmodbusDataFromDrive : ARRAY[0..19] OF WORD;\n\tmodbusParDataToDrive : ARRAY[0..4] OF WORD;\n\tmodbusOpcodeToDrive : ARRAY[0..1] OF WORD;\nEND_VAR","LineInfoPersistence":"(string)544dd623-f55b-417c-9d04-51b7b908359f_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)3460","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}