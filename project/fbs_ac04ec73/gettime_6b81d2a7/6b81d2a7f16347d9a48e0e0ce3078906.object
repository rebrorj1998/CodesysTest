{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)6b81d2a7-f163-47d9-a48e-0e0ce3078906","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)GetTime","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)ac04ec73-dae7-40c4-962f-23a27bade28e"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)CASE iState OF\n\n    0:    \n        iState:= 1;\n        \n    1:  // retrieves the target date and time, including the timezone information which was set before\n        GetDateAndTime( xExecute:= TRUE);\n        IF GetDateAndTime.xDone THEN\n            dtCurrent:= GetDateAndTime.dtDateAndTime;\n            GetDateAndTime(xExecute:= FALSE);\n\t\t\tcurrentDateAndTime := dtCurrent;\n            //timeLeft := TIME_TO_DT(DT_TO_TIME(targetDate) - DT_TO_TIME(dttarget));\n            iState:= 2;\n        END_IF\n        IF GetDateAndTime.xError THEN\n            GetDateAndTime(xExecute:= FALSE);\n            iState:= 32767;\n        END_IF\n    \n    2: (*set a spedific date and time --> returns a variable of type DATE_AND_TIME \n         DateConcat --> set only date information --> returns a variable of type DATE\n         TODConcat  --> set only the time information  --> returns a variable of TOD (Time of day) *)\n        IF dtuError = 0 THEN\n            iState := 3;\n        ELSE\n            iState := 32767;\n        END_IF\n        \n    3:  (*a DATE_AND_TIME variable is splitted in its parts, like year, month, day etc.\n            DateSplit --> the same function for a DATE variable\n            TODSplit  --> the same function for a TOD variable *)\n\n            \n        IF dtuError = 0 THEN\n            iState:= 1;\n        ELSE\n            iState:= 32767;\n        END_IF\n        \n    32767: ; //error\n\nEND_CASE\n\n","LineInfoPersistence":"(string)6b81d2a7-f163-47d9-a48e-0e0ce3078906_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK GetTime\nVAR_INPUT\nEND_VAR\nVAR_OUTPUT\n    currentDateAndTime : DATE_AND_TIME;\n    \nEND_VAR\nVAR\n    iState                    : INT;\n    udiUtcTime             : UDINT;\n    udiUtcTimeLocal     : UDINT;\n    strTimeDate         : SYSTIMEDATE;\n    strTimeDateLocal     : SYSTIMEDATE;\n    dtDateTimeUTC        : DATE_AND_TIME;\n    timeLeftTime        : TIME;\n    timeLeftDWORD        : DWORD;\n    dDateUTC            : DATE;\n    todTimeOfDayUTC        : TOD;\n    \n    tSysStartTime        : TIME;\n    systimeStartNano    : SYSTIME;\n    udiStartTimeResult    : UDINT;\n    \n    udiResult             : UDINT;\n    \n    \n    GetDateAndTime            : DTU.GetDateAndTime;\n    SetTimeZoneInformation    : DTU.SetTimeZoneInformation;\n    \n    dtCurrent                : DATE_AND_TIME;\n    dtConcated                : DATE_AND_TIME;\n    eWeekday                 : RTCLK.WEEKDAY;\n    uiYear                     : UINT;\n    uiMonth                     : UINT;\n    uiDay                     : UINT;\n    uiHour                     : UINT;\n    uiMinute                 : UINT;\n    uiSecond                 : UINT;\n        \n    dtuError                : DTU.ERROR;\nEND_VAR\n","LineInfoPersistence":"(string)6b81d2a7-f163-47d9-a48e-0e0ce3078906_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)243","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}