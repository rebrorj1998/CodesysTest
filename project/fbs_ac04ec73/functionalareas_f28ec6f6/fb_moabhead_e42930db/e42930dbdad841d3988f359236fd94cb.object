{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)e42930db-dad8-41d3-988f-359236fd94cb","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_MOABHead","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)f28ec6f6-01c6-4f31-83d6-90cd74feb393"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: FB_MOABHead\n//    Description: This is the supervisory module for the MOAB head.\n//    There is one supervisory state machine for the head and 3 sub-state machines Sealing/Separating, Release/Feed, and Opening Bag\n//    Created by: Ben Hess\n//    Created Date: Tuesday, April 17, 2018\n\n{region \"Setup\"}\n\n{endregion}\n// Run BaseComponentFB\nSUPER^();\n\n// When power is returned, give machine ~5 seconds\npowerSettlingTimer(IN := iEStopOK);\nGlobals.machinePowerOK := powerSettlingTimer.Q;\nsafePowerFailure.faultTrigger := NOT iEStopOK AND murrIOBusNode.ok;\n\n// Bags Low warning\nHMIData.bagLevelLow.active := iBagsLow;\n\n// Dry Cycle Warning\nHMIData.dryCycleActive.active := HMIData.enableDryCycle;\t\n\n// Ethernet/IP barcode verifier from Keyence\nkeyenceBCV(\n\tenable:= , \n\tptrEIPInputs:= ADR(keyenceBCVInputs), \n\tptrEIPOutputs:= ADR(keyenceBCVOutputs), \n\ttriggerInput:= , \n\t//commFail=> ,\n\tlastReadData => HMIData.barcodeLastReadString\n);\n\t \n// Barcode Verifier interface to printer\nbarcodeVerifier(enable := (HMIData.barcodeVerifierSelection <> BCVSelection.NotInstalled AND HMIData.barcodeVerifierInUse),\n\t\t \t\treadGoodInput := keyenceBCV.goodRead,\n\t\t\t\tdistanceToScan := HMIData.barcodeScanDistance,\n\t\t\t\tfeedSpeed := TO_REAL(HMIData.printSpeed),\n\t\t\t\tpositionOffset := HMIData.barcodeStartPosition,\n\t\t\t\tbadReadFaultCountSetting := HMIData.barcodeBadReadFaultSetting,\n\t\t\t\tcurrentBadReadCount => HMIData.barcodeBadReadCount,\n\t\t\t\tcurrentGoodReadCount => HMIData.barcodeGoodReadCount,\n\t\t\t\ttriggerScannerOutput => keyenceBCV.triggerInput\n);\n\t\t\t\t\t \n// Enable comms to Keyence N-L20 if selected in factory config\nIF HMIData.barcodeVerifierSelection = BCVSelection.LaserScanner THEN\n\tKeyence_BCV.Enable := TRUE; \n\tIF laserBarcodeScannerCommFail THEN \n\t\tbarcodeVerifierCommFail.Trigger();\n\tEND_IF\nELSE\n\tKeyence_BCV.Enable := FALSE;\nEND_IF\n\n// Enable/disable MODBUS TCP adapter \nModbusTCP_Slave_Device.Enable := HMIData.auxIOSource.ModbusTCP;\t\n\t\n// Option setup and factory config  \nIF HMIData.resetAverageCycleTime THEN\n\tHMIData.averageCycleTime := 0;\n\tHMIData.resetAverageCycleTime := FALSE;\nEND_IF\nHMIData.lastCycleTime := cycleTime;\n\nHMIData.printerNotReady.active := NOT printerReady AND zebraPrinter.enable;\nHMIData.waitingForPrinter.active := zebraPrinter.state = PRINTER_STATES.WaitingForData AND releaseAndFeedSubState = RELEASE_FEED_STATES.WaitForPrinter;\n\t \nbagOpenRetrySetting := HMIData.bagOpenRetrySetting;\nHMIData.bagOpenRetryCount := bagOpenRetryCount;\n\t \n// Run bus node\t\t  \nmurrIOBusNode(\n\tenable:= , \n\theadNodeEnabled:= TRUE, \n\tguardNodeEnabled:= (HMIData.cycleStartButtonSelection <> PalmButtonSelection.NotInstalled) OR (HMIData.funnelFactorySelection <> FunnelSelection.NotInstalled), \n\tprinterNodeEnabled:= (HMIData.printerSelection <> LabelPrinterSelection.NotInstalled), \n\tdischargeNodeEnabled:= TRUE, \n\tauxIONodeEnabled:= HMIData.auxIOConfig.factorySelection = AuxiliaryIOSelection.AuxIOStandard, \n\tconfigVersion:= HMIData.murrIOConfigVersion, \n\tptrMachineOptionsManagementOutputs:= ADR(oMOMConfig), \n\tptrSystemStatusInputs:= ADR(iMurrSystemState));\n\n// Setup of Motorized seal flattener motor and function block\nmsfVerticalAxis(extendOutput => oSealFlatDown, retractOutput => oSealFlatUp);\nmsfVerticalAxis.Execute();\nmotorizedSealFlatteners(sealFlattenersVerticalAxis := msfVerticalAxis,\n\t\t\t\t\t\tjogIn := HMIData.sealFlattenersServiceJogIn,\n\t\t\t\t\t\tjogOut := HMIData.sealFlattenersServiceJogOut,\n\t\t\t\t\t\traiseService := HMIData.sealFlattenersServiceRaise,\n\t\t\t\t\t\tlowerService := HMIData.sealFlattenersServiceLower,\n\t\t\t\t\t\tmoveToManualSetpoint := HMIData.sealFlattenersMoveToManualPos,\n\t\t\t\t\t\tmanualPosSetpoint := HMIData.sealFlattenersManualPositionSetting,\n\t\t\t\t\t\tsealFlattenerMotorCommFailInput := (sealFlattenerCommFail AND HMIData.sealFlattenersInUse),\n\t\t\t\t\t\ttimeoutFault => sealFlattenerTimedOut.faultTrigger,\n\t\t\t\t\t\tposition => HMIData.sealFlattenersPosition,\n);\nmotorizedSealFlatteners.Mode := motorizedSealFlattenersMode;\nmotorizedSealFlatteners.enable := (HMIData.sealAreaOptionSelection = SealAreaOptionSelectionEnum.MotorizedSealFlatteners) AND HMIData.sealFlattenersInUse;\n// COPIED FROM MERGE-PAPER (CARLOS) BRANCH\n\n\n// Setup of MOAB Machine Pressure bar (\"#2\") on actual machine, not test rig\npressureBar(\n\tiPressureBarExtended := iPressureBarExtended, \n\tiPressureBarRetracted := iPressureBarRetracted, \n\tiPressureBarNotObstructed := iPressureBarNotObstructed, \n\tiLightCurtainsClear := iLightCurtainsClear,\n\tlightCurtainsInstalled := HMIData.lightCurtainSelection = LightCurtainsSelection.LoadingAreaLightCurtains,\n\toExtendCylinder => oPBar1Extend, oRetractCylinder => oPBar1Retract,\n\tcumulativeHeadCycleCount := Globals.headCycleCount2\n);\npressureBar.Mode := electricPressureBarMode;\n\t \n// Adding extra pressure bar valve for test\nopBar2Extend := oPBar1Extend;\nopbar2Retract := oPBar1Retract;\n\n// Run bag delivery \nbagDelivery(\n\tjogForwardPB := HMIData.jogBagForward,\n\tjogReversePB := HMIData.jogBagReverse,\n\tfeedToSealSetpoint := HMIData.feedToSealSetpoint,\n\tbagLengthSetpoint := HMIData.bagLength,\t \n\tprintVelocitySetpoint := HMIData.printSpeed,\n\tprintLengthSetpoint := HMIData.printLength,\n\tsealOffsetSetpoint := HMIData.bagSkirtLength,\n\treverseVelocitySetpoint := TO_INT(HMIData.bagReverseSpeed),\n\tfeedVelocitySetpoint := TO_INT(HMIData.bagForwardSpeed),\n\tprintOffsetSetpoint := HMIData.printOffset,\t\n\treverseToPrintheadRequired := zebraPrinter.enable,\n\tbagFeedMasterMotorCommFailInput := bagFeedMasterCommFail,\n\tbagFeedRearMotorCommFailInput := bagFeedSlaveCommFail,\n\tstepsPerInchSetting := Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY,\n\tvelocityMultiplier := Globals.VELOCITY_IPS_MULTIPLIER_PNEUMATIC,\n\trearMotorConfigVersion := HMIData.rearUnwindMotorConfigVersion\t \n);\nbagDelivery.Mode := bagDeliveryMode;\n\n// Run Zebra Printer\nzebraPrinter(ribbonEncoderState := iPrinterRibbonEncoder, oLowerPrintHead => oPrintHeadDown);\nzebraPrinter.Mode := printerMode;\nzebraPrinter.enable := (HMIData.printerSelection <> LabelPrinterSelection.NotInstalled) AND HMIData.printerInUse;\n\nIF HMIData.enableDryCycle THEN\n    zebraPrinter.enable := FALSE;\nEND_IF\nIF HMIData.activateDemoMode THEN\n\tHMIData.demoModeIsActive.active := TRUE;\n\tzebraPrinter.autoSendLabel := TRUE;\nELSE\n\tHMIData.demoModeIsActive.active := FALSE;\n\tzebraPrinter.autoSendLabel := FALSE;\nEND_IF\n\n// 1st Stage Funnel\nfunnel(\n\topeningDelay := HMIData.funnelOpenDelay, \n\topeningDwell := HMIData.funnelOpeningTime,\n\tclosingDwell := HMIData.funnelClosingTime,\n\tiOpened := iFunnelOpened, \n\tiClosed := iFunnelClosed,  \n\toClose => oFunnelClose, \n\toOpen => oFunnelOpen\n);\n\n// 2nd Stage Funnel\nIF stagingFunnel.enable THEN\nstagingFunnel(\n\topeningDelay := HMIData.stagingFunnelOpenDelay, \n\topeningDwell := HMIData.stagingFunnelOpeningTime,\n\tclosingDwell := HMIData.stagingFunnelClosingTime,\n\tiOpened := iStagingFunnelOpened, \n\tiClosed := iStagingFunnelClosed,  \n\toClose => oStagingFunnelClose, \n\toOpen => oStagingFunnelOpen\n);\nEND_IF\nCASE HMIData.funnelFactorySelection OF\n\tFunnelSelection.NotInstalled:\n\t\t// Disable both funnels\n\t\tfunnel.enable := FALSE;\n\t\tstagingFunnel.enable := FALSE;\n\t\t\n\tFunnelSelection.FunnelWithSensors:\n\t\t//\n\t\tfunnel.enable := HMIData.funnelInUse;\n\t\tfunnel.feedback := eActuatorFeedbackType.Both;\n\t\tstagingFunnel.enable := FALSE;\n\t\n\tFunnelSelection.FunnelWithoutSensors:\n\t\t//\n\t\tfunnel.enable := HMIData.funnelInUse;\n\t\tfunnel.feedback := eActuatorFeedbackType.None;\n\t\tstagingFunnel.enable := FALSE;\n\t\t\n\tFunnelSelection.TwoStageFunnelWithSensors:\n\t\t//\n\t\tfunnel.enable := HMIData.funnelInUse;\n\t\tfunnel.feedback := eActuatorFeedbackType.Both;\n\t\tstagingFunnel.enable := HMIData.funnelInUse;\n\t\tstagingFunnel.feedback := eActuatorFeedbackType.Both;\n\t\t\nEND_CASE\n\n//\nsealBarTempSensor(\n\tbusNodeOK := murrIOBusNode.ok,\n\tptrTemperatureBytes := ADR(iHeaterBarTempInputs)\n);\n\t \n//\nIF sealBarTempSensor.reconfigureIO THEN\n\tmurrIOBusNode.restartBusnodePulse.Trigger();\t\t \nEND_IF\n\n//\t \nsealBarHeater(\n\tenable := NOT safePowerFailure.active,\n\ttemperatureSensor := sealBarTempSensor,\n\ttemperatureSetpoint := TO_REAL(HMIData.sealBarTemperatureSetting),\n\theaterPulse => \toHeaterPulse,\n\tcurrentTemp => HMIData.sealBarTemperature\n);\t \n\t \n{region \"timers\"}\n// Timers\nsealTimer();\nbagOpenFingerDelay();\nvacuumHoldTimer(PT := TO_TIME(HMIData.vacuumDwell * 1000));\nbagOpenCheckDelay();\nbagDropTimer(PT := TO_TIME((HMIData.loadPlateDelay * 1000) + (HMIData.bagDropTime * 1000)));\n{endregion}\n\t\t  \n// Setup of HPA and load plate.  Use .Trigger() to run.\nHPA.DwellSetting := TO_UINT(HMIData.hpaDwell * 1000);\nHPA(Q => oHPAOn);\nhpaServiceOnONS(CLK := HMIData.hpaserviceOn);\n\ntriggerLPAWhileFeedingONS(CLK := releaseAndFeedSubState = RELEASE_FEED_STATES.MovingJawOutAndFeedingBag);\nIF HMIData.lpaDuringBagFeedEnable AND triggerLPAWhileFeedingONS.OSR THEN\n    LPA.DwellSetting := TO_DINT(((bagDelivery.remainingLength - HMIData.bagSkirtLength) / TO_REAL(HMIData.bagForwardSpeed)) * 1000.0);\n    LPA.Trigger();\nEND_IF\nLPA(Q => oLPAOn);\n\t \nCASE HMIData.independentBagDeflatorSelection OF\n\tBagDeflatorSelection.NotInstalled:\t\t\t\t\t// Disable IBD\n\t\t \t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDEject := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.DelaySetting := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.DwellSetting := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.DelaySetting := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.DwellSetting := 0;\n\t\n\tBagDeflatorSelection.IBDStandard:\t// Enable IBD\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractONS(CLK := (IBDRetractToDeflate.Q OR IBDRetractToEject.Q));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDExtendONS(CLK := NOT (IBDRetractToDeflate.Q OR IBDRetractToEject.Q));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDDeflateDwellTime <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDPackageEjectAssistDwellTime <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDEject := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDEject := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.funnelFactorySelection <> FunnelSelection.NotInstalled THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders(extendOutput => oIBDExtendWithFunnel, retractOutput => oIBDRetractWithFunnel);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders(extendOutput => oIBDExtend, retractOutput => oIBDRetract);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF IBDRetractONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders.Retract();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF IBDExtendONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders.Extend();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.DelaySetting := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.DwellSetting := TO_UINT(HMIData.IBDDeflateDwellTime * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.DelaySetting := TO_UINT(HMIData.IBDPackageEjectAssistDelayTime * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.DwellSetting := TO_UINT(HMIData.IBDPackageEjectAssistDwellTime * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\tBagDeflatorSelection.IBDWithHingedPlate:\t// Enable IBD with Hinged Plate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders(extendOutput => oIBDExtend, retractOutput => oIBDRetract);\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.funnelFactorySelection <> FunnelSelection.NotInstalled THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders(extendOutput => oIBDExtendWithFunnel, retractOutput => oIBDRetractWithFunnel);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders(extendOutput => oIBDExtend, retractOutput => oIBDRetract);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.DelaySetting := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.DwellSetting := TO_UINT(HMIData.IBDDeflateDwellTime * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.DelaySetting := TO_UINT(HMIData.IBDPackageEjectAssistDelayTime * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.DwellSetting := TO_UINT(HMIData.IBDPackageEjectAssistDwellTime * 1000);\n\t\nEND_CASE\n\n (*\nCASE HMIData.bofSelection OF\n\tBagOpenFingersSelection.NotInstalled:\t\t\t\t\t// Disable Bag Open\n\t\n\t\t \t\t\t\t\t\t\t\t\t\t\t\t\tenableBagOpen := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\tBagOpenFingersSelection.PneumaticWithBagOpenSensors:\t// Enable Bag Open\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableBagOpen := TRUE;\nEND_CASE\n*)\n//commented out to test this code to correct HPA behavior.\n\nenableBagOpen := HMIData.bagOpenEnable;\n\n//We want to skip the whole bag open procedure, whether fingers are present or not\n//We want to execute the bag open procedure, whether fingers are present or not\n\n\n\n\nCASE HMIData.cycleStartButtonSelection OF\n\tPalmButtonSelection.NotInstalled:\t\t\t\t\t// Dont' allow input to start bagger cycle\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tstartCycleReqFromPalmButtons := FALSE;\n\t\t \n\tPalmButtonSelection.SinglePalmButton:\t\t\t\t// Start using one side only\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tstartCycleReqFromPalmButtons := iRightPalmButton;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Trigger fault if left palm button is seen - should be set up for dual!\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF iLeftPalmButton THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpalmButtonConfigError.Trigger();\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t \n\tPalmButtonSelection.DualPalmButton:\t\t\t\t\t// Both buttons must be pressed\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tstartCycleReqFromPalmButtons := iRightPalmButton AND iLeftPalmButton;\nEND_CASE\nstartCycleReqFromPalmButtonsONS(CLK := startCycleReqFromPalmButtons);\t \n\nHMIData.lightCurtainsBlocked.active := (NOT iLightCurtainsClear AND HMIData.lightCurtainSelection = LightCurtainsSelection.LoadingAreaLightCurtains);\t \n\t \n\t\t  \nCASE HMIData.auxIOConfig.factorySelection OF\n\tAuxiliaryIOSelection.NotInstalled:\t\t\t\t\t// Turn outputs off\n\t\t \t\t\t\t\t\t\t\t\t\t\t\toAuxBaggerOK := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toAuxReadyForFiller := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOff();\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOff();\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmurrIOBusNode.auxIONodeEnabled := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.fillerFactorySelection = FillerSelection.StandardFiller THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.fillerFactorySelection := FillerSelection.NotInstalled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t \n\tAuxiliaryIOSelection.AuxIOStandard:\t\t\t\t\t// Use aux IO\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tmurrIOBusNode.auxIONodeEnabled := TRUE;\n\t\t \t\t\t\t\t\t\t\t\t\t\t\toAuxBaggerOK := NOT HMIData.faultActive;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toAuxReadyForFiller := filler.waitingForFiller;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfiller.fillerOK := (HMIData.auxIOConfig.cfgInput1Selection = AuxInputSelection.FillerOK AND iAuxConfigInput1) OR\n                                                        (HMIData.auxIOConfig.cfgInput2Selection = AuxInputSelection.FillerOK AND iAuxConfigInput2);\n\n                                                        HMIData.baggerInhibited.active := (HMIData.auxIOConfig.cfgInput1Selection = AuxInputSelection.BaggerInhibit AND iAuxConfigInput1) OR\n                                                                                          (HMIData.auxIOConfig.cfgInput2Selection = AuxInputSelection.BaggerInhibit AND iAuxConfigInput2);    \n \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE HMIData.auxIOConfig.cfgOutput1Selection OF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.BagMade:\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF state = HEAD_STATES.SealedAndSeparatedBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.CycleComplete:\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF state = HEAD_STATES.OpenedBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.PrinterDataReady:\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF printerDataReady THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.WaitingForPrinter:\t// \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF releaseAndFeedSubState = RELEASE_FEED_STATES.WaitForPrinter THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOff();\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.BagMadePlusLabelRequired:\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF NOT printerDataReady AND state = HEAD_STATES.SealedAndSeparatedBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF printerDataReady OR HMIData.faultActive OR (releaseAndFeedSubState = RELEASE_FEED_STATES.FeedToOffset) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.BagsLow:\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.bagLevelLow.active THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.RunExternalExitConveyor:\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF oRunExternalExitConveyor THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput1Pulse.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_CASE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE HMIData.auxIOConfig.cfgOutput2Selection OF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.BagMade:\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF state = HEAD_STATES.SealedAndSeparatedBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.CycleComplete:\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF state = HEAD_STATES.OpenedBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.PrinterDataReady:\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF printerDataReady THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.WaitingForPrinter:\t// \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF releaseAndFeedSubState = RELEASE_FEED_STATES.WaitForPrinter THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOff();\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.BagMadePlusLabelRequired:\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\tIF NOT printerDataReady AND state = HEAD_STATES.SealedAndSeparatedBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF printerDataReady OR HMIData.faultActive OR (releaseAndFeedSubState = RELEASE_FEED_STATES.FeedToOffset) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.BagsLow:\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.bagLevelLow.active THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAuxOutputSelection.RunExternalExitConveyor:\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF oRunExternalExitConveyor THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigOutput2Pulse.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_CASE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t \nEND_CASE \n\t \n// Pulse outputs that are temporary statuses (Cycle Complete) vs. held (Waiting for Printer) \nconfigOutput1Pulse(Q => oAuxConfigOut1);\nconfigOutput2Pulse(Q => oAuxConfigOut2);\nconfigOutput1Pulse.DwellSetting := 500;\nconfigOutput2Pulse.DwellSetting := 500;\n // Filler and EZFeed conveyor setup\nCASE HMIData.fillerFactorySelection OF\n\tFillerSelection.NotInstalled:\t\t\t\t\t// No filler\n\t\t \t\t\t\t\t\t\t\t\t\t\tfiller.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tfiller.activateFiller := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.fillerEnable := FALSE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tezfeed.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tfillerModeCycleStartOnlyPulse.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\tInfeed_Conveyor_IO.Enable := FALSE;\n\t\t \n\tFillerSelection.StandardFiller:\t\t\t\t\t// Only enable filler FB if Aux IO is enabled through COMMS or physically\n\t\t \t\t\t\t\t\t\t\t\t\t\tfiller.enable := ((HMIData.auxIOConfig.factorySelection = AuxiliaryIOSelection.AuxIOStandard)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR HMIData.auxIOSource.ModbusTCP\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR HMIData.auxIOSource.OPC_UA);\n\t\t\t\t\t\t\t\t\t\t\t\t\tInfeed_Conveyor_IO.Enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\tFillerSelection.EZFeed:\t\t\t\t\t\t\tfiller.enable := TRUE;\n\t\t \t\t\t\t\t\t\t\t\t\t\tezfeed.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tInfeed_Conveyor_IO.Enable := TRUE;\nEND_CASE \n\n_auxIORemote(\n\t//state := state,\t//Unavailable with 1174\n\tbagsLow := HMIData.bagLevelLow.active,\n\tfaultActive := HMIData.faultActive,\n\t//inhibitCycle := printAndApply.inhibitCycle,\n\tprinterDataReady := printerDataReady,\n\twaitingForFiller := filler.waitingForFiller,\n\trunExitConveyor := oRunExternalExitConveyor,\t\n\tactiveFaults := GlobalObjects.CollectionOfActiveFaults.ObjNames,\n\tinhibitBagger => \n\t);\n\n\nezfeed(\n\tenable:= , \n\tbaggerFaulted:= HMIData.faultActive, \n\tenableEZFeed:= HMIData.fillerEnable, \n\tcontinuousModeEnable:= HMIData.infeedConveyorRunningMode, \n\tpartsCountingModeEnable:= HMIData.infeedConveyorCountingMode, \n\tflightPresentSensor:= iInfeedFlightSensor, \n\tpartPresentSensor:= NOT iLightCurtainsClear AND HMIData.lightCurtainSelection = LightCurtainsSelection.LoadingAreaLightCurtains, \n\twaitingForFiller:= filler.waitingForFiller AND (NOT HMIData.stopMachine) AND NOT HMIData.batchCountDone.active, \n\tindexDwellSetting:= HMIData.infeedIndexDwellTimer, \n\tflightTarget:= HMIData.infeedFlightCountTarget, \n\tpartsTarget:= HMIData.infeedPartsCountTarget, \n\temptyPartsWarningSetting:= HMIData.infeedEmptyPartsSetting, \n\trestartFromEmptyParts:= HMIData.initiateCycle, \n\tstate=> , \n\trunVFD=> oRunInfeedVFD, \n\tflightCount=> HMIData.infeedFlightCountActual, \n\tpartsCount=> HMIData.infeedPartsCountActual, \n\temptyPartsWarningCount=> HMIData.infeedEmptyPartsActual, \n\temptyPartsWarning=> HMIData.infeedConveyorOutOfParts.active,\n\tEZFeedDone=> );\n\t\t \nIF HMIData.fillerFactorySelection = FillerSelection.EZFeed THEN\n\tInfeed_Conveyor_IO.Enable := TRUE; \n\tIF infeedConveyorCommFail THEN \n\t\tinfeedConveyorIOCommFail.Trigger();\n\tEND_IF\nELSE\n\tInfeed_Conveyor_IO.Enable := FALSE;\nEND_IF\n\ninfeedConveyorVFDFaulted.faultTrigger := (HMIData.fillerFactorySelection = FillerSelection.EZFeed) AND ezfeed.enableEZFeed AND NOT iInfeedVFDNotFaulted;\n\nfiller( \n\tfaultActive:= HMIData.faultActive,\n\tbaggerInhibited:= HMIData.baggerInhibited.active,\n\tfillerTrigger:= (iAuxFillerTrigger AND HMIData.auxIOSource.Physical) OR ezfeed.EZFeedDone OR (RemoteComms.OPCInputsToBagger.fillerTrigger AND HMIData.auxIOSource.OPC_UA) OR (RemoteComms.modbusInputsToBagger.fillerTrigger AND HMIData.auxIOSource.ModbusTCP), \n\tactivateFiller:= HMIData.fillerEnable\n); \n\t\nfillerModeCycleStartOnlyPulse.DwellSetting := 4000;\nfillerModeCycleStartOnlyPulse(Q => HMIData.fillerModeCycleStartOnly.active);\t\nIF filler.activateFiller AND NOT filler.cycleBaggerToActivateFiller.active THEN\n\tIF (HMIData.initiateCycle OR startCycleReqFromPalmButtons) AND NOT HMIData.infeedConveyorOutOfParts.active THEN\n\t\tfillerModeCycleStartOnlyPulse.Trigger();\n\tEND_IF\nEND_IF\n\n//\t \nHMIData.packageEjectGuardRemoved.active := HMIData.packageEjectSelection = PackageEjectionSelection.LabelSideUp AND NOT iPackageEjectGuardClosed;\n\n//\nloadShelf(\n\tswitchedPowerON := iEStopOK,\n\tfaultsEnabled := FALSE,\n\tinUse := HMIData.loadPlateInUse,\n    shakerEnable := HMIData.shakerInstalled,\n\tshakeStart := HMIData.loadShelfShakerStart,\n\tshakerDwell := HMIData.loadShelfShakerDwell,\n\tshakerDelay := HMIData.loadShelfShakerDelay,\n\tshakerOnDwell := HMIData.loadShelfShakerOnDuration,\n\tshakerOffDwell := HMIData.loadShelfShakerOffDuration,\n\tdisabledPosition := HMIData.packageEjectDisabledPosition,\n\tmoveToLoadingPositon => oLoadShelfUp,\n\tmoveToDischargePosition => oLoadShelfDown\n);\t\t \nHMIData.loadShelfService.extendedFeedback := rearLoadPlate.inLoadingPosition;\nHMIData.loadShelfService.retractedFeedback := rearLoadPlate.inDischargePosition;\n\n//\t \nrearLoadPlate(\n\tswitchedPowerON := iEStopOK,\n\tinUse := HMIData.loadPlateInUse,\n\tinLoadingPosition := iLoadPlateExtended,\n\tinDischargePosition := iLoadPlateRetracted,\n    shakerEnable := HMIData.shakerInstalled,\n\tshakeStart := HMIData.rearloadPlateShakerStart,\n\tshakerDwell := HMIData.rearLoadPlateShakerDwell,\n\tshakerDelay := HMIData.rearLoadPlateShakerDelay,\n\tshakerOnDwell := HMIData.rearLoadPlateShakerOnDuration,\n\tshakerOffDwell := HMIData.rearLoadPlateShakerOffDuration,\n\tdisabledPosition := HMIData.packageEjectDisabledPosition,\n\tmoveToLoadingPositon => oloadPlateExtend,\n\tmoveToDischargePosition => oLoadPlateRetract,\n\tfailedToExtend => rearLoadPlateFaults.failedToLoad.faultTrigger,\n\tfailedToRetract => rearLoadPlateFaults.failedToDischarge.faultTrigger\n);\t\t \nHMIData.rearLoadPlateService.extendedFeedback := HMIData.loadPlateService.extendedFeedback := rearLoadPlate.inLoadingPosition;\nHMIData.rearLoadPlateService.retractedFeedback := HMIData.loadPlateService.retractedFeedback :=  rearLoadPlate.inDischargePosition;\n\n//\t \nfrontLoadPlate(\n\tswitchedPowerON := iEStopOK,\n\tinUse := HMIData.loadPlateInUse,\n\tinLoadingPosition := iFrontLoadPlateRetracted,\n\tinDischargePosition := iFrontLoadPlateExtended,\n\ttriggerDwell := HMIData.loadPlateDwell,\n\ttriggerDelay := HMIData.loadPlateDelay,\n    shakerEnable := HMIData.shakerInstalled,\n\tshakeStart := HMIData.frontloadPlateShakerStart,\n\tshakerDwell := HMIData.frontLoadPlateShakerDwell,\n\tshakerDelay := HMIData.frontLoadPlateShakerDelay,\n\tshakerOnDwell := HMIData.frontLoadPlateShakerOnDuration,\n\tshakerOffDwell := HMIData.frontLoadPlateShakerOffDuration,\n\tdisabledPosition := HMIData.packageEjectDisabledPosition,\n\tmoveToLoadingPositon => oFrontLoadPlateToLoad,\n\tmoveToDischargePosition => oFrontLoadPlateToDischarge,\n\tfailedToExtend => forwardLoadPlateFaults.failedToLoad.faultTrigger,\n\tfailedToRetract => forwardLoadPlateFaults.failedToDischarge.faultTrigger\n);\t\t \nHMIData.forwardLoadPlateService.extendedFeedback := frontLoadPlate.inLoadingPosition;\nHMIData.forwardLoadPlateService.retractedFeedback := frontLoadPlate.inDischargePosition;\n\nCASE HMIData.packageEjectSelection OF\n\tPackageEjectionSelection.NotInstalled:\t\t\t\t// Disable All\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tloadShelf.enable := FALSE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.faultsEnabled := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.faultsEnabled := FALSE;\t\n\t\t \n\tPackageEjectionSelection.RearRetractingLoadPlate:\t// Enable Rear Retracting Load Plate\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tloadShelf.enable := FALSE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.faultsEnabled := powerSettlingTimer.Q;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.faultsEnabled := FALSE;\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDelay := HMIData.loadPlateDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDwell := HMIData.loadPlateDwell;\n\t\n\tPackageEjectionSelection.LabelSideUp:\t\t\t\t// Enable All\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tloadShelf.enable := TRUE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.faultsEnabled := powerSettlingTimer.Q;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.faultsEnabled := state >= HEAD_STATES.ReleaseAndFeedBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDelay := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDwell := HMIData.loadPlateDwell + HMIData.loadPlateDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.triggerDelay := HMIData.loadShelfDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.triggerDwell := HMIData.loadShelfDwell;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\tPackageEjectionSelection.RearRetractWithRetractShelf:   \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Enable Rear Retracting Load Plate and Shelf\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tloadShelf.enable := TRUE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.faultsEnabled := powerSettlingTimer.Q;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.faultsEnabled := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDelay := HMIData.loadPlateDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDwell := HMIData.loadPlateDwell;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.triggerDelay := HMIData.loadShelfDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.triggerDwell := HMIData.loadShelfDwell;\nEND_CASE\t\n\nexitConveyorRun();\nexitConveyorRun.DwellSetting := TO_DINT(HMIData.exitConveyorDwell * 1000);\nexitConveyorJogONS(CLK := HMIData.exitConveyorJog);\noRunExitConveyor := exitConveyorRun.Q AND HMIData.integratedExitConveyorSelection = IntegratedConveyorSelection.RearExit;\n\t \nexternalExitConveyorRun();\nexternalExitConveyorRun.DwellSetting := TO_UINT(HMIData.externalExitConveyorDwell * 1000);\nexternalExitConveyorJogONS(CLK := HMIData.externalExitConveyorJog);\noRunExternalExitConveyor := externalExitConveyorRun.Q AND HMIData.externalExitConveyorSelection <> ExteralConveyorSelection.NotInstalled;\n\nbagOpenFingers(enable := HMIData.bofSelection <> BagOpenFingersSelection.NotInstalled,\n\t\t\t\treleaseOutput => oBOFUp,\n\t\t \t\tgrabOutput => oBOFDown,\n\t\t\t\trightFingerBagPresent := iRightFingerBagPresent,\n\t\t\t\tleftFingerBagPreset := iLeftFingerBagPresent,\n\t\t\t\tbagFailedToGrabBothFingersCount := Globals.bagFailedToGrabBothFingersCount,\n\t\t\t\tbagFailedToGrabLeftFingerCount := Globals.bagFailedToGrabLeftFingerCount,\n\t\t\t\tbagFailedToGrabRightFingerCount := Globals.bagFailedToGrabRightFingerCount,\n\t\t\t\tsuccessfulBagOpenCount := Globals.successfulBagOpenCount);\n\n// Setup and run adjustable passthrough\n//refIECObject := Pbar_ServoEIP;\npressureBarEndStopMotor(ptrEIPInputs := ADR(jawPasstrhoughMotorInputs),\n                ptrEIPOutputs := ADR(jawPasstrhoughMotorOutputs),\n                stepsPerInchSetpoint := Globals.STEPS_PER_INCH_SHOW_MOTOR,\n\t\t\t\treversePolarity := TRUE,\n\t\t\t\tdefaultCurrentSetpoint := 650,\n\t\t\t\tcommFail := pressureBarCommFail,\n\t\t\t\tisHomable := TRUE,\n\t\t\t\tfeedbackSelection := PositionFeedbackSelection.AbsolutePosition);\t\t\t\npressureBarEndStopMotor.Execute();\n\npassthrough(pressureBarEndStopMotor := pressureBarEndStopMotor, \n\t\t\tcumulativeChangeCount := Globals.passthroughChangeCount2, \n\t\t\tcumulativeChangeDistance := Globals.passthroughChangeDistance2,\n\t\t\tjogInPB := HMIData.jogPassthroughForward,\n\t\t\tjogOutPB := HMIData.jogPassthroughReverse,\n\t\t\tpassthroughPosition => HMIData.passthroughPosition);\npassthrough.Mode := passthroughMode;\n\n{endregion}\n\t \nhmiLight(lightOutput => oHMILight);\nfaultONS(CLK := HMIData.faultActive);\n\nreadyToRun := (motorizedSealFlatteners.Ready OR NOT motorizedSealFlatteners.enable) \n                AND (pressureBar.Ready OR NOT pressureBar.enable)\n                AND (bagDelivery.Ready OR NOT bagDelivery.enable)\n                AND (zebraPrinter.Ready OR NOT zebraPrinter.enable)\n\t\t\t\tAND (passthrough.Ready OR NOT passthrough.enable)\n\t\t\t\tAND murrIOBusNode.ok;\niPowerOffButtonONS(CLK := iPowerOffButton);\n\nresetTimer(IN := iPowerOffButtonONS.OSR);\nIF iPowerOffButtonONS.OSR THEN\n    reset();\nEND_IF\n\t\t\t\t\nIF HMIData.makeReady OR resetTimer.Q THEN\n\tHMIData.ackAllFaults := TRUE;\n\tenable := TRUE;\n\t\n\tbagDropTimer.IN := FALSE;\n\t\n\tmotorizedSealFlattenersMode := DEVICE_MODES.Auto;\n\tmotorizedSealFlatteners.Reset();\n\tIF motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.HomeRequired AND motorizedSealFlatteners.enable THEN\n\t\tmotorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.HomeNow();\n\t\tmotorizedSealFlatteners.sealFlattenersVerticalAxis.Retract();\n\tEND_IF\n\t\n\tHMIData.bagOpenFeedNewBagCount := 0;\n\tbagOpenRetryCount := 0;\n\t\n\tHMIData.stopMachine := FALSE;\n\tHMIData.inCycle := FALSE;\n\telectricPressureBarMode := DEVICE_MODES.Auto;\n\tpressureBar.Reset();\n\tpressureBar.enable := TRUE;\n\n\tenableHeater := TRUE;\n\t\n\tbagDeliveryMode := DEVICE_MODES.Auto;\n\tbagDelivery.Reset();\n\tbagDelivery.enable := TRUE;\n\tIF iPowerOffButtonONS.OSR THEN\n\t\tbagDelivery.AutoFeedToEye();\n\t\tIF NOT passthrough.homeRequired THEN\n\t\t\tIF NOT iPressureBarExtended THEN\n\t\t\t\tpressureBar.AutoOpenJaw();\n\t\t\tELSE\n\t\t\t\tpressureBar.ExhaustCylinder();\n\t\t\tEND_IF\n\t\tEND_IF\n\tEND_IF\n\tIF passthrough.homeRequired THEN\n\t\thomeJawPB := TRUE;\n\tEND_IF\n\tbagOpened := FALSE;\n\t\n\tprinterMode := DEVICE_MODES.Auto;\n\tzebraPrinter.Reset();\n\n\tIF iPowerOffButtonONS.OSR AND NOT bagDelivery.bagTensionFault.active THEN\n\t\tIF (HMIData.factoryTestMode AND (HMIData.bagsMade.count < 1000)) THEN\n\t\t\tbagDelivery.bagFeedRearMotor.SetTorque((TO_DINT(HMIData.bagTensionSetting * 100)));\n\t\tEND_IF \n\tEND_IF  \n\tpassthrough.Reset();\n\tpressureBarEndStopMotor.Reset();\n\tpassthroughMode := DEVICE_MODES.Auto;\n\tpassthrough.enable := TRUE;\n\t\n\toVacOn := FALSE;\n\trearLoadPlate.Reset();\n\tfrontLoadPlate.Reset();\n\tloadShelf.Reset();\n\tIBDRetractToDeflate.Reset();\n\tIBDRetractToEject.Reset();\n\tIBDCylinders.Extend();\n\tLPA.Reset();\n\tLPA.ManualOff();\n\tHPA.Reset();\n\tfunnel.Close();\n\tstagingFunnel.Close();\n\texitConveyorRun.Reset();\n\texternalExitConveyorRun.Reset();\n\toSealBarExtend := FALSE;\n\toSealBarRetract := TRUE;\n\tsealTimer.IN := FALSE;\n\tpressureBarCloseDelay.IN := FALSE;\n\tfiller.Reset();\n\tconfigOutput1Pulse.Reset();\n\tconfigOutput2Pulse.Reset();\n\tconfigOutput1Pulse.ManualOff();\n\tconfigOutput2Pulse.ManualOff();\n\tfillerModeCycleStartOnlyPulse.Reset();\n\tbarcodeVerifier.Reset();\n\tkeyenceBCV.Reset();\n\tezFeed.Reset();\n\n\tstate := HEAD_STATES.Idle;\n\treset();\n\tsetPassthroughPB := FALSE; \n\n\tHMIData.jobLoadRequired.active := TRUE;\n\tHMIData.makeReady := FALSE;\n\thmiLight.TurnOff();\n\tautoModeKeepCycling := FALSE;\nEND_IF\nIF enableONS.Q OR resetONS.Q THEN\n\t\n\tstate := HEAD_STATES.Idle;\n\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.Idle;\n\treleaseAndFeedSubState := RELEASE_FEED_STATES.Idle;\n\topenBagSubState := BAG_OPEN_ASSIST_STATES.Idle;\n\tfinishCycleSubState := FINISH_CYCLE_STATES.Idle;\n\tmotorizedSealFlatteners.Reset();\n\tpressureBar.Reset();\n\tbagDelivery.Reset();\n\tzebraPrinter.Reset();\n\tbagDelivery.bagFeedRearMotor.EnableTensionFault();\n\n\t_reset := FALSE;\n\t_dropTimer.IN := FALSE;\n\tcycleTimer.IN := FALSE;\n\tbagDropTimer.IN := FALSE;\nEND_IF\n\n{warning 'TODO: Put this inside the passtrough FB'}\nIF passthrough.exhaustPressureBarRequest THEN\n    pressureBar.ExhaustCylinder();\n\tIBDCylinders.Exhaust();\n\tIF NOT oPBar1Extend AND NOT oPBar1Retract THEN\n\t\tpassthrough.AckRequest();\n\tEND_IF\nELSIF passthrough.extendPressureBarLowPressureRequest THEN\n    pressureBar.ExtendCylinderLowPressure();\n\tIBDCylinders.Extend();\n\tIF oPBar1Extend AND oPBar1Retract THEN\n\t\tpassthrough.AckRequest();\n\tEND_IF\nELSIF passthrough.extendPressureBarHighPressureRequest THEN\n    pressureBar.ExtendCylinderHighPressure();\n\tIBDCylinders.Extend();\n\tIF oPBar1Extend AND NOT oPBar1Retract THEN\n\t\tpassthrough.AckRequest();\n\tEND_IF\nEND_IF\n\nIF passthrough.extendIBDRequest THEN\n\tIBDCylinders.Extend();\nEND_IF\n\nIF HMIData.bagsMade.count >= 1000 THEN\n\tGlobals.factoryTestComplete := TRUE;\nEND_IF\n\nIF Globals.factoryTestComplete THEN\n\tHMIData.machineNotTested.active := FALSE;\nELSE\n\tHMIData.machineNotTested.active := TRUE;\nEND_IF\n\nIF HMIData.factoryTestMode THEN\n\tHMIData.factoryTestModeActive.active := TRUE;\nELSE\n\tHMIData.factoryTestModeActive.active := FALSE;\nEND_IF\n\n// Send torque value to motor                 \nrearMotorCommsReturned(CLK := bagDelivery.bagFeedRearMotor.commFail);\nIF HMIData.jobLoaded OR rearMotorCommsReturned.Q THEN\n\tbagDelivery.bagFeedRearMotor.SetTorque((TO_DINT(HMIData.bagTensionSetting * 100)));\nEND_IF\n\n// Clear batch count on batch enable\nbatchEnableONS(CLK := HMIData.batchEnable);\nIF (batchEnableONS.OSR)\n\tOR (NOT HMIData.batchEnable) \n\tOR (HMIData.batchReset)\n\tOR (resetONS.Q AND HMIData.batchCountDone.active)\nTHEN\n    HMIData.batchCount := 0;\n\tHMIData.batchReset := FALSE;\nEND_IF\nHMIData.batchCountDone.active := (HMIData.batchCount >= HMIData.batchSetting) AND HMIData.batchEnable;\nIF HMIData.batchCountDone.active OR NOT HMIData.autoEnable THEN\n\tautoModeKeepCycling := FALSE;\nEND_IF\n\nIF NOT enable OR NOT readyToRun OR faultONS.OSR THEN\n    state := HEAD_STATES.Fault;\n\tpressureBarEndStopMotor.Stop();\n\tcycleTimer.IN := FALSE;\nEND_IF\npressureBarCloseDelay(PT := TO_TIME(HMIData.pressureBarCloseDelay * 1000));\ncycleTimer();\n\nautoModeKeepCyclingTimer(PT := TO_TIME(HMIData.autoModeDwell * 1000), IN := autoModeKeepCycling AND state = HEAD_STATES.Idle);\n\nHMIData.mayCycleUnexpectedly.active := autoModeSelected OR filler.activateFiller;\n\nexhaustTimer(IN := iPressureBarExtended AND state = HEAD_STATES.Idle);\n\nfootSwitchONS(CLK := iFootSwitch);\n\nstopONS(CLK := HMIData.stopMachine);\n\nIF state <> HEAD_STATES.Idle AND HMIData.initiateCycle THEN\n\tHMIData.initiateCycle := FALSE;\nEND_IF\n\nCASE state OF\n    HEAD_STATES.Idle :                              // Start cycle if enabled\n                                                    IF (startCycle AND (filler.cycleBaggerToActivateFiller.active OR NOT filler.activateFiller)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (HMIData.factoryTestMode AND (HMIData.bagsMade.count < 1000)) AND (factoryTestModeKeepCycling AND NOT LPA.Q)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (startCycleReqFromPalmButtonsONS.OSR) AND (filler.cycleBaggerToActivateFiller.active OR NOT filler.activateFiller)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (HMIData.initiateCycle AND (filler.cycleBaggerToActivateFiller.active OR NOT filler.activateFiller))\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (filler.cycleBagRequest AND HMIData.autoEnable)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR ((filler.cycleBagRequest AND NOT HMIData.autoEnable) AND (footSwitchONS.OSR OR HMIData.initiateCycle OR startCycleReqFromPalmButtonsONS.OSR))\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (autoModeKeepCyclingTimer.Q)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR footSwitchONS.OSR AND (filler.cycleBaggerToActivateFiller.active OR NOT filler.activateFiller))\n\t\t\t\t\t\t\t\t\t\t\t   \t\tAND (NOT HMIData.sealBarNotAtTemperature.active OR HMIData.enableDryCycle)\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND (NOT HMIData.faultActive \n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.stopMachine \n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.baggerInhibited.active\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.batchCountDone.active\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT setPassthroughPB\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT EZFeed.emptyPartsWarning)\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND readyToRun THEN\n\t\t\t\t\t\t\t\t\t\t\t   \t\t\tstate := HEAD_STATES.DropProduct;\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT Globals.passthroughChangedFromJog AND HMIData.jobLoaded THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.jobLoaded := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    IF (HMIData.passthroughSetting <> passthroughSettingLast) OR (Globals.passthroughChangedFromJog AND HMIData.jobLoaded) AND NOT pressureBarEndStopMotor.Faulted AND NOT pressureBarEndStopMotor.HomeRequired THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGlobals.passthroughChangedFromJog := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.jobLoaded := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassthroughSetting := HMIData.passthroughSetting;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassthroughSettingLast := HMIData.passthroughSetting;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (NOT (pressureBarEndStopMotor.HomeRequired OR pressureBarEndStopMotor.Faulted))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ((NOT motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.homeRequiredIndication OR motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.Faulted) OR NOT motorizedSealFlatteners.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND readyToRun \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.faultActive\n\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thmiLight.TurnOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.stopMachine THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thomeJawPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstartCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.initiateCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tautoModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thmiLight.TurnOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfiller.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tezFeed.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//state := HEAD_STATES.Fault;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//HMIData.stopMachine := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tpbarExtendedONS(CLK := exhaustTimer.Q);\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF pbarExtendedONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.ExhaustCylinder();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.sealBarNotAtTemperature.active THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tautoModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpened THEN\n\t\t\t\t\t\t\t\t\t\t\t\t   \t\tIF HMIData.funnelFactorySelection <> FunnelSelection.NotInstalled AND funnel.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \t\t_funnelBagRemovedDebounceTimer.IN := NOT bagOpenFingers.CheckIfBagGrabbed(FALSE);\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \t\tIF _funnelBagRemovedDebounceTimer.Q AND NOT HMIData.enableDryCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \t\t_funnelBagRemovedDebounceTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \t\topenedBagWasRemoved.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpened := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t    ELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \t\t_funnelBagRemovedDebounceTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \t\tIF NOT bagOpenFingers.CheckIfBagGrabbed(FALSE) AND NOT HMIData.enableDryCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topenedBagWasRemoved.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpened := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t   \t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t{region:'Service'}\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF setPassthroughPB AND NOT homeJawPB THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thmiLight.BlinkSlow();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := HEAD_STATES.MovePassthrough;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF homeJawPB THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thmiLight.BlinkSlow();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := HEAD_STATES.StartHoming;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.loadPlateService.retractCommand OR HMIData.rearLoadPlateService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.moveToDischargePos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.loadPlateService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.rearLoadPlateService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.loadPlateService.extendCommand OR HMIData.rearLoadPlateService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.moveToLoadingPos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.loadPlateService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.rearLoadPlateService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.loadShelfService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.moveToDischargePos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.loadShelfService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.loadShelfService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.moveToLoadingPos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.loadShelfService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.forwardLoadPlateService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.moveToDischargePos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.forwardLoadPlateService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.forwardLoadPlateService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.moveToLoadingPos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.forwardLoadPlateService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders.Retract();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.IBDService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDCylinders.Extend();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.IBDService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.funnelService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Open();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.funnelService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.funnelService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.funnelService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.accumulatingFunnel.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstagingFunnel.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.accumulatingFunnel.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.accumulatingFunnel.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstagingFunnel.Open();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.accumulatingFunnel.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.lpaServicePulse THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.DwellSetting := TO_DINT(HMIData.lpaDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.lpaServicePulse := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.lpaServiceOn THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.lpaServiceOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.lpaServiceOff THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.lpaServiceOff := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.vacuumServiceOn THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.vacuumServiceOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.vacuumServiceOff THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.vacuumServiceOff := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t  \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.hpaServicePulse THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thpa.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.hpaServicePulse := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF hpaServiceOnONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHPA.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF hpaServiceOnONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.exitConveyorStartDwell THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.exitConveyorStartDwell := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.exitConveyorStart OR exitConveyorJogONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.exitConveyorStart := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.exitConveyorStop OR exitConveyorJogONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.exitConveyorStop := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.externalExitConveyorStartDwell THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.externalExitConveyorStartDwell := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.externalExitConveyorStart OR externalExitConveyorJogONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.externalExitConveyorStart := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.externalExitConveyorStop OR externalExitConveyorJogONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.externalExitConveyorStop := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.sealBarServiceCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.PT := TO_TIME(HMIData.sealBarDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT sealTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarServiceCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.sealBarServiceExtend THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarServiceExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.sealBarServiceRetract THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarServiceRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.bagOpenFingersServiceGrab THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Grab();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFingersServiceGrab := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.bagOpenFingersServiceRelease THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFingersServiceRelease := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t{endregion:'Service'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    IF (printerDataReady AND HMIData.labelsQueuedUpFaultEnable) THEN\n                                                        labelsQueuedUpFault.faultTrigger := TRUE;    \n                                                    ELSE\n                                                        labelsQueuedUpFault.faultTrigger := FALSE;\n                                                    END_IF      \t\t\t   \n\tHEAD_STATES.DropProduct:\t\n\n\t\t// If Funnel or Filler is enabled and a bag is presented \n\t\tIF ((HMIData.funnelFactorySelection <> 0) OR (filler.enable AND HMIData.fillerEnable)) AND bagOpened THEN\n\t   \t\tIF HMIData.funnelFactorySelection = FunnelSelection.TwoStageFunnelWithSensors THEN\n\t\t\t   \tstagingFunnel.Open();\n\t   \t\tEND_IF\n\t   \t\t_dropTimer.IN := TRUE;\n\t   \t\t_dropTimer.PT := TO_TIME(HMIData.fillerDropTime * 1000);\n\t   \t\tstate := HEAD_STATES.DroppingProduct;\n\t\tELSE\n\t   \t\tstartCycle := FALSE;\n\t\t\tcycleTimer.IN := TRUE;\n\t\t\tstate := HEAD_STATES.SealAndSeparateBag;\n   \t\tEND_IF\n\t\t\n\tHEAD_STATES.DroppingProduct:\n\n\t\t//\n\t\tIF _dropTimer.Q THEN\n\t\t\t_dropTimer.IN := FALSE;\t \n\t\t\tstate := HEAD_STATES.DroppedProduct;  \n   \t\tEND_IF\n\t\t\n\tHEAD_STATES.DroppedProduct:\n\n\t\t//\n\t\tstartCycle := FALSE;\n\t\tcycleTimer.IN := TRUE;\n\t\tstate := HEAD_STATES.SealAndSeparateBag;\n  \t\tstagingFunnel.Close();\n\t\t\t\t\t\t\t\t\t  \n    HEAD_STATES.SealAndSeparateBag :                // Begin Seal and Separate State machine\n\t\t\t\t\t\t\t\t\t\t\t\t\tfiller.BaggerCycleInitiated();\n                                                    HMIData.inCycle := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.airFilterClean.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.baggerCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF funnel.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenFingers.CheckIfBagGrabbed(FALSE) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpened := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    state := HEAD_STATES.SealingAndSeparatingBag;\n                                                    sealAndSeparateSubState := SEAL_SEPARATE_STATES.Shake;\n                \n    HEAD_STATES.SealingAndSeparatingBag :            IF sealAndSeparateSubState = SEAL_SEPARATE_STATES.Done THEN\n                                                        state := HEAD_STATES.SealedAndSeparatedBag;\n                                                        sealAndSeparateSubState := SEAL_SEPARATE_STATES.Idle;\n                                                    END_IF    \n\n    HEAD_STATES.SealedAndSeparatedBag :                state := HEAD_STATES.ReleaseAndFeedBag;                                    \n                                                    \n    HEAD_STATES.ReleaseAndFeedBag :                    // Open the jaw and release the bag\n                                                    releaseAndFeedSubState := RELEASE_FEED_STATES.WaitForPressureBarOpenTimer;\n                                                    state := HEAD_STATES.ReleasingAndFeedingBag;\n                                                    \n    HEAD_STATES.ReleasingAndFeedingBag :            // \n                                                    IF releaseAndFeedSubState = RELEASE_FEED_STATES.Done THEN\n                                                        state := HEAD_STATES.ReleasedAndFedBag;\n                                                        releaseAndFeedSubState := RELEASE_FEED_STATES.Idle;\n                                                    END_IF\n                                                    \n    HEAD_STATES.ReleasedAndFedBag :                    // \n                                                    IF HMIData.batchEnable THEN\n                                                        HMIData.batchCount := HMIData.batchCount + 1;\n                                                    END_IF\n  \n                                                    IF HMIData.enableDryCycle THEN\n                                                        Globals.dryCycleCount := Globals.dryCycleCount + 1;     \n                                                    ELSE\n                                                        Globals.bagsMadeCount := Globals.bagsMadeCount + 1; \n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen THEN\n                                                        state := HEAD_STATES.OpenBag;\n                                                    ELSE\n                                                        state := HEAD_STATES.FinishCycle;\n                                                    END_IF\n                                                                    \n    HEAD_STATES.OpenBag :                            // Close jaw to grab the bag\n                                                    openBagSubState := BAG_OPEN_ASSIST_STATES.MoveJawIn;\n                                                    state := HEAD_STATES.OpeningBag;\n                                                    \n                                                    \n    HEAD_STATES.OpeningBag :                        // Open jaw and grab onto the bag\n                                                    IF openBagSubState = BAG_OPEN_ASSIST_STATES.Done THEN\n                                                        state := HEAD_STATES.OpenedBag;\n                                                        openBagSubState := BAG_OPEN_ASSIST_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF openBagSubState = BAG_OPEN_ASSIST_STATES.FeedNewBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := HEAD_STATES.SealAndSeparateBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.Idle;\n                                                    END_IF\n                                                    \n    HEAD_STATES.OpenedBag :                            // Move fingers in and to bag holding and reset cycle\n                                                    IF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle OR NOT motorizedSealFlatteners.enable) //OR bagFailedToOpen\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t AND pressureBar.state = PRESSURE_BAR_STATES.JawOpened THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := HEAD_STATES.FinishCycle;\n                                                    END_IF\n\tHEAD_STATES.FinishCycle :\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Start;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate := HEAD_STATES.FinishingCycle;\n\tHEAD_STATES.FinishingCycle : \t\t//\n\t\t\t\t\t\t\t\t\t\t\tIF finishCycleSubState = FINISH_CYCLE_STATES.Done THEN\n\t\t\t\t\t\t\t\t\t\t\t\tstate := HEAD_STATES.FinishedCycle;\n\t\t\t\t\t\t\t\t\t\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\tHEAD_STATES.FinishedCycle :\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\tHMIData.bagsMade.Increment();\n\t\t\t\t\t\t\t\t\t\t\tHMIData.resettableBagsMade.Increment();\n                                            state := HEAD_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tIF NOT HMIData.stopMachine THEN\n\t\t\t\t\t\t\t\t\t\t\t\tfiller.BaggerCycledAndReady();\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tcycleTime := (TIME_TO_REAL(cycleTimer.ET) / 1000); \n\t\t\t\t\t\t\t\t\t\t\tcycleTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tIF HMIData.averageCycleTime = 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\tHMIData.averageCycleTime := cycleTime;\n\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\tHMIData.averageCycleTime := (cycleTime + HMIData.averageCycleTime) / 2;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tHMIData.inCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t//bagFailedToOpen := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tIF HMIData.autoEnable AND NOT HMIData.stopMachine AND NOT HMIData.fillerEnable THEN\n\t\t\t\t\t\t\t\t\t\t\t\tautoModeKeepCycling := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tIF HMIData.factoryTestMode AND NOT HMIData.stopMachine THEN\n\t\t\t\t\t\t\t\t\t\t\t\tIF (HMIData.bagsMade.count >= 1000) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.factoryTestMode := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\n    HEAD_STATES.StartHoming:                // \n                                            passthrough.HomeEndStop();\n                                            state := HEAD_STATES.Homing;                                        \n    \n    HEAD_STATES.Homing:                     // \n                                            IF passthrough.state = PASSTHROUGH_SERVO_STATES.HomeComplete THEN\n                                                state := HEAD_STATES.HomingComplete;       \n                                            END_IF\n                                            \n    HEAD_STATES.HomingComplete:             // \n                                            homeJawPB := FALSE;\n                                            state := HEAD_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := TRUE;\n    \n    HEAD_STATES.MovePassthrough:            // \n                                            pressureBar.AutoMovingPassthrough();\n                                            passthrough.MovePassthrough(passthroughSetting);\n                                            state := HEAD_STATES.MovingPassthrough;\n    \n    HEAD_STATES.MovingPassthrough:          IF passthrough.state = PASSTHROUGH_SERVO_STATES.PassthroughMovedIn OR passthrough.state = PASSTHROUGH_SERVO_STATES.PassthroughMovedOut THEN\n                                                state := HEAD_STATES.MovedPassthrough;     \n                                            END_IF\n                                            \n    HEAD_STATES.MovedPassthrough:           // \n                                            pressureBar.AutoDoneMovingPassthrough();\n                                            state := HEAD_STATES.Idle;\n\t\t\t\t\t\t\t\t\t   \t\t//HMIData.passthroughSetting := \n\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := FALSE;\n                                                    \n    HEAD_STATES.Fault:                      hmiLight.TurnOff();\n\t\t\t\t\t\t\t\t\t\t\tHMIData.inCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tcycleTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tbagDelivery.PointToPointOnFault();\n\t\t\t\t\t\t\t\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\treleaseAndFeedSubState := RELEASE_FEED_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\toVacOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tfiller.Reset();\n\t\t\t\t\t\t\t\t\t\t\tezFeed.Reset();\n\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.Reset();\n\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.Reset();\n\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.Reset();\n\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.Reset();\n\t\t\t\t\t\t\t\t\t\t\toRunPrinterRibbonUnwindMotor := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\thomeJawPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tstartCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tHMIData.initiateCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tautoModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpressureBarCloseDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\n                                                    \nEND_CASE\n\nCASE sealAndSeparateSubState OF\n\t    SEAL_SEPARATE_STATES.Idle:\n\tSEAL_SEPARATE_STATES.Shake:\t\t\t\t\t\t\n\t\t\t\t//\n\t\tIF loadShelf.shakeStart = SHAKER_START_SELECTION.CycleStart OR\n   \t\t   loadShelf.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   loadShelf.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF rearLoadPlate.shakeStart = SHAKER_START_SELECTION.CycleStart OR\n   \t\t   rearLoadPlate.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   rearLoadPlate.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF frontLoadPlate.shakeStart = SHAKER_START_SELECTION.CycleStart OR\n   \t\t   frontLoadPlate.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   frontLoadPlate.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF rearLoadPlate.Shaking OR frontLoadPlate.Shaking OR loadShelf.Shaking THEN\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.Shaking;\n\t\tELSIF enableIBDDeflate THEN\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.BringInIBD;\n\t\tELSE\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.PrepareToFeedToSeal;\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_SEPARATE_STATES.Shaking:\t\t\t\t    //\n\t\tIF NOT frontLoadPlate.Shaking AND NOT rearLoadPlate.Shaking AND NOT loadShelf.Shaking THEN\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.PrepareToFeedToSeal;\n\t\tEND_IF\n\t\t\n\tSEAL_SEPARATE_STATES.PrepareToFeedToSeal:\n\t\tIF HMIData.feedToSealInUse THEN\n\t\t\tIF enableBagOpen THEN\n\t\t\t\tbagOpenFingers.Release();\n\t\t\tEND_IF\n\t\t\tmotorizedSealFlatteners.AutoMovetoFeedToSeal();\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.PreparingToFeedToSeal;\t\n\t\tELSE\n\t\t\t//\n\t\t\tIF enableIBDDeflate THEN\n\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.BringInIBD;\n\t\t\tELSE\n\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\t\tEND_IF\t\n\t\tEND_IF\n\t\n\tSEAL_SEPARATE_STATES.PreparingToFeedToSeal:\n\t\tIF motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle THEN\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.PreparedToFeedToSeal;\n\t\tEND_IF\n\t\n\tSEAL_SEPARATE_STATES.PreparedToFeedToSeal:\n\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.FeedToSeal;\n\n\tSEAL_SEPARATE_STATES.FeedToSeal:\n\t\tIF HMIData.feedToSealInUse THEN\n\t\t\tbagDelivery.AutoFeedToSeal();\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.FeedingToSeal;\t\t\n\t\tELSE\n\t\t\t//\n\t\t\tIF enableIBDDeflate THEN\n\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.BringInIBD;\n\t\t\tELSE\n\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\t\tEND_IF\t\n\t\tEND_IF\n\t\n\tSEAL_SEPARATE_STATES.FeedingToSeal:\n\t\t//\n\t\tIF bagDelivery.state = BAG_DELIVERY_STATES.Ready THEN\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.FedToSeal;\n\t\tEND_IF\n\t\n\tSEAL_SEPARATE_STATES.FedToSeal:\n\t\t//\n\t\tIF enableIBDDeflate THEN\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.BringInIBD;\n\t\tELSE\n\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\tEND_IF\t\t \n\t\n\tSEAL_SEPARATE_STATES.BringInIBD : \t\t\t\t// Bring in IBD if enabled\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableIBDDeflate THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\n\tSEAL_SEPARATE_STATES.WaitForJawCloseDelay : \t// Wait for jaw close delay. \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF pressureBar.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBarCloseDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF (pressureBarCloseDelay.Q OR HMIData.pressureBarCloseDelay = 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (funnel.closed OR NOT funnel.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBarCloseDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    ELSE \n                                                        sealAndSeparateSubState := SEAL_SEPARATE_STATES.ReverseBag;\n                                                    END_IF\n        \n    SEAL_SEPARATE_STATES.MoveJawIn :                // Perform actions as enabled - close jaw and move flatteners out. If jaw is disabled then go right to reverse bag\n                                                    IF motorizedSealFlatteners.enable THEN\n                                                        motorizedSealFlatteners.AutoMoveOut();\n                                                    END_IF\n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.AutoCloseJaw();\n                                                    sealAndSeparateSubState := SEAL_SEPARATE_STATES.MovingJawIn;\n                                                    \n                                                \n    SEAL_SEPARATE_STATES.MovingJawIn :                // If Jaw is in and flatteners out then move on\n                                                    IF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersOut OR NOT motorizedSealFlatteners.enable) \n                                                        AND (pressureBar.state = PRESSURE_BAR_STATES.JawClosed OR NOT pressureBar.enable)\n                                                        THEN\n                                                            sealAndSeparateSubState := SEAL_SEPARATE_STATES.MovedJawIn;    \n                                                    END_IF\n                                                                \n    SEAL_SEPARATE_STATES.MovedJawIn :                // Will add sealing logic here\n                                                    sealAndSeparateSubState := SEAL_SEPARATE_STATES.ReverseBag;\n                                                    \n    SEAL_SEPARATE_STATES.ReverseBag :                // Reverse bag if bag delivery enabled, otherwise open jaw\n\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.Reset();\n                                                    IF bagDelivery.enable THEN\n                                                        bagDelivery.AutoReverseBag();\n                                                        sealAndSeparateSubState := SEAL_SEPARATE_STATES.ReversingBag;\n                                                    ELSE sealAndSeparateSubState := SEAL_SEPARATE_STATES.Done;    \n                                                    END_IF\n                                                                    \n    SEAL_SEPARATE_STATES.ReversingBag :                // \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT HMIData.separateBeforeSeal THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.PT := TO_TIME(HMIData.sealBarDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT sealTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\n                                                    IF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersOut OR NOT motorizedSealFlatteners.enable) \n                                                        AND (pressureBar.state = PRESSURE_BAR_STATES.JawClosed OR NOT pressureBar.enable)\n                                                        AND (bagDelivery.state = BAG_DELIVERY_STATES.ReverseDone OR NOT bagDelivery.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (sealTimer.Q OR HMIData.separateBeforeSeal)\n                                                        THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT HMIData.separateBeforeSeal THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := FALSE;\n                                                            sealAndSeparateSubState := SEAL_SEPARATE_STATES.Reversedbag;\n                                                    END_IF\n    SEAL_SEPARATE_STATES.Reversedbag :                \n\t\t\t\t\t\t\t\t\t\t\t\t\t// \n                                                    sealAndSeparateSubState := SEAL_SEPARATE_STATES.SealBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_SEPARATE_STATES.SealBag:\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.separateBeforeSeal THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.PT := TO_TIME(HMIData.sealBarDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT sealTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.Done;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.Done;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\nEND_CASE\n\n_waitForPressureBarOpenDelay(IN := releaseAndFeedSubState = RELEASE_FEED_STATES.WaitForPressureBarOpenTimer, PT := TO_TIME((HMIData.pressureBarOpenDelay * 1000.0)));\n\nCASE releaseAndFeedSubState OF\n    RELEASE_FEED_STATES.Idle :  \n                      //\n    \n\tRELEASE_FEED_STATES.WaitForPressureBarOpenTimer : \t\t// Adding in Jaw Open Delay\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF _waitForPressureBarOpenDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treleaseAndFeedSubState := RELEASE_FEED_STATES.MoveJawOutAndDropBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t   \n    RELEASE_FEED_STATES.MoveJawOutAndDropBag :        // \n                                                    IF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersOut OR NOT motorizedSealFlatteners.enable) \n                                                        AND (pressureBar.state = PRESSURE_BAR_STATES.JawClosed OR NOT pressureBar.enable)\n                                                        AND ((bagDelivery.state = BAG_DELIVERY_STATES.ReverseDone) OR HMIData.enableDryCycle)\n                                                        OR (bagDelivery.state =  BAG_DELIVERY_STATES.WaitingForPrinter AND zebraPrinter.enable)\n                                                        OR NOT bagDelivery.enable\n                                                        THEN\n                                                            IF motorizedSealFlatteners.enable THEN\n                                                                motorizedSealFlatteners.AutoMoveToClearance();\n                                                            END_IF\n                                                            \n                                                            IF pressureBar.enable THEN\n                                                                pressureBar.AutoOpenJaw();\n                                                            END_IF\n                                                            \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableIBDEject THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF rearLoadPlate.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF frontLoadPlate.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF loadShelf.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF TO_DINT(HMIData.exitConveyorDwell) <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF TO_DINT(HMIData.externalExitConveyorDwell) <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.lpaBagEjectAssistEnable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                           bagDropTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   releaseAndFeedSubState := RELEASE_FEED_STATES.MovingJawOutAndDroppingBag;\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t RELEASE_FEED_STATES.MovingJawOutAndDroppingBag :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// If printer is enabled then perform printer operation of bag delivery, otherwise just feed new bag out.\n                                                        // In the case that bagDelivery is disabled then we're done with release and feed\n                                                        IF bagDropTimer.Q \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersToBagFeed OR NOT motorizedSealFlatteners.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN   \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToDeflate.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagDelivery.enable AND NOT zebraPrinter.enable THEN\n                                                                bagDelivery.AutoFeedBagOut();\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.lpaDuringBagFeedEnable THEN\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOn();\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                releaseAndFeedSubState := RELEASE_FEED_STATES.MovingJawOutAndFeedingBag;\n                                                            ELSIF bagDelivery.enable AND zebraPrinter.enable THEN\n                                                                bagDelivery.AutoWaitForPrinter();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n                                                                releaseAndFeedSubState := RELEASE_FEED_STATES.WaitForPrinter;\n                                                            ELSE \n                                                                releaseAndFeedSubState := RELEASE_FEED_STATES.Done;\n                                                            END_IF\n                                                            (*{warning 'TODO: This is a hack to use HPA as LPA'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t    HPA.DwellSetting := 500;\t\t// Get rid on this - ha\n\t\t\t\t\t\t\t\t\t\t\t\t\t        HPA.Trigger();*)\t\t\t\t\t\t\t\t\t\t\t\t\n    \t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    RELEASE_FEED_STATES.WaitForPrinter :            // Data Ready means the printer has a label and we're all set to print\n                                                    IF zebraPrinter.state = PRINTER_STATES.DataReady THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.lpaDuringBagFeedEnable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                        releaseAndFeedSubState := RELEASE_FEED_STATES.FeedToOffset;\n                                                    END_IF\n                                                    \n    RELEASE_FEED_STATES.FeedToOffset :                // This starts feeding to the print offset\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersToBagFeed OR NOT motorizedSealFlatteners.enable) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDelivery.AutoPrinterReady();\n                                                    \treleaseAndFeedSubState := RELEASE_FEED_STATES.FeedingToOffset;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    \n                                                        \n    RELEASE_FEED_STATES.FeedingToOffset :            // Once offset done start printing\n                                                    IF bagDelivery.state = BAG_DELIVERY_STATES.FedToPrintOffset THEN\n                                                        releaseAndFeedSubState := RELEASE_FEED_STATES.StartPrinting;\n                                                    END_IF                                            \n    \n    RELEASE_FEED_STATES.StartPrinting :                // Printer starts print cycle and bag delivery starts moving at print speed\n                                                    \n                                                    //bagDelivery.AutoStartPrintFeed();\n\t\t\t\t\t\t\t\t\t\t\t\t\tzebraPrinter.AutoPrintNow();\n                                                    \n                                                    releaseAndFeedSubState := RELEASE_FEED_STATES.SendPrintSignal;                                            \n\n    RELEASE_FEED_STATES.SendPrintSignal:            // \n                                                    //IF bagDelivery.state =     BAG_DELIVERY_STATES.FeedingAtPrintSpeed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t//zebraPrinter.AutoSendPrintSignal();\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF zebraPrinter.printHeadDebounced THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDelivery.AutoStartPrintFeed();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tzebraPrinter.AutoSendPrintSignal();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbarcodeVerifier.Trigger();\n                                                        //bagDelivery.AutoStartPrintFeed();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//bagDelivery.AutoStartPrintFeed();\n                                                        //zebraPrinter.AutoSendPrintSignal();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                        releaseAndFeedSubState := RELEASE_FEED_STATES.Printing;\n                                                    END_IF                                        \n\n    RELEASE_FEED_STATES.Printing :                // \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    IF zebraPrinter.state = PRINTER_STATES.DonePrinting THEN\n                                                        releaseAndFeedSubState := RELEASE_FEED_STATES.StopPrinting;\n                                                    END_IF\n                                                    \n    RELEASE_FEED_STATES.StopPrinting :                // Tell bag delivery it's okay to feed out the rest of the bag and the printer that it can prep itself for the next print\n                                                    bagDelivery.AutoPrinterDone();\n                                                    zebraPrinter.AutoAckPrintDone();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    releaseAndFeedSubState := RELEASE_FEED_STATES.MovingJawOutAndFeedingBag;\n                                                                                \n                                                                                                            \n    RELEASE_FEED_STATES.MovingJawOutAndFeedingBag :    // \n//     \t\t\t\t\t\t\t\t\t\t\t\tIF (bagdelivery.state = BAG_DELIVERY_STATES.Ready OR NOT bagdelivery.enable) THEN\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n// \t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (bagdelivery.state = BAG_DELIVERY_STATES.Ready OR NOT bagdelivery.enable)\n                                                        AND (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersToBagFeed OR NOT motorizedSealFlatteners.enable) \n                                                        AND (pressureBar.state = PRESSURE_BAR_STATES.JawOpened OR NOT pressureBar.enable)\n                                                        THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBDRetractToEject.Reset();\n                                                            releaseAndFeedSubState := RELEASE_FEED_STATES.MovedJawOutAndFedBag;\n                                                    END_IF\n                                                    \n    RELEASE_FEED_STATES.MovedJawOutAndFedBag :      // Wait until bag is fed out before triggering barcode fail.\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF barcodeVerifier.barcodeFault THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbarcodeVerificationFailed.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\treleaseAndFeedSubState := RELEASE_FEED_STATES.Done;\n\t\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HPA.DwellSetting <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHPA.Trigger();\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t  \n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n    RELEASE_FEED_STATES.Done :\n    RELEASE_FEED_STATES.Fault :\nEND_CASE\n\nCASE openBagSubState OF\n    BAG_OPEN_ASSIST_STATES.Idle :                    // \n                                                    \n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MoveJawIn :                // Close jaw against bag. In the future we may also start vacuum here\n                                                    pressureBar.AutoCloseJaw();\n\t\t\t\t\t\t\t\t\t\t\t\t\t(*HPA.DwellSetting := 80;\n\t\t\t\t\t\t\t\t\t\t\t\t\tHPA.Trigger();*)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t//oVacOn := TRUE; // Hard coded for now, this is vacuum\n                                                    openBagSubState := BAG_OPEN_ASSIST_STATES.MovingJawIn;        \n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MovingJawIn :            // Move on once jaw is closed\n                                                    IF (pressureBar.state = PRESSURE_BAR_STATES.JawClosed) OR NOT pressureBar.enable THEN\n                                                        openBagSubState := BAG_OPEN_ASSIST_STATES.MovedJawIn;        \n                                                    END_IF\n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MovedJawIn :                // Hold onto the bag with vacuum to build suction\n                                                    vacuumHoldTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := TRUE; // Hard coded for now, this is vacuum\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF vacuumHoldTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.MoveJawOut; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvacuumHoldTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                   \n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MoveJawOut :                // Open the jaw \n                                                    pressureBar.AutoOpenJaw();\n                                                    openBagSubState := BAG_OPEN_ASSIST_STATES.MovingJawOutAndGrab;\n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MovingJawOutAndGrab :    // WAit for delay, and move in seal flatteners at the same time as bag grab\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingerDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenFingerDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Grab();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingerDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveIn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.CheckForSuccessfulBagGrab;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\n\tBAG_OPEN_ASSIST_STATES.CheckForSuccessfulBagGrab: \t\n\t\t//\n\t\tIF bagOpenRetryCount < bagOpenRetrySetting THEN\n\t\t\tbagOpenCheckDelay.IN := TRUE;\n\t\t\tIF bagOpenCheckDelay.Q THEN\n\t\t\t\tIF bagOpenFingers.CheckIfBagGrabbed(TRUE) OR HMIData.enableDryCycle THEN // This method checks to see if the bag is grabbed and returns true if so.\n\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.BagOpened;\n\t\t\t\t\tmotorizedSealFlatteners.AutoMoveIn();\n\t\t\t\tELSE \n\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.BagFailedToOpen;\n\t\t\t\tEND_IF\n\t\t\t\tbagOpenCheckDelay.IN := FALSE;\n\t\t\tEND_IF\n\t\tELSE \n\t\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab;\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\tBAG_OPEN_ASSIST_STATES.BagFailedToOpen:\t\t\t// \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := bagOpenRetryCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenRetryCount < bagOpenRetrySetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.bagOpenFeedNewBagCount < HMIData.bagOpenFeedNewBagSetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFeedNewBagCount := HMIData.bagOpenFeedNewBagCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveOut();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.FeedNewBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFailedToOpen.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := 0; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFeedNewBagCount := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagsRejectedTotal.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGlobals.rejectedBagCount := Globals.rejectedBagCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tBAG_OPEN_ASSIST_STATES.BagOpened:\t\t\t\t\t\n\t\t//\n\t\tbagOpened := TRUE;\n\t\tbagOpenRetryCount := 0;\n\t\tHMIData.bagOpenFeedNewBagCount := 0;\n   \t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab; \t\t\t\n                                      \n    BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab:\t\t\n\t\t// \n\t\tIF (pressureBar.state = PRESSURE_BAR_STATES.JawOpened OR NOT pressureBar.enable) AND (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle OR NOT motorizedSealFlatteners.enable) THEN\n\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.MovedJawOut;        \n\t\tEND_IF\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_OPEN_ASSIST_STATES.MovedJawOut:            \n\t\t// \n\t\toVacOn := FALSE; \t\t// Hard coded for now, this is vacuum\n\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.Done;\n                                                \n\tBAG_OPEN_ASSIST_STATES.FeedNewBag:   \t\t\t\n\t\t//\n\t\tIF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle OR NOT motorizedSealFlatteners.enable) THEN\n\t\t\tstate := HEAD_STATES.SealAndSeparateBag;\n\t\t\topenBagSubState := BAG_OPEN_ASSIST_STATES.Idle;\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\nEND_CASE\n\nCASE finishCycleSubState OF\n\n\tFINISH_CYCLE_STATES.Start:\t\t\t\t\t\t\t\t\n\t\t\n   \t\t//\n  \t\tLPA.DwellSetting := TO_DINT(HMIData.lpaDwell * 1000);\n   \t\tIF LPA.DwellSetting <> 0 THEN\n\t\t\tLPA.Trigger();\n\t\tEND_IF\n\n\t\t//\n\t\tIF funnel.enable THEN\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.OpenFunnel;\n\t\tELSIF enableBagOpen THEN\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Shake;\n\t\tELSIF motorizedSealFlatteners.enable THEN\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.BringSealFlattenersInAndDown;\n\t\tELSE\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Shake;\n\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.OpenFunnel:\n\t\t//\t\t\t\t\t\t\n\t\tfunnel.Open();\n\t\tfinishCycleSubState := FINISH_CYCLE_STATES.OpeningFunnel;\n\t\n\tFINISH_CYCLE_STATES.OpeningFunnel:\t\t\t\t\t\t\n\t\t//\n\t\tIF funnel.opened THEN\n\t   \t\tfinishCycleSubState := FINISH_CYCLE_STATES.OpenedFunnel;\n\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.OpenedFunnel:\n\t\t//\t\t\t\n\t\t_funnelBagOpenTimeoutTimer.IN := TRUE;\n   \t\t_funnelBagOpenDebounceTimer.IN := iLeftFingerBagPresent AND iRightFingerBagPresent;\n\t\tIF _funnelBagOpenDebounceTimer.Q THEN\n\t  \t\tbagOpenRetryCount := 0; \n\t   \t\t_funnelBagOpenTimeoutTimer.IN := FALSE;\n\t   \t\t_funnelBagOpenDebounceTimer.IN := FALSE;\n\t\t\tIF motorizedSealFlatteners.enable THEN\n\t\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.BringSealFlattenersToBagHolding;\n\t\t\tELSE\n\t\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Shake;\n\t\t\tEND_IF\n\t   \t\tbagOpened := TRUE;\n\t\tELSIF _funnelBagOpenTimeoutTimer.Q THEN\n\t   \t\t_funnelBagOpenTimeoutTimer.IN := FALSE;\n\t   \t\t_funnelBagOpenDebounceTimer.IN := FALSE;\n\t\t\tIF bagOpenRetryCount < bagOpenRetrySetting THEN\n\t\t\t\tbagOpenRetryCount := bagOpenRetryCount + 1;\n\t\t\t\tfunnel.Close();\n\t\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.ClosingFunnelForRetry;\n\t\t    ELSIF HMIData.bagOpenFeedNewBagCount < HMIData.bagOpenFeedNewBagSetting THEN\n\t\t   \t\toVacOn := FALSE;\n\t\t   \t\tfunnel.Close();\n\t\t   \t\tHMIData.bagOpenFeedNewBagCount := HMIData.bagOpenFeedNewBagCount + 1;\n\t\t\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\t\t\tHMIData.bagsRejectedTotal.Increment();\t\n\t\t   \t\tstate := HEAD_STATES.SealAndSeparateBag;\n\t\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Shake;\t\t\t\t\t\t\t\t\t\t\n\t\t\tELSE\n\t\t   \t\tfunnel.Close();\n\t\t\t\tbagFailedToOpen.Trigger();\n\t\t\t\tbagOpenRetryCount := 0; \n\t\t\t\tHMIData.bagsRejectedTotal.Increment();\n\t\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Shake;\n\t\t\tEND_IF\n\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.ClosingFunnelForRetry:\t\t\t\t\n\t\t//\n\t\tIF funnel.closed THEN\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Start;\n\t\tEND_IF\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\tFINISH_CYCLE_STATES.BringSealFlattenersInAndDown:\t\t\n\t\t//\n\t\tmotorizedSealFlatteners.AutoMoveToHandLoad();\n\t\tfinishCycleSubState := FINISH_CYCLE_STATES.BringingSealFlattenersInAndDown;\n\t\n\tFINISH_CYCLE_STATES.BringingSealFlattenersInAndDown:\t\n\t\t//\n\t\tIF motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle THEN\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.SealFlattenersInAndDown;\n\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.SealFlattenersInAndDown:\n\t\t//\n\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Shake;\n\t\n\tFINISH_CYCLE_STATES.BringSealFlattenersToBagHolding:\t\n\t\t//\n\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\tfinishCycleSubState := FINISH_CYCLE_STATES.BringingSealFlattenersToBagHolding;\n\t\n\tFINISH_CYCLE_STATES.BringingSealFlattenersToBagHolding: \n\t\t//\n\t\tIF motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle THEN\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.SealFlattenersAtBagHolding;\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tFINISH_CYCLE_STATES.SealFlattenersAtBagHolding: \t\t\n\t\t//\n\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Shake;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tFINISH_CYCLE_STATES.Shake:\n\t\t//\n\t\tIF loadShelf.shakeStart = SHAKER_START_SELECTION.BagOpen OR\n   \t\t   loadShelf.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   loadShelf.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF rearLoadPlate.shakeStart = SHAKER_START_SELECTION.BagOpen OR\n   \t\t   rearLoadPlate.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   rearLoadPlate.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF frontLoadPlate.shakeStart = SHAKER_START_SELECTION.BagOpen OR\n   \t\t   frontLoadPlate.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   frontLoadPlate.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF rearLoadPlate.Shaking OR frontLoadPlate.Shaking OR loadShelf.Shaking THEN\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Shaking;\n\t\tELSE\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Done;\n\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.Shaking:\n\t\t//\n\t\tIF NOT frontLoadPlate.Shaking AND NOT rearLoadPlate.Shaking AND NOT loadShelf.Shaking THEN\n\t\t\tfinishCycleSubState := FINISH_CYCLE_STATES.Done;\n\t\tEND_IF\t\n\t\n\tFINISH_CYCLE_STATES.Done :\t\t\t\t\t\t\t\t\n\t\t//\n\t\tbagOpenRetryCount := 0;\nEND_CASE\nHMIData.initiateCycle := FALSE;\n\n_dropTimer();\n_funnelBagOpenTimeoutTimer();\n_funnelBagOpenDebounceTimer();\n_funnelBagRemovedDebounceTimer();","LineInfoPersistence":"(string)e42930db-dad8-41d3-988f-359236fd94cb_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_MOABHead EXTENDS FB_BaseComponent\nVAR_INPUT\n    motorizedSealFlattenersMode : DEVICE_MODES := DEVICE_MODES.Auto;\n    electricPressureBarMode : DEVICE_MODES := DEVICE_MODES.Auto;\n\tvacuumPickerMode : DEVICE_MODES;\n    startCycle : BOOL;\n    bagDeliveryMode : DEVICE_MODES;        // Mode of bag delivery system\n    printerMode : DEVICE_MODES;            // Mode of printer\n\tpassthroughMode : DEVICE_MODES;\n\tpassthroughSetting : REAL;\n    passthroughSettingLast : REAL;\n\tbagDropDelay : UINT := 1000;\n\tbagFeedMasterCommFail : BOOL;\n\tbagFeedSlaveCommFail : BOOL;\n\tpressureBarCommFail : BOOL;\n\tsealFlattenerCommFail : BOOL;\n\tinfeedConveyorCommFail : BOOL;\n\tlaserBarcodeScannerCommFail : BOOL;\nEND_VAR\nVAR_OUTPUT\n    readyToRun : BOOL;\n    state : HEAD_STATES;\n    sealAndSeparateSubState : SEAL_SEPARATE_STATES;\n    releaseAndFeedSubState : RELEASE_FEED_STATES;\n    openBagSubState : BAG_OPEN_ASSIST_STATES;\n\tfinishCycleSubState : FINISH_CYCLE_STATES;\n\tpressureBarEndStopMotor : FB_AppliedMotionStepServoEIPPassthrough();\nEND_VAR\nVAR\n    motorizedSealFlatteners : FB_MotorizedSealFlatteners();\n\tmsfVerticalAxis : FB_ThreePositionCylinder();\n    pressureBar : FB_PneumaticPressureBar();\n\tsealBarTempSensor : FB_IFMTempSensor();\n\tsealBarHeater : FB_TempController();\n    startCycleONS : R_TRIG;\n\tenableBagOpen : BOOL;\n\tenableHeater : BOOL;\n\tenableIBDDeflate : BOOL;\n\tenableIBDEject : BOOL;\n\tfactoryTestModeKeepCycling : BOOL;\n\tautoModeKeepCycling : BOOL;\n\tautoModeKeepCyclingTimer : Standard.TON;\n    bagDelivery : FB_BagDelivery();\n\tzebraPrinter : FB_ZebraPrinterStandard;\n\tsealTimer : Standard.TON() := (PT := T#350MS);\n\tbagOpenFingerDelay : Standard.TON := (PT := T#100MS);\n\tbagDropTimer : Standard.TON;\n\tHPA : FB_MonostableMultivibrator();\n\texitConveyorRun : DelayDwellFB() := (Dwellsetting := 6000);\n\texternalExitConveyorRun : DelayDwellFB() := (Dwellsetting := 6000);\n\tIBDCylinders : FB_ThreePositionCylinder();\n\tIBDExtendONS : FB_ONS();\n\tIBDRetractONS : FB_ONS();\n\tIBDRetractToDeflate : FB_MonostableMultivibrator();\n\tIBDRetractToEject : FB_MonostableMultivibrator();\n\tbagOpenFingers : FB_BagOpenFingersWithSensors();\n\tbagOpenCheckDelay : Standard.TON := (PT:= T#400MS); // Delay to check if bag open\n\tbagOpenRetrySetting : UINT;\t\t// Number of times to retry opening bag\n\tbagOpenRetryCount : UINT;\t\t// Count of current retry attempts\n\tbagOpenFeedNewBagSetting : UINT; // Number of new bags to try\n\tbagOpenFeedNewBagCount : UINT;\t// Count of new bags tried in recovery\n\tbagOpened : BOOL;\t\t\t\t// Bag was Opened flag\n\trecoveryModeActive : BOOL; \t\t// Recovery Mode Active\n\tstartCycleReqFromPalmButtons : BOOL;\n\tstartCycleReqFromPalmButtonsONS : FB_ONS();\n\tpassthrough : FB_AdjustablePneumaticPassthrough();\n\thomeJawPB : BOOL;\n    setPassthroughPB : BOOL;\n\tvacuumHoldTimer : Standard.TON() := (PT := T#250MS);\n\tcycleTimer : TON() := (PT := T#1000S);\n\tcycleTime : REAL;\n\tbagFailedToOpen : FB_Fault(name := 'Bag Failed to Open');\n\topenedBagWasRemoved : FB_Fault(name := 'Opened Bag was Removed');\n\tsafePowerFailure : FB_Fault(name := 'E-Stop/Safety Power Failure');\n\tpalmButtonConfigError : FB_Fault(name := 'Palm Button Configuration Error');\n\tpackageEjectGuardRemoved : FB_Fault(name := 'Package Eject Guard Removed');\n\tbarcodeVerificationFailed : FB_Fault(name := 'Barcode Verification Failed');\n\tinfeedConveyorIOCommFail : FB_Fault(name := 'Infeed Conveyor IO Communication Failure');\n\tinfeedConveyorVFDFaulted : FB_Fault(name := 'Infeed Conveyor VFD Failure');\n\tbarcodeVerifierCommFail : FB_Fault(name := 'Barcode Verifier Communication Failure');\n\tsealFlattenerTimedOut : FB_Fault(name := 'Seal Flatteners Timed Out / Did Not Reach Destination');\n\tlabelsQueuedUpFault : FB_Fault(name := 'Labels Queued Up in Printer');\n\tloadShelf : FB_BaseLoadPlate;\n\trearLoadPlate : FB_BaseLoadPlate;\n\tfrontLoadPlate : FB_BaseLoadPlate;\n\tiPowerOffButtonONS : FB_ONS();\n\tloadPlateFaultTimer : FB_CylinderFaults();\n\tforwardLoadPlateFaults : LoadPlateFaultsType;\n\trearLoadPlateFaults : LoadPlateFaultsType;\n\tloadShelfFaults : LoadPlateFaultsType;\n\tLPA : DelayDwellFB();\n\thpaServiceOnONS : FB_ONS;\n\texitConveyorJogONS : FB_ONS;\n\texternalExitConveyorJogONS : FB_ONS;\n\thmiLight  : FB_HMILight;\n\tfaultONS : FB_ONS;\n\tpowerSettlingTimer : Standard.TON := (PT := T#6S);\n\tpressureBarCloseDelay : Standard.TON;\n\tfiller : FB_Filler();\n\t_fillerDroppingProductONS : FB_ONS;\n\tconfigOutput1Pulse : FB_MonostableMultivibrator();\n\tconfigOutput2Pulse : FB_MonostableMultivibrator();\n\tfillerModeCycleStartOnlyPulse : FB_MonostableMultivibrator();\n    resetTimer : Standard.TOF := (PT := T#2S);\n\tmurrIOBusNode : FB_MurrIO();\n\tfunnel : FB_Funnel();\n\tstagingFunnel : FB_Funnel();\n\tbarcodeVerifier : FB_BarcodeReader();\n\tkeyenceBCV : FB_KeyenceNL20();\n\trearMotorCommsReturned : Standard.F_TRIG();\n\tallMotorCommsGood : BOOL;\n\tfootSwitchONS : FB_ONS;\n\tezfeed : FB_EZFeed();\n\tstopONS : FB_ONS;\n\tpbarExtendedONS : FB_ONS;\n\tbatchEnableONS : FB_ONS;\n\texhaustTimer : TON := (PT := T#300MS);\n\ttriggerLPAWhileFeedingONS : FB_ONS;\n\teState: INT;\n\t_inCycleONS : Standard.R_TRIG;\n\t_dropTimer : Standard.TON;\n\t_funnelBagOpenTimeoutTimer : Standard.TON := (PT := T#500MS);\n\t_funnelBagOpenDebounceTimer : Standard.TON := (PT := T#50MS);\n\t_funnelBagRemovedDebounceTimer : Standard.TON := (PT := T#250MS);\n\t_waitForPressureBarOpenDelay : TON;\n\t_auxIORemote : FB_AuxIO_RemoteComms;\nEND_VAR\n","LineInfoPersistence":"(string)e42930db-dad8-41d3-988f-359236fd94cb_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)47277","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}