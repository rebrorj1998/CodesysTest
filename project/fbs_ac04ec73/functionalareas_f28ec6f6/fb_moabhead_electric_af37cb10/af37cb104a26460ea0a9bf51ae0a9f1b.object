{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)af37cb10-4a26-460e-a0a9-bf51ae0a9f1b","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_MOABHead_Electric","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)f28ec6f6-01c6-4f31-83d6-90cd74feb393"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: FB_MOABHead\n//    Description: This is the supervisory module for the MOAB head.\n//    There is one supervisory state machine for the head and 3 sub-state machines Sealing/Separating, Release/Feed, and Opening Bag\n//    Created by: Ben Hess\n//    Created Date: Tuesday, April 17, 2018\n\n{region \"Setup\"}\n\n// Run BaseComponentFB\nSUPER^(); \n\t\t  \n// Enable/Disable nodes on comms tree dynamically\nEIPReconfig(rootEIPNode := EtherNet_IP_Scanner,\n\t\t\trootModbusTCPNode := Customer_LAN_Adapter);\n\n// When power is returned, give machine ~5 seconds\npowerSettlingTimer(IN := iEStopOK);\nGlobals.machinePowerOK := powerSettlingTimer.Q;\nsafePowerFailure.faultTrigger := NOT iEStopOK AND murrIOBusNode.ok;\n\n// Bags Low warning\nHMIData.bagLevelLow.active := iBagsLow;\n\n// Dry Cycle Warning\nHMIData.dryCycleActive.active := HMIData.enableDryCycle;\n\n// Ethernet/IP barcode verifier from Cognex\t \nstartBCVONS(CLK := iPALOTAR);\ncognexDM374BCV(\n\tinputScannerData := ADR(iBCVInputs),\n\toutputScannerData := ADR(oBCVOutputs),\n\ttriggerDwell := HMIData.barcodeScanDuration,\n\tbadScanFaultsAllowed := HMIData.barcodeBadReadFaultSetting, \n\ttrigger := startBCVONS.OSF AND printAndApply.runConveyorAfterApply AND NOT collisionDetection.packageHeldByCollisionDetection OR collisionDetection.triggerBarcodeScanner\n);\n\t \n// Wait until bag is fed out before triggering barcode fail.\nIF cognexDM374BCV.barcodeFault THEN\n\tbarcodeVerificationFailed.Trigger();\nEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n// Ethernet/IP barcode verifier from Keyence\nkeyenceBCV(\n\tptrEIPInputs:= ADR(keyenceBCVInputs), \n\tptrEIPOutputs:= ADR(keyenceBCVOutputs), \n);\t \n\t\t \n// Barcode Verifier interface to printer\nbarcodeVerifier(\n\tenable := (HMIData.barcodeVerifierSelection = BCVSelection.LaserScanner AND HMIData.barcodeVerifierInUse),\n\treadGoodInput := keyenceBCV.goodRead,\n\tdistanceToScan := HMIData.barcodeScanDistance,\n\tfeedSpeed := TO_REAL(HMIData.printSpeed),\n\tpositionOffset := HMIData.barcodeStartPosition,\n\tbadReadFaultCountSetting := HMIData.barcodeBadReadFaultSetting,\n\ttriggerScannerOutput => keyenceBCV.triggerInput\n);\n\t \nCASE HMIData.barcodeVerifierSelection OF\n\t\t \n\tBCVSelection.NotInstalled:\n\t\tkeyence_BCV.Enable := FALSE;\n\t\tDM374_BCV.Enable := FALSE;\n\t\tHMIData.barcodeBadReadCount := 0;\n\t\tHMIData.barcodeGoodReadCount := 0;\n\t\t\t \n\tBCVSelection.LaserScanner:\n\t\tKeyence_BCV.Enable := TRUE;\n\t\tDM374_BCV.Enable := FALSE;\n\t\tHMIData.barcodeLastReadString := keyenceBCV.lastReadData;\n\t\tHMIData.barcodeBadReadCount := barcodeVerifier.currentBadReadCount;\n\t\tHMIData.barcodeGoodReadCount := barcodeVerifier.currentGoodReadCount;\n\t\tIF Keyence_BCV.eState <> IoDrvEthernetIP.AdapterState.RUNNING THEN \n\t\t\tbarcodeVerifierCommFail.Trigger();\n\t\tEND_IF\n\t\t\t \n\tBCVSelection.TwoDimensional:\n\t\tKeyence_BCV.Enable := FALSE;\n\t\tDM374_BCV.Enable := TRUE;\n\t\tIF cognexDM374BCV.enable THEN\n\t\t\tHMIData.barcodeLastReadString := cognexDM374BCV.lastReadData;\n\t\t\tHMIData.barcodeBadReadCount := cognexDM374BCV.badReadCount;\n\t\t\tHMIData.barcodeGoodReadCount := cognexDM374BCV.goodReadCount;\n\t\tEND_IF\n\t\tIF DM374_BCV.eState <> IoDrvEtherNetIP.AdapterState.RUNNING OR cognexDM374BCV.triggerFeedbackFault THEN\n\t\t\tbarcodeVerifierCommFail.Trigger();\t\t \n\t\tEND_IF\n\t\tcognexDM374BCV.enable := HMIData.barcodeVerifierInUse AND HMIData.baggerModelSelection = ModelSelection.Pro18_1183;\nEND_CASE\n\n// Enable/disable MODBUS TCP adapter \nModbusTCP_Slave_Device.Enable := HMIData.auxIOSource.ModbusTCP;\t\n\t\n// Raise/Lower bagger head logic\n// Indications and commands from HMI\nHMIData.baggerHeadService.extendedFeedback := NOT iHeadRaised;\nHMIData.baggerHeadService.retractedFeedback := NOT iHeadLowered;\nIF HMIData.baggerHeadService.retractedFeedback THEN\n\tHMIData.baggerHeadService.retractCommand := FALSE;\nEND_IF\nIF HMIData.baggerHeadService.extendedFeedback THEN\n\tHMIData.baggerHeadService.extendCommand := FALSE;\nEND_IF\nbaggerHeadMovement(\n\traiseCommand:= HMIData.baggerHeadService.extendCommand, \n\tlowerCommand:= HMIData.baggerHeadService.retractCommand, \n\traiseLimitSwitch:= HMIData.baggerHeadService.extendedFeedback, \n\tlowerLimitSwitch:= HMIData.baggerHeadService.retractedFeedback, \n\trunMotorOutput=> oRunBaggerHeadMotor, \n\tmotorDirectionOutput=> oBaggerHeadMotorDir);\n\t \n// Option setup and factory config  \nIF HMIData.resetAverageCycleTime THEN\n\tHMIData.averageCycleTime := 0;\n\tHMIData.resetAverageCycleTime := FALSE;\nEND_IF\nHMIData.lastCycleTime := cycleTime;\n\nHMIData.printerNotReady.active := (NOT printerReady AND zebraPrinter.enable) OR (printAndApply.printerNotReady AND printAndApply.enable);\nHMIData.waitingForPrinter.active := (zebraPrinter.state = PRINTER_STATES.WaitingForData AND state.sb.releaseFeed = RELEASE_FEED_STATES.WaitForPrinter) \n\t\t\t\t\t\t\t\t\tOR (printAndApply.waitingForPrinter AND printAndApply.enable)\n\t\t\t\t\t\t\t\t\tOR (zebraPrinter.state = PRINTER_STATES.WaitingForData AND state.sb.printOutOfCycle = PRINT_OUT_OF_CYCLE_STATES.WaitForPrinter);\n\nbagOpenRetrySetting := HMIData.bagOpenRetrySetting;\nHMIData.bagOpenRetryCount := bagOpenRetryCount;\n\t \n// Run bus node\t\t  \nmurrIOBusNode(\n\tenable:= , \n\theadNodeEnabled:= TRUE, \n\tguardNodeEnabled:= (HMIData.cycleStartButtonSelection = PalmButtonSelection.SinglePalmButton \n\t\t\t\t\t\tOR HMIData.cycleStartButtonSelection = PalmButtonSelection.DualPalmButton\n\t\t\t\t\t\tOR (HMIData.funnelFactorySelection <> FunnelSelection.NotInstalled)), \n\tprinterNodeEnabled:= , \n\tdischargeNodeEnabled:= TRUE, \n\tauxIONodeEnabled:= HMIData.auxIOConfig.factorySelection = AuxiliaryIOSelection.AuxIOStandard, \n\tconfigVersion:= HMIData.murrIOConfigVersion, \n\tptrMachineOptionsManagementOutputs:= ADR(oMOMConfig), \n\tptrSystemStatusInputs:= ADR(iMurrSystemState));\n\n// Setup of Motorized seal flattener motor and function block\nIF motorizedSealFlatteners.enable THEN\n\toSealFlatDown := msfVerticalAxis.extendOutput;\n\toSealFlatUp:= msfVerticalAxis.retractOutput;\nEND_IF\n\t \nIF (HMIData.mailerMaterial = MAILER_MATERIAL.paper) THEN\n\toStagingFunnelCloseOrPerfBreakerDown := perfBreaker.extendOutput AND posInhibit;\n\toStagingFunnelOpenOrPerfBreakerUp   := perfBreaker.retractOutput AND posInhibit;\nELSIF stagingFunnel.enable THEN\n\toStagingFunnelCloseOrPerfBreakerDown := stagingFunnelCloseOutput;\n\toStagingFunnelOpenOrPerfBreakerUp   := stagingFunnelOpenOutput;\t \nEND_IF\n\t\t  \nmsfVerticalAxis(extendOutput => oSealFlatDown, retractOutput => oSealFlatUp);\nperfBreaker();\nperfBreaker.Execute();\n\t \nmotorizedSealFlatteners(sealFlattenersVerticalAxis := msfVerticalAxis,\n\t\t \t\t\t\tperfBreaker := perfBreaker,\n\t\t\t\t\t \tperfBreakerEnable := HMIData.sealAreaOptionSelection = (SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker OR SealAreaOptionSelectionEnum.PerfBreaker),\n\t\t\t\t\t\tsealAreaOption := HMIData.sealAreaOptionSelection,\n\t\t\t\t\t\tjogIn := HMIData.sealFlattenersServiceJogIn,\n\t\t\t\t\t\tjogOut := HMIData.sealFlattenersServiceJogOut,\n\t\t\t\t\t\traiseService := HMIData.sealFlattenersServiceRaise,\n\t\t\t\t\t\tlowerService := HMIData.sealFlattenersServiceLower,\n\t\t\t\t\t\tmoveToManualSetpoint := HMIData.sealFlattenersMoveToManualPos,\n\t\t\t\t\t\tmanualPosSetpoint := HMIData.sealFlattenersManualPositionSetting,\n\t\t\t\t\t\tsealFlattenerMotorCommFailInput := MSFMotor.eState <> IoDrvEthernetIP.AdapterState.RUNNING AND MSFMotor.Enable,\n\t\t\t\t\t\ttimeoutFault => sealFlattenerTimedOut.faultTrigger,\n\t\t\t\t\t\tactualPosition => HMIData.sealFlattenersPosition,\n\t\t\t\t\t\tmailerMaterial := HMIData.mailerMaterial,\n\t\t\t\t\t\tatOutSetpoint => MSFatOutSetpoint,\n\t\t\t\t\t\tatInSetpoint => MSFatInSetpoint,\n\t\t\t\t\t\tatBagHoldSetpoint => MSFatBagHoldSetpoint,\n\t\t\t\t\t\tatBagFeedSetpoint => MSFatBagFeedSetpoint\t\t\t\t\t\t\t\t\t\t\t\n);\n\t \nmotorizedSealFlatteners.Mode := motorizedSealFlattenersMode;\n\t \nmotorizedSealFlatteners.enable := ( HMIData.SealAreaOptionSelection = SealAreaOptionSelectionEnum.MotorizedSealFlatteners OR HMIData.SealAreaOptionSelection = SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker ) AND (HMIData.sealFlattenersInUse);\n\t \nMSFMotor.Enable := ( HMIData.SealAreaOptionSelection = SealAreaOptionSelectionEnum.MotorizedSealFlatteners OR HMIData.SealAreaOptionSelection = SealAreaOptionSelectionEnum.PerfBreaker OR HMIData.SealAreaOptionSelection = SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker );\n\t \n(*HMIData.enablePerfBreaker :=*) paperBagger := ( HMIData.SealAreaOptionSelection = SealAreaOptionSelectionEnum.PerfBreaker OR HMIData.SealAreaOptionSelection = SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker );\n\t \n// Warning if Staggin Funnel and Perforation Breaker are enabled\nIF stagingFunnel.enable\tAND (HMIData.mailerMaterial = MAILER_MATERIAL.paper) THEN\n\t HMIData.stagingFunnelAndPerfBreakerEnabled.active := TRUE;\nELSE\n\t HMIData.stagingFunnelAndPerfBreakerEnabled.active := FALSE;\nEND_IF\n\t \npressureBarMotor(\n\tptrEIPInputs := ADR(jawPasstrhoughMotorInputs),\n    ptrEIPOutputs := ADR(jawPasstrhoughMotorOutputs),\n    stepsPerInchSetpoint := Globals.STEPS_PER_INCH_TFBelt,\n\treversePolarity := FALSE,\n\tdefaultCurrentSetpoint := 500,\n\tcommFail := Pbar_ServoEIP.eState <> IoDrvEthernetIP.AdapterState.RUNNING,\n\tisHomable := TRUE);\t\t\t\npressureBarMotor.Execute();\n\njawClamps(\n\tmode:= , \n\textendedStatus=> , \n\tretractedStatus=> , \n\textendOutput=> oJawClampExtend, \n\tretractOutput=> oJawClampRetract);\t \n\t \npressureBar(\n\tenable:= , \n\t//openedPositionBuffer:= HMIData.pressureBarPositionBuffer,\n\topenedPositionBuffer:= 50,\n\tiPressureBarClamped:= iJawClamped, \n\tiPressureBarClosed:= iJawClearToClamp, \n\tiPressureBarNotObstructed:= TRUE, \n\tiBaggerEnableButton:= , \n\tiJawClampExtended:= iJawClampsExtended, \n\tiJawCLampRetracted:= iJawClampsRetracted, \n\tpbarOutSetting:= HMIData.passthroughSetting, \n\tpbarInSetting:= HMIData.pressureBarInPosition, \n\tpbarBagFeedSetting:= HMIData.pressureBarBagFeedPosition,\n\tdisableFaults:= , \n\textendJawClamp:= , \n\tretractJawClamp:= , \n\textendJaw:= , \n\tretractJaw:= , \n\tfaults => , \n\tfailToClampLeft=> , \n\tfailToReleaseLeft=> , \n\tfailToClampRight=> , \n\tfailToReleaseRight=> , \n\tstate=> , \n\tactualPosition=> HMIData.passthroughPosition,\n\tpressureBarClosed => HMIData.pressureBarService.retractedFeedback,\n\tpressureBarOpen => HMIData.pressureBarService.extendedFeedback, \n\tjawClamps:= jawClamps, \n\tpbarMotor:= pressureBarMotor,\n    jawClear := (NOT pbarSensorBypass AND NOT ijawclamped OR NOT  (HMIData.mailerMaterial = MAILER_MATERIAL.paper)) OR (pbarSensorBypass)\n);\n\n// Run bag delivery \nbagDelivery(\n\tjogForwardPB := HMIData.jogBagForward,\n\tjogReversePB := HMIData.jogBagReverse,\n\tfeedToSealSetpoint := HMIData.feedToSealSetpoint,\n\tbagLengthSetpoint := HMIData.bagLength,\t \n\tprintVelocitySetpoint := HMIData.printSpeed,\n\tprintLengthSetpoint := HMIData.printLength,\n\tsealOffsetSetpoint := HMIData.bagSkirtLength,\n\treverseVelocitySetpoint := TO_INT(HMIData.bagReverseSpeed),\n\tfeedVelocitySetpoint := TO_INT(HMIData.bagForwardSpeed),\n\tprintOffsetSetpoint := HMIData.printOffset,\t\n\treverseToPrintheadRequired := zebraPrinter.enable AND HMIData.printerCycleSelection = PrinterCycleSelection.PrintWhileFeeding,\n\tbagFeedMasterMotorCommFailInput := Bag_Delivery_EIP_Motor.eState <> IoDrvEthernetIP.AdapterState.RUNNING,\n\tbagFeedRearMotorCommFailInput := Bag_Delivery_Rear_Motor.eState <> IoDrvEthernetIP.AdapterState.RUNNING,\n\tstepsPerInchSetting := ,\n\tvelocityMultiplier := ,\n\trearMotorConfigVersion := HMIData.rearUnwindMotorConfigVersion,\t\n\tmailerMaterial := HMIData.mailerMaterial,\n\tpaperTorqueSetting := HMIData.paperTensionSetting,\n\tpolyTorqueSetting := HMIData.polyTensionSetting\n);\n\nIF paperBagger OR HMIData.enablePaperBagger THEN\n\tbagDelivery.stepsPerInchSetting :=  Globals.STEPS_PER_INCH_PRO24_PAPER_FRONT;\n\tbagDelivery.velocityMultiplier := (bagDelivery.stepsPerInchSetting / (20000.0 * 0.25 / 60));\nELSE\n\tbagDelivery.stepsPerInchSetting :=  Globals.STEPS_PER_INCH_PRO24_BAG_DELIVERY;\n\tbagDelivery.velocityMultiplier := Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC;\nEND_IF  \n\t \nbagDelivery.Mode := bagDeliveryMode;\n\nCASE HMIData.printerSelection OF\n\t\t \n\tLabelPrinterSelection.NotInstalled:\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tzebraPrinter.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tprintAndApply.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tPanther_PA.Enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tmurrIOBusNode.printerNodeEnabled := FALSE;\n\t\n\tLabelPrinterSelection.ZebraPrinter203DPI, \t\t\t   \n\t\tLabelPrinterSelection.ZebraPrinter300DPI:\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tzebraPrinter.enable := HMIData.printerInUse;\n\t\t\t\t\t\t\t\t\t\t\t\t\tprintAndApply.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tPanther_PA.Enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tmurrIOBusNode.printerNodeEnabled := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\n\tLabelPrinterSelection.PrintAndApply203DPI,\n\t\tLabelPrinterSelection.PrintAndApply300DPI:\t\t\t//\n\t\t \t\t\t\t\t\t\t\t\t\t\tzebraPrinter.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tPanther_PA.Enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tprintAndApply.enable := HMIData.printerInUse;\n\t\t\t\t\t\t\t\t\t\t\t\t\tmurrIOBusNode.printerNodeEnabled := FALSE;\nEND_CASE\n\n// Run Zebra Printer\n//\nzebraPrinter(ribbonEncoderState := iPrinterRibbonEncoder, oLowerPrintHead => oPrintHeadDown);\nzebraPrinter.Mode := printerMode;\n\n// Disable out of cycle priting if not possible\nIF NOT HMIData.printOutOfCycleEnable THEN \n\tHMIData.printerCycleSelection := PrinterCycleSelection.PrintWhileFeeding;\nEND_IF\n\nIF HMIData.activateDemoMode THEN\n\tHMIData.demoModeIsActive.active := TRUE;\n\tzebraPrinter.autoSendLabel := TRUE;\nELSE\n\tHMIData.demoModeIsActive.active := FALSE;\n\tzebraPrinter.autoSendLabel := FALSE;\nEND_IF\n\nIF HMIData.baggerClearedAck THEN\n\tHMIData.baggerClearedAck := FALSE;\n\tprintAndApply.ClearedBagAck();\nEND_IF\n\n//\t \npackageAtExitTimer(IN := iPackageAtExit);\n\n//\t  \nprintAndApply(\n\tenable:= , \n\tbypass := NOT bagOpened,\n\tbaggerFaulted:= HMIData.faultActive, \n\tbaggerInCycle:= HMIData.inCycle, \n\tdataReady:= iPAOnlineDataReady, \n\tLOTAR:= iPALOTAR, \n\tfaultInput:= NOT iPAFaulted,\n\tPACycleComplete:= iPACycleComplete, \n\tapplicatorHome:= iPAApplicatorHome, \n\theartbeat:= iPAHeartbeat, \n\tproductAtApplicatorSensor:= NOT iConveyorClear, \n\tconveyorClearAfterCollision := collisionDetection.conveyorCleared,\n\texemptFaultsActive :=  pressureBar.faults.obstructionDetected.active OR barcodeVerificationFailed.active,\n\tpackageAtExitSensor := NOT iPackageAtExit,\n\tpackageHeldAtExitSensor := collisionDetection.packageHeldByCollisionDetection,\n\texitConveyorRunAfterPASetting := HMIData.printAndApplyConveyorDwell,\n\twaitForPrinterFaultSetting := HMIData.printAndApplyWaitForLabelTimeout,\n\tpackageExitTimeSetting := HMIData.printAndApplyConveyorDwell,\n\tpackageToTampTimeSetting := HMIData.exitConveyorDwell,\n\ttampDelayWithLOTAR :=  HMIData.printAndApplyTriggerDelayWithLOTAR,\n\ttampDelayWithoutLOTAR := HMIData.printAndApplyTriggerDelayWithoutLOTAR,\n\tcommFail=> printAndApplyCommFailure.faultTrigger, \n\tfaultedStatus=> printAndApplyFaulted.faultTrigger, \n\twaitForPrintFault=> printAndApplyWaitForLabelTimedOut.faultTrigger,\n\tjammedFault=> productJammed.faultTrigger,\n\ttriggerOutput=> oPATrigger1,\n\tresetOutput=> oPAReset, \n\tclearOutBaggerIndicaiton => HMIData.baggerNeedsClearing,\n\tlabelsInQueue=> labelsQueuedUpFault.faultTrigger\n);\n\t \ncollisionDetection(\n\tenable := HMIData.auxIOConfig.cfgInput1Selection = AuxInputSelection.CollisionDetection,\n\tcollisionDetected := iAuxConfigInput1,\n\tcollisionDetectedDwell := HMIData.collisonDetectionDwell,\n\tcollisionEngineRunoffDwell := HMIData.packageAtExitRunoffDwell,\n\tmultiplePackagesHeld := printAndApply.state = PRINT_AND_APPLY_STATES.Inhibited,\n\tconveyorsActive := printAndApply.runConveyorAfterApply,\n\tpackageAtExit := NOT iPackageAtExit,\n\tpackageHeldByCollisionDetection => HMIData.packageBlockingTrunkline.active\n);\n\t \n// Run funnel\nfunnel(\n\topeningDelay := HMIData.funnelOpenDelay, \n\topeningDwell := HMIData.funnelOpeningTime,\n\tclosingDwell := HMIData.funnelClosingTime,\n\tiOpened := iFunnelOpened, \n\tiClosed := iFunnelClosed,  \n\toClose => oFunnelClose, \n\toOpen => oFunnelOpen\n);\n\n// 2nd Stage Funnel\n\t \nIF stagingFunnel.enable THEN\nstagingFunnel(\n\topeningDelay := HMIData.stagingFunnelOpenDelay, \n\topeningDwell := HMIData.stagingFunnelOpeningTime,\n\tclosingDwell := HMIData.stagingFunnelClosingTime,\n\tiOpened := iStagingFunnelOpened, \n\tiClosed := iStagingFunnelClosed,  \n\toClose => oStagingFunnelCloseOrPerfBreakerDown, \n\toOpen => oStagingFunnelOpenOrPerfBreakerUp\n);\nEND_IF\n\t \nCASE HMIData.funnelFactorySelection OF\n\tFunnelSelection.NotInstalled:\n\t\t// Disable both funnels\n\t\tfunnel.enable := FALSE;\n\t\tstagingFunnel.enable := FALSE;\n\t\t\n\tFunnelSelection.FunnelWithSensors:\n\t\t//\n\t\tfunnel.enable := HMIData.funnelInUse;\n\t\tfunnel.feedback := eActuatorFeedbackType.Both;\n\t\tstagingFunnel.enable := FALSE;\n\t\n\tFunnelSelection.FunnelWithoutSensors:\n\t\t//\n\t\tfunnel.enable := HMIData.funnelInUse;\n\t\tfunnel.feedback := eActuatorFeedbackType.None;\n\t\tstagingFunnel.enable := FALSE;\n\t\t\n\tFunnelSelection.TwoStageFunnelWithSensors:\n\n\t\t_fillerDroppingProductONS(CLK := filler.droppingProduct);\n\t\tIF _fillerDroppingProductONS.OSR THEN\n\t\t\tstagingFunnel.Open();\n\t\tELSIF _fillerDroppingProductONS.OSF THEN\n\t\t\tstagingFunnel.Close();\n\t\tEND_IF\n\n\t\t//\n\t\tfunnel.enable := HMIData.funnelInUse;\n\t\tfunnel.feedback := eActuatorFeedbackType.Both;\n\t\tstagingFunnel.enable := HMIData.funnelInUse;\n\t\tstagingFunnel.feedback := eActuatorFeedbackType.Both;\n\t\t\t \n\tFunnelSelection.BagLoadingTray:\n\t\tfunnel.enable := HMIData.funnelInUse;\n\t\tfunnel.feedback := eActuatorFeedbackType.Both;\n\t\tstagingFunnel.enable := FALSE;\n\t\t\t \nEND_CASE\n\n//\nsealBarTempSensor(\n\tbusNodeOK := murrIOBusNode.ok,\n\tptrTemperatureBytes := ADR(iHeaterBarTempInputs)\n);\n\t \n//\nIF sealBarTempSensor.reconfigureIO THEN\n\tmurrIOBusNode.restartBusnodePulse.Trigger();\t\t \nEND_IF\n\n//\t \nsealBarHeater(\n\tenable := NOT safePowerFailure.active,\n\ttemperatureSensor := sealBarTempSensor,\n\ttemperatureSetpoint := TO_REAL(HMIData.sealBarTemperatureSetting),\n\theaterPulse => \toHeaterPulse,\n\tcurrentTemp => HMIData.sealBarTemperature\n);\t  \n\n{region \"timers\"}\n// Timers\nsealTimer();\nbagOpenFingerDelay();\nvacuumHoldTimer(PT := TO_TIME(HMIData.vacuumDwell * 1000));\nbagOpenCheckDelay();\nbagDropTimer(PT := TO_TIME((HMIData.loadPlateDelay * 1000) + (HMIData.bagDropTime * 1000)));\n{endregion}\n\t\t  \n// Setup of HPA and load plate.  Use .Trigger() to run.\nHPA.DwellSetting := TO_UINT(HMIData.hpaDwell * 1000);\nHPA(Q => oHPAOn);\nhpaServiceOnONS(CLK := HMIData.hpaserviceOn);\n\ntriggerLPAWhileFeedingONS(CLK := state.sb.releaseFeed = RELEASE_FEED_STATES.MovingJawOutAndFeedingBag);\nIF HMIData.lpaDuringBagFeedEnable AND triggerLPAWhileFeedingONS.OSR THEN\n\tLPA.DwellSetting := TO_DINT(((bagDelivery.remainingLength - HMIData.bagSkirtLength) / TO_REAL(HMIData.bagForwardSpeed)) * 1000.0);\n\tLPA.Trigger();\nEND_IF\nLPA(Q => oLPAOn);\n\t \nCASE HMIData.independentBagDeflatorSelection OF\n\tBagDeflatorSelection.NotInstalled:\t\t\t\t\t// Disable IBD\n\t\t \t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDEject := FALSE;\n\t\n\tBagDeflatorSelection.IBDStandard:\t// Enable IBD\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDDeflateDwellTime <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDPackageEjectAssistDwellTime <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDEject := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDEject := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\tBagDeflatorSelection.IBDWithHingedPlate:\t// Enable IBD with Hinged Plate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\tBagDeflatorSelection.MotorizedIBD:\t\t\t// Enable motorized IBD\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDDeflateDwellTime <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDDeflate := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDPackageEjectAssistDwellTime <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDEject := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableIBDEject := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\nEND_CASE\n\t\t\n(*  \nCASE HMIData.bofSelection OF\n\tBagOpenFingersSelection.NotInstalled:\t\t\t\t\t// Disable Bag Open\n\t\t \t\t\t\t\t\t\t\t\t\t\t\t\tenableBagOpen := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\tBagOpenFingersSelection.PneumaticWithBagOpenSensors:\t// Enable Bag Open\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenableBagOpen := TRUE;\n\t\nEND_CASE\n\t *)\n\t\t  enableBagOpen := HMIData.bagOpenEnable;\n\nCASE HMIData.cycleStartButtonSelection OF\n\tPalmButtonSelection.NotInstalled:\t\t\t\t\t// Dont' allow input to start bagger cycle\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tstartCycleReqFromPalmButtons := FALSE;\n\t\t \n\tPalmButtonSelection.SinglePalmButton:\t\t\t\t// Start using one side only\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tstartCycleReqFromPalmButtons := iRightPalmButton;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Trigger fault if left palm button is seen - should be set up for dual!\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF iLeftPalmButton THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpalmButtonConfigError.Trigger();\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t \n\tPalmButtonSelection.DualPalmButton:\t\t\t\t\t// Both buttons must be pressed\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tstartCycleReqFromPalmButtons := iRightPalmButton AND iLeftPalmButton;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\tPalmButtonSelection.LightedPalmButton:\t\t\t\t\n\t\t// Lighted Murr palm button input comes from IO Link\n\t\tstartCycleReqFromPalmButtons := iMurrTouchButtonOneStatus.0 OR iMurrTouchButtonTwoStatus.0;\n\t\tbasicLightedPalmButton(\n\t\t\tbaggerReady:= readyToRun AND NOT HMIData.sealBarNotAtTemperature.active, \n\t\t\tbaggerFaulted:= HMIData.faultActive, \n\t\t\tbaggerInCycle:= HMIData.inCycle, \n\t\t);\n\t\toMurrTouchbuttonOneState := oMurrTouchButtonTwoState := basicLightedPalmButton.IOLinkStateOutput;\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    PalmButtonSelection.LightedPalmButtonAdvanced, PalmButtonSelection.DualLightedPalmButtonAdvanced:\t\t\n\t\t// Lighted Murr palm button input comes from IO Link\n\t\tstartCycleReqFromPalmButtons := iMurrTouchButtonOneStatus.0 OR iMurrTouchButtonTwoStatus.0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\tadvancedLightedPalmButtonOne(\n\t\t\tIOLinkData := ADR(oMurrTouchButtonOneIOLinkOutputs),\n\t\t\tbaggerReady := readyToRun \n\t\t\t\t\t\t\tAND (NOT HMIData.sealBarNotAtTemperature.active) \n\t\t\t\t\t\t\tAND (NOT HMIData.stopMachine) ,\n\t\t\tbaggerFaulted := HMIData.faultActive,\n\t\t\tbaggerInCycle := HMIData.inCycle,\n\t\t\tbaggerExternalInhibited := printAndApply.state = PRINT_AND_APPLY_STATES.Inhibited,\n\t\t\tbaggerHeatingUp := HMIData.sealBarNotAtTemperature.active AND sealBarHeater.heating,\n\t\t\tbaggerCoolingDown := HMIData.sealBarNotAtTemperature.active AND sealBarHeater.cooling AND sealBarHeater.enable\n\t\t);\t\n        IF HMIData.cycleStartButtonSelection = PalmButtonSelection.DualLightedPalmButtonAdvanced THEN\n\t\t\tadvancedLightedPalmButtonTwo(\n\t\t\t\tIOLinkData := ADR(oMurrTouchButtonTwoIOLinkOutputs),\n\t\t\t\tbaggerReady := readyToRun \n\t\t\t\t\t\t\tAND (NOT HMIData.sealBarNotAtTemperature.active) \n\t\t\t\t\t\t\tAND (NOT HMIData.stopMachine) ,\n\t\t\t\tbaggerFaulted := HMIData.faultActive,\n\t\t\t\tbaggerInCycle := HMIData.inCycle,\n\t\t\t\tbaggerExternalInhibited := printAndApply.state = PRINT_AND_APPLY_STATES.Inhibited,\n\t\t\t\tbaggerHeatingUp := HMIData.sealBarNotAtTemperature.active AND sealBarHeater.heating,\n\t\t\t\tbaggerCoolingDown := HMIData.sealBarNotAtTemperature.active AND sealBarHeater.cooling AND sealBarHeater.enable\n\t\t\t);\t\n\t\tEND_IF\t\t\t\t\t  \t\t\t\t\t\t\t\t\t \nEND_CASE\nstartCycleReqFromPalmButtonsONS(CLK := startCycleReqFromPalmButtons);\t \n\n// Stack Light active only if no 2nd palm button selected - they use the same IOLink port\nIF HMIData.cycleStartButtonSelection <> PalmButtonSelection.DualLightedPalmButtonAdvanced THEN\n\tstackLight(\n\t\tIOLinkData:= ADR(oMurrStackLightOutputs), \n\t\tbaggerReady := readyToRun AND NOT HMIData.sealBarNotAtTemperature.active AND NOT HMIData.faultActive ,\n\t\tbaggerFaulted := HMIData.faultActive,\n\t\tbaggerInCycle := HMIData.inCycle,\n\t\tbaggerExternalInhibited := printAndApply.state = PRINT_AND_APPLY_STATES.Inhibited ,\n\t\tbagsLow:= HMIData.bagLevelLow.active, \n\t\tbagOpenRetryActive:= bagOpenRetryCount <> 0,\n\t\tbaggerHeatingUp := HMIData.sealBarNotAtTemperature.active AND sealBarHeater.heating\n\t);\t \nEND_IF\n\n\t\t \n_auxIOPhysical(\n\tstate := state,\n\tconfigIn1 := iAuxConfigInput1, \n\tconfigIn2 := iAuxConfigInput2,\n\tbagsLow := HMIData.bagLevelLow.active,\n\tfaultActive := HMIData.faultActive,\n\tinhibitCycle := printAndApply.inhibitCycle,\n\tprinterDataReady := printerDataReady,\n\twaitingForFiller := filler.waitingForFiller,\n\trunExitConveyor := oRunExternalExitConveyor,\n\tfillerType := HMIData.fillerFactorySelection,\n\tfactorySelection := HMIData.auxIOConfig,\n\tbaggerOK => oAuxBaggerOk,\n\treadyForFiller => oAuxReadyForFiller,\n\tinhibitBagger => ,\n\tconfigOut1 => oAuxConfigOut1,\n\tconfigOut2 => oAuxConfigOut2,\n);\n\t \n\t\t  \n_auxIORemote(\n\tstate := state,\t\n\tbagsLow := HMIData.bagLevelLow.active,\n\tfaultActive := HMIData.faultActive,\n\tinhibitCycle := printAndApply.inhibitCycle,\n\tprinterDataReady := printerDataReady,\n\twaitingForFiller := filler.waitingForFiller,\n\trunExitConveyor := oRunExternalExitConveyor,\t\n\tactiveFaults := GlobalObjects.CollectionOfActiveFaults.ObjNames,\n\tinhibitBagger => \n);\n\nHMIData.baggerInhibited.active := _auxIORemote.inhibitBagger  OR _auxIOPhysical.inhibitBagger;\n\n// Filler and EZFeed conveyor setup\nCASE HMIData.fillerFactorySelection OF\n\tFillerSelection.NotInstalled:\t\t\t\t\t// No filler\n\t\t// No filler\n\t\t \t\t\t\t\t\t\t\t\t\t\tfiller.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tfiller.activateFiller := FALSE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.fillerEnable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tezfeed.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tfillerModeCycleStartOnlyPulse.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\tInfeed_Conveyor_IO.Enable := FALSE;\n\t\t \n\tFillerSelection.StandardFiller:\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Only enable filler if Aux IO is enabled\n\t\t \t\t\t\t\t\t\t\t\t\t\tfiller.enable := ((HMIData.auxIOConfig.factorySelection = AuxiliaryIOSelection.AuxIOStandard)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR HMIData.auxIOSource.ModbusTCP\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR HMIData.auxIOSource.OPC_UA);\n\t\t\t\t\t\t\t\t\t\t\t\t\tInfeed_Conveyor_IO.Enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\tFillerSelection.EZFeed:\t\t\t\t\t\t\t\n\t\tfiller.enable := TRUE;\n\t\t \t\t\t\t\t\t\t\t\t\t\tezfeed.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tInfeed_Conveyor_IO.Enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\nEND_CASE \t \n\nezfeed(\n\tenable:= , \n\tbaggerFaulted:= HMIData.faultActive, \n\tenableEZFeed:= HMIData.fillerEnable, \n\tcontinuousModeEnable:= HMIData.infeedConveyorRunningMode, \n\tpartsCountingModeEnable:= HMIData.infeedConveyorCountingMode, \n\tflightPresentSensor:= iInfeedFlightSensor, \n\tpartPresentSensor:= NOT iLightCurtainsClear AND HMIData.lightCurtainSelection = LightCurtainsSelection.LoadingAreaLightCurtains, \n\twaitingForFiller:= filler.waitingForFiller AND (NOT HMIData.stopMachine) AND NOT HMIData.batchCountDone.active, \n\tindexDwellSetting:= HMIData.infeedIndexDwellTimer, \n\tflightTarget:= HMIData.infeedFlightCountTarget, \n\tpartsTarget:= HMIData.infeedPartsCountTarget, \n\temptyPartsWarningSetting:= HMIData.infeedEmptyPartsSetting, \n\trestartFromEmptyParts:= HMIData.initiateCycle, \n\tstate=> , \n\trunVFD=> oRunInfeedVFD, \n\tflightCount=> HMIData.infeedFlightCountActual, \n\tpartsCount=> HMIData.infeedPartsCountActual, \n\temptyPartsWarningCount=> HMIData.infeedEmptyPartsActual, \n\temptyPartsWarning=> HMIData.infeedConveyorOutOfParts.active,\n\tEZFeedDone=> );\n\nIF HMIData.fillerFactorySelection = FillerSelection.EZFeed THEN\n\tInfeed_Conveyor_IO.Enable := TRUE; \n\n\tIF Infeed_Conveyor_IO.eState <> IoDrvEthernetIP.AdapterState.RUNNING THEN \n\t\tinfeedConveyorIOCommFail.Trigger();\n\tEND_IF\nELSE\n\tInfeed_Conveyor_IO.Enable := FALSE;\nEND_IF\n\t \ninfeedConveyorVFDFaulted.faultTrigger := (HMIData.fillerFactorySelection = FillerSelection.EZFeed) AND ezfeed.enableEZFeed AND NOT iInfeedVFDNotFaulted;\n\t\t \nfillerModeCycleStartOnlyPulse.DwellSetting := 4000;\nfillerModeCycleStartOnlyPulse(Q => HMIData.fillerModeCycleStartOnly.active);\nfiller(\n\tenable:= ,\t\n\tinCycle := HMIData.inCycle,\n\tfillerTrigger:= (iAuxFillerTrigger AND HMIData.auxIOSource.Physical) OR ezfeed.EZFeedDone OR (RemoteComms.OPCInputsToBagger.fillerTrigger AND HMIData.auxIOSource.OPC_UA) OR (RemoteComms.modbusInputsToBagger.fillerTrigger AND HMIData.auxIOSource.ModbusTCP), \n\tactivateFiller:= HMIData.fillerEnable, \n\tdropTime:= HMIData.fillerDropTime,\n\tstate=> , \n\tfillerModeActive=> , \n\twaitingForFiller=> ,\n\tcycleBagRequest=> , \n\tcycleBaggerToActivateFiller=> , \n\tnotReady=> \n);\n\t \nIF filler.activateFiller AND NOT filler.cycleBaggerToActivateFiller.active THEN\n\tIF HMIData.initiateCycle OR startCycleReqFromPalmButtons THEN\n\t\tfillerModeCycleStartOnlyPulse.Trigger();\n\tEND_IF\nEND_IF\n\n//\nloadShelf(\n\tfaultActive := HMIData.faultActive,\n\tswitchedPowerON := iEStopOK,\n\tinUse := HMIData.loadPlateInUse,\n    shakerEnable := HMIData.shakerInstalled,\n\tshakeStart := HMIData.loadShelfShakerStart,\n\tshakerDwell := HMIData.loadShelfShakerDwell,\n\tshakerDelay := HMIData.loadShelfShakerDelay,\n\tshakerOnDwell := HMIData.loadShelfShakerOnDuration,\n\tshakerOffDwell := HMIData.loadShelfShakerOffDuration,\n\tdisabledPosition := HMIData.packageEjectDisabledPosition,\n\tdischargeOnFault := printAndApply.enable,\n\tfaultsEnabled := FALSE,\n\tmoveToLoadingPositon => oLoadShelfUp,\n\tmoveToDischargePosition => oLoadShelfDown\n);\t\t \nHMIData.loadShelfService.extendedFeedback := rearLoadPlate.inLoadingPosition;\nHMIData.loadShelfService.retractedFeedback := rearLoadPlate.inDischargePosition;\n\n//\t \nrearLoadPlate(\n\tfaultActive := HMIData.faultActive,\n\tswitchedPowerON := iEStopOK,\n\tinUse := HMIData.loadPlateInUse,\n\tinLoadingPosition := iLoadPlateExtended,\n\tinDischargePosition := iLoadPlateRetracted,\n    shakerEnable := HMIData.shakerInstalled,\n\tshakeStart := HMIData.rearloadPlateShakerStart,\n\tshakerDwell := HMIData.rearLoadPlateShakerDwell,\n\tshakerDelay := HMIData.rearLoadPlateShakerDelay,\n\tshakerOnDwell := HMIData.rearLoadPlateShakerOnDuration,\n\tshakerOffDwell := HMIData.rearLoadPlateShakerOffDuration,\n\tdisabledPosition := HMIData.packageEjectDisabledPosition,\n\tdischargeOnFault := printAndApply.enable,\n\tmoveToLoadingPositon => oloadPlateExtend,\n\tmoveToDischargePosition => oLoadPlateRetract,\n\tfailedToExtend => rearLoadPlateFaults.failedToLoad.faultTrigger,\n\tfailedToRetract => rearLoadPlateFaults.failedToDischarge.faultTrigger\n);\t\t \nHMIData.rearLoadPlateService.extendedFeedback := HMIData.loadPlateService.extendedFeedback := rearLoadPlate.inLoadingPosition;\nHMIData.rearLoadPlateService.retractedFeedback := HMIData.loadPlateService.retractedFeedback :=  rearLoadPlate.inDischargePosition;\n\n//\t \nfrontLoadPlate(\n\tfaultActive := HMIData.faultActive,\n\tswitchedPowerON := iEStopOK,\n\tinUse := HMIData.loadPlateInUse,\n\tinLoadingPosition := iFrontLoadPlateRetracted,\n\tinDischargePosition := iFrontLoadPlateExtended,\n\t//triggerDwell := HMIData.loadPlateDwell,\n\t//triggerDelay := HMIData.loadPlateDelay,\n    shakerEnable := HMIData.shakerInstalled,\n\tshakeStart := HMIData.frontloadPlateShakerStart,\n\tshakerDwell := HMIData.frontLoadPlateShakerDwell,\n\tshakerDelay := HMIData.frontLoadPlateShakerDelay,\n\tshakerOnDwell := HMIData.frontLoadPlateShakerOnDuration,\n\tshakerOffDwell := HMIData.frontLoadPlateShakerOffDuration,\n\tdisabledPosition := HMIData.packageEjectDisabledPosition,\n\tdischargeOnFault := printAndApply.enable,\n\tmoveToLoadingPositon => oFrontLoadPlateToLoad,\n\tmoveToDischargePosition => oFrontLoadPlateToDischarge,\n\tfailedToExtend => forwardLoadPlateFaults.failedToLoad.faultTrigger,\n\tfailedToRetract => forwardLoadPlateFaults.failedToDischarge.faultTrigger\n);\t\t \nHMIData.forwardLoadPlateService.extendedFeedback := frontLoadPlate.inLoadingPosition;\nHMIData.forwardLoadPlateService.retractedFeedback := frontLoadPlate.inDischargePosition;\n\nCASE HMIData.packageEjectSelection OF\n\tPackageEjectionSelection.NotInstalled:\t\t\t\t// Disable All\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tloadShelf.enable := FALSE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.faultsEnabled := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.faultsEnabled := FALSE;\t\n\t\t \n\tPackageEjectionSelection.RearRetractingLoadPlate:\t// Enable Rear Retracting Load Plate\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tloadShelf.enable := FALSE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.faultsEnabled := powerSettlingTimer.Q;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.faultsEnabled := FALSE;\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDelay := HMIData.loadPlateDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDwell := HMIData.loadPlateDwell;\n\t\n\tPackageEjectionSelection.LabelSideUp:\t\t\t\t// Enable All\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tloadShelf.enable := TRUE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.faultsEnabled := powerSettlingTimer.Q;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.faultsEnabled := state.head >= HEAD_STATES.ReleaseAndFeedBag;\n                                                        rearLoadPlate.triggerDelay := HMIData.loadPlateDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDwell := HMIData.loadPlateDwell + HMIData.loadPlateDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.triggerDelay := HMIData.loadShelfDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.triggerDwell := HMIData.loadShelfDwell;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.triggerDelay := HMIData.loadShelfDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.triggerDwell := HMIData.loadShelfDwell;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\tPackageEjectionSelection.RearRetractWithRetractShelf:   \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Enable Rear Retracting Load Plate and Shelf\n\t\t \t\t\t\t\t\t\t\t\t\t\t\tloadShelf.enable := TRUE;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.enable := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.enable := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.faultsEnabled := powerSettlingTimer.Q;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.faultsEnabled := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDelay := HMIData.loadPlateDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.triggerDwell := HMIData.loadPlateDwell;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.triggerDelay := HMIData.loadShelfDelay;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.triggerDwell := HMIData.loadShelfDwell;\nEND_CASE\t\n\t \n\n//  \nexitConveyorRun();\nexitConveyorRun.DwellSetting := TO_DINT(HMIData.exitConveyorDwell * 1000);\nexitConveyorJogONS(CLK := HMIData.exitConveyorJog);\n\noRunExitConveyor := ((exitConveyorRun.Q OR collisionDetection.runExitConveyor OR (printAndApply.runConveyorAfterApply AND NOT printAndApply.inhibitConveyor)) AND HMIData.integratedExitConveyorSelection = IntegratedConveyorSelection.RearExit);\n\t \n_runIntegratedExitConveyor := ((exitConveyorRun.Q OR collisionDetection.runExitConveyor OR (printAndApply.runConveyorAfterApply AND NOT printAndApply.inhibitConveyor)) AND HMIData.integratedExitConveyorSelection = IntegratedConveyorSelection.RearExit);\t \noRunExitConveyorForward := _runIntegratedExitConveyor AND NOT (HMIData.reverseConveyor OR _auxIOPhysical.reverseConveyor OR _auxIORemote.reverseConveyor);\noRunExitConveyor := oRunExitConveyorForward;\noRunExitConveyorReverse := _runIntegratedExitConveyor AND (HMIData.reverseConveyor OR _auxIOPhysical.reverseConveyor OR _auxIORemote.reverseConveyor);\n\t //Aux IO conveyore control\noAuxExitConveyorForward := _runIntegratedExitConveyor; \noAuxExitConveyorReverse := HMIData.reverseConveyor OR _auxIOPhysical.reverseConveyor OR _auxIORemote.reverseConveyor;\n\n\n \nexternalExitConveyorRun();\nexternalExitConveyorRun.DwellSetting := TO_UINT(HMIData.externalExitConveyorDwell * 1000);\nexternalExitConveyorJogONS(CLK := HMIData.externalExitConveyorJog);\n\noRunExternalExitConveyor := collisionDetection.runExternalExitConveyor \n\t\t\t\t\t\t\tOR externalExitConveyorRun.Q\n\t\t\t\t\t\t\tOR (printAndApply.runConveyorAfterApply  \n\t\t\t\t\t\t\t\tAND NOT collisionDetection.inhibitExternalExitConveyor \n\t\t\t\t\t\t\t\tAND HMIData.externalExitConveyorSelection <> ExteralConveyorSelection.NotInstalled) \n\t\t\t\t\t\t\tAND NOT barcodeVerificationFailed.active;\n//oRunExternalExitConveyor := collisionDetection.runExternalExitConveyor OR externalExitConveyorRun.Q OR printAndApply.runConveyorAfterApply AND NOT collisionDetection.inhibitExternalExitConveyor AND HMIData.externalExitConveyorSelection <> ExteralConveyorSelection.NotInstalled;\t  \n\t  \nIF printAndApply.inhibitConveyor THEN\n\texitConveyorRun.ManualOFf();\n\texternalExitConveyorRun.ManualOFf();\nEND_IF\t \n\t\t  \nbagOpenFingers(enable := HMIData.bofSelection <> BagOpenFingersSelection.NotInstalled,\n\t\t\t\treleaseOutput => oBOFUp,\n\t\t \t\tgrabOutput => oBOFDown,\n\t\t\t\trightFingerBagPresent := iRightFingerBagPresent,\n\t\t\t\tleftFingerBagPreset := iLeftFingerBagPresent,\n\t\t\t\tbagFailedToGrabBothFingersCount := Globals.bagFailedToGrabBothFingersCount,\n\t\t\t\tbagFailedToGrabLeftFingerCount := Globals.bagFailedToGrabLeftFingerCount,\n\t\t\t\tbagFailedToGrabRightFingerCount := Globals.bagFailedToGrabRightFingerCount,\n\t\t\t\tsuccessfulBagOpenCount := Globals.successfulBagOpenCount);\n\n// Setup and run adjustable passthrough\n//refIECObject := Pbar_ServoEIP;\n\nIBD_Motor.Enable := HMIData.independentBagDeflatorSelection = BagDeflatorSelection.MotorizedIBD;\t \nIBDMotor(ptrEIPInputs := ADR(iIBDMotorEIP),\n                ptrEIPOutputs := ADR(oIBDMotorEIP),\n                stepsPerInchSetpoint := Globals.STEPS_PER_INCH_TFBelt,\n\t\t\t\treversePolarity := FALSE,\n\t\t\t\tdefaultCurrentSetpoint := 650,\n\t\t\t\tcommFail := IBD_Motor.eState <> IoDrvEthernetIP.AdapterState.RUNNING AND IBD_Motor.Enable,\n\t\t\t\tisHomable := TRUE);\nIBDMotor.Execute();\n\n// Clamp maximim IBD open position - 9\" for Pro 18, 12\" for Pro 24\nIF HMIData.passthroughSetting + HMIData.IBDOffset > Globals.maximumPassthough THEN\n\t IBDOutSetting := Globals.maximumPassthough;\nELSE\n\tIBDOutSetting := HMIData.passthroughSetting + HMIData.IBDOffset;\nEND_IF\n\t\t  \nIBD(\n\tenable:= , \n\tpbarOutSetting:= IBDOutSetting, \n\tinPositionSetting:= HMIData.IBDClosePosition, \n\tdisableFaults:= , \n\textendCommand:= HMIData.IBDService.extendCommand, \n\tretractCommand:= HMIData.IBDService.retractCommand ,  \n\tfailToOpen=> , \n\tstate=> , \n\tactualPosition=> , \n\tIBDOpen=> , \n\thomeRequired=> , \n\tclamped=> , \n\tIBDMotor:= IBDMotor,\n\tfailedToHome=> );\nIBDFailedToHome.faultTrigger := IBD.failedToHome AND (HMIData.independentBagDeflatorSelection = BagDeflatorSelection.MotorizedIBD);\n\t \nobstructionFaultONS(CLK := (pressureBar.faults.obstructionDetected.active OR pressureBar.faults.failedToClose.active));\nIF obstructionFaultONS.OSR THEN\n\tIBD.RemovePower();\nEND_IF\n\t\t \nIF HMIData.IBDService.extendCommand THEN\n\tHMIData.IBDService.extendCommand := FALSE;\nEND_IF\n\t \nIF HMIData.IBDService.retractCommand THEN\n\tHMIData.IBDService.retractCommand := FALSE;\nEND_IF\n{endregion}\n\t \nhmiLight(lightOutput => oHMILight);\nfaultONS(CLK := HMIData.faultActive);\n\nreadyToRun := (motorizedSealFlatteners.Ready OR NOT motorizedSealFlatteners.enable) \n                AND (pressureBar.Ready OR NOT pressureBar.enable)\n\t\t\t\tAND (IBD.Ready OR NOT enableIBDDeflate)\n                AND (bagDelivery.Ready OR NOT bagDelivery.enable)\n                AND (zebraPrinter.Ready OR NOT zebraPrinter.enable)\n\t\t\t\tAND (NOT oSealBarExtend)\n\t\t\t\tAND murrIOBusNode.ok;\t\n\niPowerOffButtonONS(CLK := iPowerOffButton);\nresetTimer(IN := iPowerOffButtonONS.OSR);\n\nallMotorCommsGood := NOT motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.faults.commFail.active\n\t\t\t\t\tAND NOT IBDMotor.faults.commFail.active\n\t\t\t\t\tAND NOT pressureBarMotor.faults.commFail.active\n\t\t\t\t\tAND NOT bagDelivery.bagFeedMasterMotor.faults.commFail.active\n\t\t\t\t\tAND NOT bagDelivery.bagFeedRearMotor.faults.commFail.active;\n\nIF iPowerOffButtonONS.OSR THEN\n\treset();\nEND_IF\n\t\t\t\nIF HMIData.makeReady OR resetTimer.Q THEN\n\tposInhibit := pressureBar.jawClear OR pbarSensorBypass;\n\tCube67_BN_E_V2.xAcknowledge := TRUE;\n\tFestoManifold.xAcknowledge := TRUE;\n\tMSFMotor.xAcknowledge := TRUE;\n\tBag_Delivery_EIP_Motor.xAcknowledge := TRUE;\n\tPbar_ServoEIP.xAcknowledge := TRUE;\n\tBag_Delivery_Rear_Motor.xAcknowledge := TRUE;\n\tKeyence_BCV.xAcknowledge := TRUE;\n\tIBD_MOtor.xAcknowledge := TRUE;\n\tPanther_PA.xAcknowledge := TRUE;\n\t\n\tHMIData.ackAllFaults := TRUE;\n\tenable := TRUE;\n\t\n\tprintAndApply.Reset();\n\t\n\tbagDropTimer.IN := FALSE;\n\t\n\tmotorizedSealFlattenersMode := DEVICE_MODES.Auto;\n\tmotorizedSealFlatteners.Reset();\n\t\n\tHMIData.bagOpenFeedNewBagCount := 0;\n\tbagOpenRetryCount := 0;\n\t\n\tHMIData.stopMachine := FALSE;\n\tHMIData.inCycle := FALSE;\n\telectricPressureBarMode := DEVICE_MODES.Auto;\n\t\n\tpressureBar.enable := TRUE;\n\tenableHeater := TRUE;\n\t\n\tbagDeliveryMode := DEVICE_MODES.Auto;\n\tbagDelivery.Reset();\n\tbagDelivery.enable := TRUE;\n\t\n\tIF NOT bagOpenFingers.CheckIfBagGrabbed(FALSE) THEN\n\t\tbagOpened := FALSE;\n\tEND_IF\n\n\tprinterMode := DEVICE_MODES.Auto;\n\tzebraPrinter.Reset();\n\t\n\tIF iPowerOffButtonONS.OSR AND NOT bagDelivery.bagTensionFault.active THEN\n\t\tIF (HMIData.factoryTestMode AND (HMIData.bagsMade.count < 1000)) THEN\n\t\t\tHMIData.bagsMade.Clear();\n\t\tEND_IF \n\tEND_IF  \n\t\n\tpressureBarMotor.Reset();\n\tpassthroughMode := DEVICE_MODES.Auto;\n\n\toVacOn := FALSE;\n\trearLoadPlate.Reset();\n\tfrontLoadPlate.Reset();\n\tloadShelf.Reset();\n\tcollisionDetection.Reset();\n\t\n\tLPA.Reset();\n\tLPA.ManualOff();\n\tHPA.Reset();\n\tIF (HMIData.funnelFactorySelection = FunnelSelection.BagLoadingTray) THEN\n\t\tIF pressureBar.pressureBarOpen THEN\n\t\t\tfunnel.Open();\n\t\tELSE\n\t\t\tfunnel.Close();\n\t\tEND_IF\n\tELSE\n\t\tfunnel.Close();\n\tEND_IF\n\t\n\texitConveyorRun.Reset();\n\texternalExitConveyorRun.Reset();\n\toSealBarExtend := FALSE;\n\toSealBarRetract := TRUE;\n\tsealTimer.IN := FALSE;\n\tpressureBarCloseDelay.IN := FALSE;\n\tfiller.Reset();\n\t_auxIOPhysical.Reset();\n\tfillerModeCycleStartOnlyPulse.Reset();\n\tbarcodeVerifier.Reset();\n\tkeyenceBCV.Reset();\n\tstate.head := HEAD_STATES.Idle;\n\tsetPassthroughPB := FALSE;\n\tHMIData.jobLoadRequired.active := TRUE;\n\tHMIData.makeReady := FALSE;\n\thmiLight.TurnOff();\n\tautoModeKeepCycling := FALSE;\n\t\nELSE\n\tCube67_BN_E_V2.xAcknowledge := FALSE;\n\tFestoManifold.xAcknowledge := FALSE;\n\tMSFMotor.xAcknowledge := FALSE;\n\tBag_Delivery_EIP_Motor.xAcknowledge := FALSE;\n\tPbar_ServoEIP.xAcknowledge := FALSE;\n\tBag_Delivery_Rear_Motor.xAcknowledge := FALSE;\n\tKeyence_BCV.xAcknowledge := FALSE;\n\tIBD_MOtor.xAcknowledge := FALSE;\n\tPanther_PA.xAcknowledge := FALSE;\nEND_IF\n\nIF enableONS.Q OR resetONS.Q THEN\n    state.head := HEAD_STATES.Idle;\n\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.Idle;\n\tstate.sb.releaseFeed := RELEASE_FEED_STATES.Idle;\n\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.Idle;\n\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Idle;\n\tstate.sb.automation := AUTOMATION_STATES.Idle;\n\tstate.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.Idle;\n\tmotorizedSealFlatteners.Reset();\n\tpressureBar.Reset();\n\tIBD.Reset();\n\tbagDelivery.bagFeedRearMotor.EnableTensionFault();\n\tbagDelivery.AutoFeedToEye();\n// \tbagDelivery.Reset();\n\tzebraPrinter.Reset();\n\thomeJawPB := FALSE;\n\n\tIF IBD.homeRequired THEN\n\t\thomeJawPB := TRUE;\n\tELSE\n\t\thomeJawPB := TRUE;\n\tEND_IF\n\tIF pressureBar.homeRequired THEN\n\t\thomeJawPB := TRUE;\n\tELSE\n\t\thomeJawPB := TRUE;\n\tEND_IF\n\n\tbagDropTimer.IN := FALSE;\n\t_reset := FALSE;\n\tcycleTimer.IN := FALSE;\n\t\n\t\n\tIF NOT (HMIData.mailerMaterial = MAILER_MATERIAL.paper) \n\t\tAND (HMIData.sealAreaOptionSelection = SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker) \n\t\tAND NOT stagingFunnel.enable\n\t\tTHEN\t\t\t\t\n\t\t\toStagingFunnelCloseOrPerfBreakerDown \t:= FALSE;\n\t\t\toStagingFunnelOpenOrPerfBreakerUp   \t:= TRUE;\n\t\tEND_IF\nEND_IF\n\nIF HMIData.bagsMade.count >= 1000 THEN\n\tGlobals.factoryTestComplete := TRUE;\nEND_IF\n\nIF Globals.factoryTestComplete THEN\n\tHMIData.machineNotTested.active := FALSE;\nELSE\n\tHMIData.machineNotTested.active := TRUE;\nEND_IF\n\nIF HMIData.factoryTestMode THEN\n\tHMIData.factoryTestModeActive.active := TRUE;\nELSE\n\tHMIData.factoryTestModeActive.active := FALSE;\nEND_IF\n\n// Disable the printer on dry cycle because we dont't want to print on the platen roller               \nIF HMIData.enableDryCycle THEN\n    zebraPrinter.enable := FALSE;\nEND_IF\n\n// Send torque value to motor                 \nrearMotorCommsReturned(CLK := bagDelivery.bagFeedRearMotor.commFail);\nIF HMIData.jobLoaded OR rearMotorCommsReturned.Q THEN\n\tbagDelivery.bagFeedRearMotor.SetTorque((TO_DINT(HMIData.bagTensionSetting * 100)));\nEND_IF\n\n// Clear batch count on batch enable\nbatchEnableONS(CLK := HMIData.batchEnable);\nIF (batchEnableONS.OSR)\n\tOR (NOT HMIData.batchEnable) \n\tOR (HMIData.batchReset)\n\tOR (resetONS.Q AND HMIData.batchCountDone.active)\nTHEN\n    HMIData.batchCount := 0;\n\tHMIData.batchReset := FALSE;\nEND_IF\nHMIData.batchCountDone.active := (HMIData.batchCount >= HMIData.batchSetting) AND HMIData.batchEnable;\nIF HMIData.batchCountDone.active OR NOT HMIData.autoEnable OR HMIData.fillerEnable THEN\n\tautoModeKeepCycling := FALSE;\nEND_IF\n\n//IF NOT enable OR NOT readyToRun OR faultONS.OSR THEN\nIF NOT enable OR faultONS.OSR THEN\n\tstate.head := HEAD_STATES.Fault;\n\t//pressureBarMotor.Stop();\n\tcycleTimer.IN := FALSE;\nEND_IF\npressureBarCloseDelay(PT := TO_TIME(HMIData.pressureBarCloseDelay * 1000));\ncycleTimer();\nautoModeKeepCyclingTimer(PT := TO_TIME(HMIData.autoModeDwell * 1000), IN := autoModeKeepCycling AND state.head = HEAD_STATES.Idle);\n\nHMIData.mayCycleUnexpectedly.active := autoModeSelected OR filler.activateFiller;\n\nfootSwitchONS(CLK := iFootSwitch);\n_bagGrabbedONS(CLK := _auxIOPhysical.bagGrabbed OR _auxIORemote.bagGrabbed);\n\nIF state.head <> HEAD_STATES.Idle AND HMIData.initiateCycle THEN\n\tHMIData.initiateCycle := FALSE;\nEND_IF\nCASE state.head OF\n    HEAD_STATES.Idle :                              // Start cycle if enabled\n                                                    IF (startCycle AND (filler.cycleBaggerToActivateFiller.active OR NOT filler.activateFiller)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (HMIData.factoryTestMode AND (HMIData.bagsMade.count < 1000)) AND (factoryTestModeKeepCycling AND NOT LPA.Q)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (startCycleReqFromPalmButtonsONS.OSR) AND (filler.cycleBaggerToActivateFiller.active OR NOT filler.activateFiller)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (HMIData.initiateCycle) AND (filler.cycleBaggerToActivateFiller.active OR NOT filler.activateFiller)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (filler.cycleBagRequest AND HMIData.autoEnable)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (filler.cycleBagRequest AND NOT HMIData.autoEnable) AND (footSwitchONS.OSR OR HMIData.initiateCycle OR startCycleReqFromPalmButtonsONS.OSR)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR (autoModeKeepCyclingTimer.Q)\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR footSwitchONS.OSR AND (filler.cycleBaggerToActivateFiller.active OR NOT filler.activateFiller))\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND (NOT HMIData.sealBarNotAtTemperature.active OR HMIData.enableDryCycle)\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT barcodeVerificationFailed.active\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.faultActive \n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.stopMachine \n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.baggerInhibited.active\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.batchCountDone.active\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT setPassthroughPB\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT printAndApply.clearOutBaggerIndicaiton\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND readyToRun \n\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tposInhibit := TRUE;\n                                                        startCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcycleTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.initiateCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.SealAndSeparateBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenFingers.CheckIfBagGrabbed(FALSE) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpened := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.baggerProfileSelection = BaggerProfile.EQ22085 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF _bagGrabbedONS.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.PrepareForAutomatedBagRemoval;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT Globals.passthroughChangedFromJog AND HMIData.jobLoaded THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.jobLoaded := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    IF (TO_DINT(HMIData.passthroughSetting*1000) <> TO_DINT(passthroughSettingLast*1000)) OR (Globals.passthroughChangedFromJog AND HMIData.jobLoaded) AND NOT pressureBarMotor.Faulted AND NOT pressureBarMotor.HomeRequired THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGlobals.passthroughChangedFromJog := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.jobLoaded := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassthroughSetting := HMIData.passthroughSetting;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassthroughSettingLast := HMIData.passthroughSetting;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (NOT (pressureBarMotor.HomeRequired OR pressureBarMotor.Faulted))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ((NOT motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.homeRequiredIndication OR motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.Faulted) OR NOT motorizedSealFlatteners.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND readyToRun \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND NOT HMIData.faultActive\n\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thmiLight.TurnOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.stopMachine THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thomeJawPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstartCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.initiateCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tautoModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thmiLight.TurnOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfiller.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tezFeed.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.sealBarNotAtTemperature.active THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tautoModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpened THEN\n                                                        IF NOT bagOpenFingers.CheckIfBagGrabbed(FALSE) AND NOT HMIData.enableDryCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topenedBagWasRemoved.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpened := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tposInhibitTON(IN:= posInhibit AND NOT pressureBar.jawClear, PT:= T#500MS);\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF posInhibitTON.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tposInhibit:= FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t{region:'Service'}\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF setPassthroughPB AND NOT homeJawPB THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thmiLight.BlinkSlow();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.passthroughPosition < HMIData.passthroughSetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.MoveToPositionTorque(2,1000,1000,2000,125);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.MovePassthrough;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF homeJawPB THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thmiLight.BlinkSlow();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.PassthroughPreCheck;\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.loadPlateService.retractCommand OR HMIData.rearLoadPlateService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.moveToDischargePos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.loadPlateService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.rearLoadPlateService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.loadPlateService.extendCommand OR HMIData.rearLoadPlateService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.moveToLoadingPos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.loadPlateService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.rearLoadPlateService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.perfBreakerService.exhaustCommand  AND HMIData.sealAreaOptionSelection = (SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker OR SealAreaOptionSelectionEnum.PerfBreaker)  THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreaker.Exhaust();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tposInhibit:= TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.perfBreakerService.exhaustCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.perfBreakerService.retractCommand  AND HMIData.sealAreaOptionSelection = (SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker OR SealAreaOptionSelectionEnum.PerfBreaker) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreaker.MoveUp();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tposInhibit:= TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.perfBreakerService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.perfBreakerService.extendCommand  AND HMIData.sealAreaOptionSelection = (SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker OR SealAreaOptionSelectionEnum.PerfBreaker) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreaker.MoveDown();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tposInhibit:= TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.perfBreakerService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.loadShelfService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.moveToDischargePos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.loadShelfService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.loadShelfService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.moveToLoadingPos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.loadShelfService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.forwardLoadPlateService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.moveToDischargePos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.forwardLoadPlateService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.forwardLoadPlateService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.moveToLoadingPos();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.forwardLoadPlateService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBD.CloseIBD();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.IBDService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.IBDService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBD.OpenIBD();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.IBDService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.funnelService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Open();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.funnelService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                                      \n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.funnelService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.funnelService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t \t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.pressureBarService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.OpenJaw();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.pressureBarService.extendCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.pressureBarService.retractCommand THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.CloseJaw();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.pressureBarService.retractCommand := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.lpaServicePulse THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.DwellSetting := TO_DINT(HMIData.lpaDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.lpaServicePulse := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.lpaServiceOn THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.lpaServiceOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.lpaServiceOff THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.lpaServiceOff := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.vacuumServiceOn THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.vacuumServiceOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.vacuumServiceOff THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.vacuumServiceOff := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.hpaServicePulse THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thpa.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.hpaServicePulse := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF hpaServiceOnONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHPA.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF hpaServiceOnONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.exitConveyorStartDwell THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.exitConveyorStartDwell := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.exitConveyorStart OR exitConveyorJogONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.exitConveyorStart := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.exitConveyorStop OR exitConveyorJogONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.exitConveyorStop := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.externalExitConveyorStartDwell THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.externalExitConveyorStartDwell := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.externalExitConveyorStart OR externalExitConveyorJogONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.externalExitConveyorStart := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.externalExitConveyorStop OR externalExitConveyorJogONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.externalExitConveyorStop := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.sealBarServiceCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.PT := TO_TIME(HMIData.sealBarDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT sealTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarServiceCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.sealBarServiceExtend THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarServiceExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.sealBarServiceRetract THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarServiceRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.bagOpenFingersServiceGrab THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Grab();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFingersServiceGrab := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.bagOpenFingersServiceRelease THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFingersServiceRelease := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t{endregion:'Service'}\n                                                    \n\t\t\t\t\t\t\t\t\t\t\t\t\t                                                         \n                                                    // Fault if labels stack up in queue \n                                                    IF (printerDataReady AND HMIData.labelsQueuedUpFaultEnable) THEN\n                                                        labelsQueuedUpFault.faultTrigger := TRUE;    \n                                                    ELSE\n                                                        labelsQueuedUpFault.faultTrigger := FALSE;\n                                                    END_IF              \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n    HEAD_STATES.SealAndSeparateBag :                // Begin Seal and Separate State machine\n\t\t// Begin Seal and Separate State machine\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF printAndApply.enable AND bagOpened THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprintAndApply.BeginCycle();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tfiller.BaggerCycleInitiated();\n                                                    HMIData.inCycle := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.airFilterClean.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.baggerCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF funnel.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n        \t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.SealingAndSeparatingBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.Shake;\n                                                    \n    HEAD_STATES.SealingAndSeparatingBag :            IF state.sb.sealSeparate = SEAL_SEPARATE_STATES.Done THEN\n                                                        state.head := HEAD_STATES.SealedAndSeparatedBag;\n                                                        state.sb.sealSeparate := SEAL_SEPARATE_STATES.Idle;\n                                                    END_IF    \n\n    HEAD_STATES.SealedAndSeparatedBag :             state.head := HEAD_STATES.ReleaseAndFeedBag;                                    \n                                                    \n    HEAD_STATES.ReleaseAndFeedBag :                    // Open the jaw and release the bag\n                                                    state.sb.releaseFeed := RELEASE_FEED_STATES.WaitForPressureBarOpenTimer;\n                                                    state.head := HEAD_STATES.ReleasingAndFeedingBag;\n                                                    \n    HEAD_STATES.ReleasingAndFeedingBag :            // \n                                                    IF state.sb.releaseFeed = RELEASE_FEED_STATES.Done THEN\n                                                       state.head := HEAD_STATES.ReleasedAndFedBag;\n                                                       state.sb.releaseFeed := RELEASE_FEED_STATES.Idle;\n                                                    END_IF\n                                                    \n    HEAD_STATES.ReleasedAndFedBag :                    // \n                                                    {warning 'TODO: change this counting logic to account for MSF'}\n                                                    IF HMIData.batchEnable THEN\n                                                        HMIData.batchCount := HMIData.batchCount + 1;\n                                                    END_IF\n  \n                                                    IF HMIData.enableDryCycle THEN\n                                                        Globals.dryCycleCount := Globals.dryCycleCount + 1;     \n                                                    ELSE\n                                                        Globals.bagsMadeCount := Globals.bagsMadeCount + 1; \n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen THEN\n                                                    \tstate.head := HEAD_STATES.OpenBag;\n                                                    ELSE\n                                                        state.head := HEAD_STATES.FinishCycle;\n                                                    END_IF\n                                                                   \n    HEAD_STATES.OpenBag :                            // Close jaw to grab the bag\n                                                    state.sb.openBag := BAG_OPEN_ASSIST_STATES.MoveJawIn;\n                                                    state.head := HEAD_STATES.OpeningBag;\n                                                    \n                                                    \n    HEAD_STATES.OpeningBag :                        // Open jaw and grab onto the bag\n                                                    IF state.sb.openBag = BAG_OPEN_ASSIST_STATES.Done THEN\n                                                        state.head := HEAD_STATES.OpenedBag;\n                                                        state.sb.openBag := BAG_OPEN_ASSIST_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF state.sb.openBag = BAG_OPEN_ASSIST_STATES.FeedNewBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.SealAndSeparateBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.Idle;\n                                                    END_IF\n                                                    \n    HEAD_STATES.OpenedBag :                            // Move fingers in and to bag holding and reset cycle\n                                                    IF ((motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersIn AND HMIData.funnelFactorySelection = FunnelSelection.BagLoadingTray)\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR NOT motorizedSealFlatteners.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.FinishCycle;\n                                                    END_IF\n\tHEAD_STATES.FinishCycle :\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Start;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.FinishingCycle;\n\tHEAD_STATES.FinishingCycle : \t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF state.sb.finishCycle = FINISH_CYCLE_STATES.Done THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.FinishedCycle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\tHEAD_STATES.FinishedCycle :\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\tHMIData.bagsMade.Increment();\n\t\t\t\t\t\t\t\t\t\t\tHMIData.resettableBagsMade.Increment();\n                                            state.head := HEAD_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tfiller.BaggerCycledAndReady();\n\t\t\t\t\t\t\t\t\t\t\tcycleTime := (TIME_TO_REAL(cycleTimer.ET) / 1000); \n\t\t\t\t\t\t\t\t\t\t\tcycleTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tIF HMIData.averageCycleTime = 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\tHMIData.averageCycleTime := cycleTime;\n\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\tHMIData.averageCycleTime := (cycleTime + HMIData.averageCycleTime) / 2;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tHMIData.inCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tIF HMIData.autoEnable AND NOT HMIData.stopMachine AND NOT HMIData.fillerEnable THEN\n\t\t\t\t\t\t\t\t\t\t\t\tautoModeKeepCycling := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tIF HMIData.factoryTestMode AND NOT HMIData.stopMachine THEN\n\t\t\t\t\t\t\t\t\t\t\t\tIF (HMIData.bagsMade.count >= 1000) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.factoryTestMode := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\nHEAD_STATES.PassthroughPreCheck :\n\t\t\t\t\t\t\t\t\t\tIF HMIData.sealAreaOptionSelection = (SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker OR SealAreaOptionSelectionEnum.PerfBreaker) THEN\n\t\t\t\t\t\t\t\t\t\t\tposInhibit := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tIF NOT pressureBar.jawClear AND HMIData.sealAreaOptionSelection = (SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker OR SealAreaOptionSelectionEnum.PerfBreaker) THEN\n\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.MoveJawClear();\n\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tIF pressureBar.jawClear THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t//waitPassthroughMove:= FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.StartHoming;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.StartHoming;\n\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\n    HEAD_STATES.StartHoming :            // \n\t\t\t\t\t\t\t\t\t\t\tIF allMotorCommsGood THEN\n\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.faults.notHomed.Ack();\n\t\t\t\t\t\t\t\t\t\t\t\tIF pressureBar.homeRequired THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.HomeNow();\n\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.OpenJaw();\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\tIF IBD.homeRequired THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT frontLoadPlate.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.moveToDischargePos();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIBD.HomeNow();\n\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\tIBD.OpenIBD();\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                            \tstate.head := HEAD_STATES.Homing; \n\t\t\t\t\t\t\t\t\t\t\tEND_IF                             \n    \n    HEAD_STATES.Homing :                // \n\t\t\t\t\t\t\t\t\t\t\tIF pressureBar.pressureBarOpen AND (NOT IBD.Ready OR NOT IBD.enable) THEN\n                                                state.head := HEAD_STATES.HomingComplete;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tIF motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.HomeRequired AND ((*motorizedSealFlatteners.enable*)HMIData.sealFlattenersInUse OR HMIData.sealAreaOptionSelection = (SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker OR SealAreaOptionSelectionEnum.PerfBreaker)) AND pressureBar.jawClear   THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.HomeNow();\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsfVerticalAxis.Retract();\n\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreaker.MoveUp();\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t   \n                                            END_IF\n                                            \n    HEAD_STATES.HomingComplete :            // \n\t\t\t\t\t\t\t\t\t\t\tIF (NOT motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.HomeRequired) OR NOT motorizedSealFlatteners.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\thomeJawPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.sealFlattenersVerticalAxis.Extend();\n\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.MovePassthrough;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                           \n    HEAD_STATES.MovePassthrough :           // \n                                            pressureBar.OpenJaw();\n\t\t\t\t\t\t\t\t\t\t\tIBD.OpenIBD();\n                                            state.head := HEAD_STATES.MovingPassthrough;\n    \n    HEAD_STATES.MovingPassthrough :    \t\tIF pressureBar.pressureBarOpen AND (IBD.IBDOpen OR HMIData.independentBagDeflatorSelection = BagDeflatorSelection.NotInstalled) THEN\n                                                state.head := HEAD_STATES.MovedPassthrough;     \n                                            END_IF\n                                            \n    HEAD_STATES.MovedPassthrough :          // \n                                            state.head := HEAD_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t//motorizedSealFlatteners.sealFlattenersHorizontalAxisMotor.MoveToPositionTorque(HMIData.bagWidth,1000,1000,1000,125);\n\t\t\t\t\t\t\t\t\t\t\tIF motorizedSealFlatteners.enable AND HMIData.sealFlattenersInUse THEN\n\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToStartPosition();\n\t\t\t\t\t\t\t\t\t\t\tELSIF motorizedSealFlatteners.enable AND NOT HMIData.sealFlattenersInUse THEN\n\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToBagFeed();\n                                            END_IF\n                                                    \n\tHEAD_STATES.PrepareForAutomatedBagRemoval:\n\t\t//\n\t\tstate.head := HEAD_STATES.PreparingForAutomatedBagRemoval;\n\t\tstate.sb.automation := AUTOMATION_STATES.MoveSealFlattenersUp;\n\t\t\n\tHEAD_STATES.PreparingForAutomatedBagRemoval:\n\t\t//\n\t\tIF state.sb.automation = AUTOMATION_STATES.Done THEN\n\t\t\t_auxIOPhysical.ResetReadyForGrab();\n\t\t\t_auxIORemote.ResetReadyForGrab();\n\t\t\tstate.head := HEAD_STATES.PreparedForAutomatedBagRemoval;\n\t\tEND_IF\n\t\n\tHEAD_STATES.PreparedForAutomatedBagRemoval:\n\t\t//\n\t\tstate.head := HEAD_STATES.Idle;\n\t\tstate.sb.automation := AUTOMATION_STATES.Idle;\n                                                    \n    HEAD_STATES.Fault :                     hmiLight.TurnOff();\n\t\t\t\t\t\t\t\t\t\t\tHMIData.inCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tcycleTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tbagDelivery.PointToPointOnFault();\n\t\t\t\t\t\t\t\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tstate.sb.releaseFeed := RELEASE_FEED_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\toVacOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tfiller.Reset();\n\t\t\t\t\t\t\t\t\t\t\tfunnel.Reset();\n\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.Reset();\n\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.Reset();\n\t\t\t\t\t\t\t\t\t\t\toRunPrinterRibbonUnwindMotor := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tsetPassthroughPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\thomeJawPB := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tstartCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tHMIData.initiateCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tfactoryTestModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tautoModeKeepCycling := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpressureBarCloseDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tposInhibit := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t//perfBreaker.MoveUp();\n\t\t\t\t\t\t\t\t\t\t\t//msfVerticalAxis.Retract();\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\nEND_CASE\n\nCASE state.sb.sealSeparate OF\n\tSEAL_SEPARATE_STATES.Shake:\t\t\t\t\t\t\n\t\t//\n\t\tIF loadShelf.shakeStart = SHAKER_START_SELECTION.CycleStart OR\n   \t\t   loadShelf.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   loadShelf.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF rearLoadPlate.shakeStart = SHAKER_START_SELECTION.CycleStart OR\n   \t\t   rearLoadPlate.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   rearLoadPlate.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF frontLoadPlate.shakeStart = SHAKER_START_SELECTION.CycleStart OR\n   \t\t   frontLoadPlate.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   frontLoadPlate.Shake();\n\t\tEND_IF\n\n\t\t//\n\t\tIF rearLoadPlate.Shaking OR frontLoadPlate.Shaking OR loadShelf.Shaking THEN\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.Shaking;\n\t\tELSIF enableIBDDeflate THEN\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.BringInIBD;\n\t\tELSE\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_SEPARATE_STATES.Shaking:\t\t\t\t    //\n\t\tIF NOT frontLoadPlate.Shaking AND NOT rearLoadPlate.Shaking AND NOT loadShelf.Shaking THEN\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.PrepareToFeedToSeal;\n\t\tEND_IF\n\t\t\n\tSEAL_SEPARATE_STATES.PrepareToFeedToSeal:\n\t\tIF HMIData.feedToSealInUse THEN\n\t\t\tIF enableBagOpen THEN\n\t\t\t\tbagOpenFingers.Release();\n\t\t\tEND_IF\n\t\t\t\t\tmotorizedSealFlatteners.AutoMovetoFeedToSeal();\n\t\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.PreparingToFeedToSeal;\t\n\t\tELSE\n\t\t\t//\n\t\t\tIF enableIBDDeflate THEN\n\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.BringInIBD;\n\t\t\tELSE\n\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\t\tEND_IF\t\n\t\tEND_IF\n\t\n\tSEAL_SEPARATE_STATES.PreparingToFeedToSeal:\n\t\tIF motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle THEN\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.PreparedToFeedToSeal;\n\t\tEND_IF\n\t\n\tSEAL_SEPARATE_STATES.PreparedToFeedToSeal:\n\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.FeedToSeal;\n\n\tSEAL_SEPARATE_STATES.FeedToSeal:\n\t\tIF HMIData.feedToSealInUse THEN\n\t\t\tbagDelivery.AutoFeedToSeal();\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.FeedingToSeal;\t\t\n\t\tELSE\n\t\t\t//\n\t\t\tIF enableIBDDeflate THEN\n\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.BringInIBD;\n\t\t\tELSE\n\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\t\tEND_IF\n\t\tEND_IF\n\tSEAL_SEPARATE_STATES.FeedingToSeal:\n\t\t//\n\t\tIF bagDelivery.state = BAG_DELIVERY_STATES.Ready THEN\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.FedToSeal;\n\t\tEND_IF\n\t\n\tSEAL_SEPARATE_STATES.FedToSeal:\n\t\t//\n\t\t// motorizedSealFlatteners.AutoEnableMotion();\n\t\tIF enableIBDDeflate THEN\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.BringInIBD;\n\t\tELSE\n\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\tEND_IF\t\t\t\t\t\t\t\t\t\t\t\n \n\tSEAL_SEPARATE_STATES.BringInIBD: \t\t\t\t// Bring in IBD if enabled\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableIBDDeflate THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBD.CloseIBD();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.WaitForJawCloseDelay;\n\t\n\tSEAL_SEPARATE_STATES.WaitForJawCloseDelay: \t    // Wait for jaw close delay. \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF pressureBar.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBarCloseDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF (pressureBarCloseDelay.Q OR HMIData.pressureBarCloseDelay = 0) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//AND (funnel.closed OR NOT funnel.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBarCloseDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    ELSE \n                                                        state.sb.sealSeparate := SEAL_SEPARATE_STATES.ReverseBag;\n                                                    END_IF\n        \n    SEAL_SEPARATE_STATES.MoveJawIn:                 // Perform actions as enabled - close jaw and move flatteners out. If jaw is disabled then go right to reverse bag\n                                                    IF motorizedSealFlatteners.enable THEN\n                                                        motorizedSealFlatteners.AutoMoveOut();\n                                                    END_IF\n                                                \tsealTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.CloseJaw();\n                                                    state.sb.sealSeparate := SEAL_SEPARATE_STATES.MovingJawIn;\n                                                    \n    SEAL_SEPARATE_STATES.MovingJawIn :              // If Jaw is in and flatteners out then move on\n                                                    IF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersOut OR NOT motorizedSealFlatteners.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR  (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle AND MSFatBagFeedSetpoint)\n                                                        AND (pressureBar.clamped OR NOT pressureBar.enable)\n                                                        THEN\n                                                            state.sb.sealSeparate := SEAL_SEPARATE_STATES.MovedJawIn;    \n                                                    END_IF\n                                                                \n    SEAL_SEPARATE_STATES.MovedJawIn :               // Will add sealing logic here\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF iJawClampsRetracted OR NOT pressureBar.enable THEN\n                                                    \tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.ReverseBag;\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n    SEAL_SEPARATE_STATES.ReverseBag :               // Reverse bag if bag delivery enabled, otherwise open jaw\n\t\t\t\t\t\t\t\t\t\t\t\t\t//IBD.OpenFull();\n                                                    IF bagDelivery.enable THEN\n                                                        bagDelivery.AutoReverseBag();\n                                                        state.sb.sealSeparate := SEAL_SEPARATE_STATES.ReversingBag;\n                                                    ELSE state.sb.sealSeparate := SEAL_SEPARATE_STATES.Done;    \n                                                    END_IF\n                                                                    \n    SEAL_SEPARATE_STATES.ReversingBag :             // \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT HMIData.separateBeforeSeal THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.PT := TO_TIME(HMIData.sealBarDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT sealTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := TRUE; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := FALSE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\n                                                    IF ((motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersOut OR NOT motorizedSealFlatteners.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR  (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle AND MSFatBagHoldSetpoint)//MSFatBagFeedSetpoint)\n                                                        AND (pressureBar.clamped OR NOT pressureBar.enable)\n                                                        AND (bagDelivery.state = BAG_DELIVERY_STATES.ReverseDone OR NOT bagDelivery.enable))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (sealTimer.Q OR HMIData.separateBeforeSeal)\n                                                        THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT HMIData.separateBeforeSeal THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := FALSE;\n                                                            state.sb.sealSeparate := SEAL_SEPARATE_STATES.Reversedbag;\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n    SEAL_SEPARATE_STATES.Reversedbag :              // \n\t\t\t\t\t\t\t\t\t\t\t\t\t//Print mid cycle if needed.\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF zebraPrinter.enable AND HMIData.printerCycleSelection = PrinterCycleSelection.PrintMidCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.WaitForPrinter;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    state.sb.sealSeparate := SEAL_SEPARATE_STATES.SealBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_SEPARATE_STATES.SealBag:\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.separateBeforeSeal THEN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.PT := TO_TIME(HMIData.sealBarDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT sealTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarExtend := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toSealBarRetract := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.sealBarCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.Done;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.sealSeparate := SEAL_SEPARATE_STATES.Done;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF                      \n    SEAL_SEPARATE_STATES.Done:    \n\t\t\t\t\t\t\t\t\t\t\t\t\t                    //\n    SEAL_SEPARATE_STATES.Fault:\t\t\t\t\t\t//\nEND_CASE\n\n_waitForPressureBarOpenDelay(IN := state.sb.releaseFeed = RELEASE_FEED_STATES.WaitForPressureBarOpenTimer, PT := TO_TIME((HMIData.pressureBarOpenDelay * 1000.0)));\n\nCASE state.sb.releaseFeed OF\n    RELEASE_FEED_STATES.Idle :  \n                      //\n    \n\tRELEASE_FEED_STATES.WaitForPressureBarOpenTimer : \t\t// Adding in Jaw Open Delay\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF _waitForPressureBarOpenDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.releaseFeed := RELEASE_FEED_STATES.MoveJawOutAndDropBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n                                                   \n    RELEASE_FEED_STATES.MoveJawOutAndDropBag :        // \n                                                    IF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersOut OR NOT motorizedSealFlatteners.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle AND MSFatBagFeedSetpoint)\n                                                        AND (pressureBar.clamped OR NOT pressureBar.enable)\n                                                        AND ((bagDelivery.state = BAG_DELIVERY_STATES.ReverseDone) OR HMIData.enableDryCycle)\n                                                        OR (bagDelivery.state =  BAG_DELIVERY_STATES.WaitingForPrinter AND zebraPrinter.enable)\n                                                        OR NOT bagDelivery.enable\n                                                        THEN\n                                                            IF (*motorizedSealFlatteners.enable*)HMIData.sealFlattenersInUse THEN\n                                                                motorizedSealFlatteners.AutoMoveToClearance();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//motorizedSealFlatteners.AutoMoveToBagHolding();\n                                                            ELSIF (HMIData.mailerMaterial = MAILER_MATERIAL.paper) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreaker.Retract(); \n                                                            END_IF\n                                                            \n                                                            IF enableBagOpen THEN\n                                                                pressureBar.OpenJawForBagFeed();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.OpenJaw();\n                                                            END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                            //IBD.OpenFull();\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen THEN\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableIBDEject THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBD.CloseIBD();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF rearLoadPlate.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trearLoadPlate.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF frontLoadPlate.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrontLoadPlate.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF loadShelf.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tloadShelf.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF TO_DINT(HMIData.exitConveyorDwell) <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRun.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF TO_DINT(HMIData.externalExitConveyorDwell) <> 0 AND NOT printAndApply.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texternalExitConveyorRun.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.lpaBagEjectAssistEnable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBD.OpenFull();\n                                                           bagDropTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   state.sb.releaseFeed := RELEASE_FEED_STATES.MovingJawOutAndDroppingBag;\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t RELEASE_FEED_STATES.MovingJawOutAndDroppingBag :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// If printer is enabled then perform printer operation of bag delivery, otherwise just feed new bag out.\n                                                        // In the case that bagDelivery is disabled then we're done with release and feed\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersOut \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR MSFatOutSetpoint OR MSFatBagFeedSetpoint) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (*motorizedSealFlatteners.enable*)HMIData.sealFlattenersInUse THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToClearance();\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen AND pressureBar.actualPosition >= 0.5 THEN\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                        IF bagDropTimer.Q \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (perfBreaker.retractedStatus OR NOT (HMIData.mailerMaterial = MAILER_MATERIAL.paper))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersToBagFeed OR MSFatBagFeedSetpoint OR NOT motorizedSealFlatteners.enable )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN   \n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagDelivery.enable AND NOT (zebraPrinter.enable) THEN // No Print Required\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDelivery.AutoFeedBagOut();\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n                                                                state.sb.releaseFeed := RELEASE_FEED_STATES.MovingJawOutAndFeedingBag;\n                                                            ELSIF (bagDelivery.enable AND zebraPrinter.enable) THEN // Print Required\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.printerCycleSelection = PrinterCycleSelection.PrintWhileFeeding THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDelivery.AutoWaitForPrinter();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.releaseFeed := RELEASE_FEED_STATES.WaitForPrinter;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.printerCycleSelection = PrinterCycleSelection.PrintMidCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t IF state.sb.printOutOfCycle = PRINT_OUT_OF_CYCLE_STATES.Done THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDelivery.AutoFeedBagOut();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.releaseFeed := RELEASE_FEED_STATES.MovingJawOutAndFeedingBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDelivery.AutoFeedBagOut();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.releaseFeed := RELEASE_FEED_STATES.MovingJawOutAndFeedingBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                \n\n                                                            ELSE \n                                                                state.sb.releaseFeed := RELEASE_FEED_STATES.Done;\n                                                            END_IF\t\t\t\t\t\t\t\t\t\t\t\t\n    \t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    RELEASE_FEED_STATES.WaitForPrinter :            // Data Ready means the printer has a label and we're all set to print\n                                                    IF zebraPrinter.state = PRINTER_STATES.DataReady THEN\n                                                        IF HMIData.lpaDuringBagFeedEnable THEN\n                                                            LPA.ManualOn();\n                                                        END_IF\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                        state.sb.releaseFeed := RELEASE_FEED_STATES.FeedToOffset;\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen AND pressureBar.actualPosition >= 0.5 THEN\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n \t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n                                                    \n    RELEASE_FEED_STATES.FeedToOffset :              // This starts feeding to the print offset\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersToBagFeed OR NOT motorizedSealFlatteners.enable OR MSFatBagFeedSetpoint) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDelivery.AutoPrinterReady();\n                                                    \tstate.sb.releaseFeed := RELEASE_FEED_STATES.FeedingToOffset;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen AND pressureBar.actualPosition >= 0.5 THEN\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n \t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n                                                    \n                                                        \n    RELEASE_FEED_STATES.FeedingToOffset :            // Once offset done start printing\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.printOutOfCycleEnable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagDelivery.state = BAG_DELIVERY_STATES.CreatedSlack THEN  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.releaseFeed := RELEASE_FEED_STATES.StartPrinting;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF     \n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagDelivery.state = BAG_DELIVERY_STATES.FedToPrintOffset THEN  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.releaseFeed := RELEASE_FEED_STATES.StartPrinting;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF     \n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen AND pressureBar.actualPosition >= 0.5 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t                                     \n    \n    RELEASE_FEED_STATES.StartPrinting :             // Printer starts print cycle and bag delivery starts moving at print speed\n\t\t\t\t\t\t\t\t\t\t\t\t\tzebraPrinter.AutoPrintNow();\n                                                    state.sb.releaseFeed := RELEASE_FEED_STATES.SendPrintSignal;                                            \n\n    RELEASE_FEED_STATES.SendPrintSignal:            // \n              \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen AND pressureBar.actualPosition >= 0.5 THEN\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n \t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF zebraPrinter.printHeadDebounced THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDelivery.AutoStartPrintFeed();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tzebraPrinter.AutoSendPrintSignal();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbarcodeVerifier.Trigger();\n                                                        state.sb.releaseFeed := RELEASE_FEED_STATES.Printing;\n                                                    END_IF                                        \n\n    RELEASE_FEED_STATES.Printing :                // \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen AND pressureBar.actualPosition >= 0.5 THEN\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n \t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n                                                    IF zebraPrinter.state = PRINTER_STATES.DonePrinting THEN\n                                                        state.sb.releaseFeed := RELEASE_FEED_STATES.StopPrinting;\n                                                    END_IF\n                                                    \n    RELEASE_FEED_STATES.StopPrinting :                // Tell bag delivery it's okay to feed out the rest of the bag and the printer that it can prep itself for the next print\n                                                    bagDelivery.AutoPrinterDone();\n                                                    zebraPrinter.AutoAckPrintDone();\n                                                    state.sb.releaseFeed := RELEASE_FEED_STATES.MovingJawOutAndFeedingBag;\n                                                                                                            \n    RELEASE_FEED_STATES.MovingJawOutAndFeedingBag :    // \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableBagOpen AND pressureBar.actualPosition >= 0.5 THEN\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n \t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (bagDelivery.state = BAG_DELIVERY_STATES.Ready OR NOT bagDelivery.enable)\n                                                        AND (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersToBagFeed OR NOT motorizedSealFlatteners.enable OR NOT HMIData.sealFlattenersInUse) \n                                                        AND (pressureBar.pressureBarOpen OR NOT pressureBar.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                        THEN\n                                                            state.sb.releaseFeed := RELEASE_FEED_STATES.MovedJawOutAndFedBag;\n                                                    END_IF\n                                                    \n    RELEASE_FEED_STATES.MovedJawOutAndFedBag :      // Wait until bag is fed out before triggering barcode fail.\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF barcodeVerifier.barcodeFault THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbarcodeVerificationFailed.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Trigger end cycle print\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.printerCycleSelection = PrinterCycleSelection.PrintEndCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.WaitForPrinter;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF enableIBDDeflate OR enableIBDEject THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIBD.OpenIBD();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.releaseFeed := RELEASE_FEED_STATES.Done;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HPA.DwellSetting <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHPA.Trigger();\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n    RELEASE_FEED_STATES.Done :\t\t\t\t\t\t//\n    RELEASE_FEED_STATES.Fault :\t\t\t\t\t\t//\nEND_CASE\n\nCASE state.sb.openBag OF\n    BAG_OPEN_ASSIST_STATES.Idle:                    // \n                                                    bagOpenCheckDelay.IN := FALSE;\n                                                                         \n    BAG_OPEN_ASSIST_STATES.MoveJawIn :              // Close jaw against bag. In the future we may also start vacuum here\n                                                    pressureBar.CloseJawNoLatch();\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t//oVacOn := TRUE; // Hard coded for now, this is vacuum\n                                                    state.sb.openBag := BAG_OPEN_ASSIST_STATES.MovingJawIn;        \n                                                    \n    BAG_OPEN_ASSIST_STATES.MovingJawIn :            // Move on once jaw is closed\n                                                    IF pressureBar.iPressureBarClosed OR NOT pressureBar.enable THEN\n                                                        state.sb.openBag := BAG_OPEN_ASSIST_STATES.MovedJawIn;        \n                                                    END_IF\n                                                    \n    BAG_OPEN_ASSIST_STATES.MovedJawIn :             // Hold onto the bag with vacuum to build suction\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.mailerMaterial = MAILER_MATERIAL.paper THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreaker.MoveDown();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.enableDryCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.MoveJawOut;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvacuumHoldTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := TRUE; // Hard coded for now, this is vacuum\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF vacuumHoldTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvacuumHoldTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.MoveJawOut;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF            \n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                   \n    BAG_OPEN_ASSIST_STATES.MoveJawOut :             // Open the jaw and move seal flatteners in and to bag holding\n                                                    (*IF HMIData.enablePerfBreaker AND NOT (*motorizedSealFlatteners.enable*)HMIData.sealFlattenersInUse  THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreaker.Extend();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF*)\n\t\t\t\t\t\t\t\t\t\t\t\t\tpressureBar.OpenJaw();\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.mailerMaterial = MAILER_MATERIAL.poly THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveIn();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    state.sb.openBag := BAG_OPEN_ASSIST_STATES.MovingJawOutAndGrab;\n                                                                                             \n    BAG_OPEN_ASSIST_STATES.MovingJawOutAndGrab :    // Once everything that is enabled is homed finish cycle \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF pressureBar.actualPosition > grabDistance THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Grab();\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingerDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.CheckForSuccessfulBagGrab;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t(*bagOpenFingerDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenFingerDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Grab();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingerDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.CheckForSuccessfulBagGrab;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF*)\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\n\tBAG_OPEN_ASSIST_STATES.CheckForSuccessfulBagGrab : \t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenRetryCount < bagOpenRetrySetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenCheckDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenCheckDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenFingers.CheckIfBagGrabbed(TRUE) OR HMIData.enableDryCycle THEN // This method checks to see if the bag is grabbed and returns true if so.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.mailerMaterial = MAILER_MATERIAL.paper THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t motorizedSealFlatteners.AutoMoveIn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.OpenBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.BagFailedToOpen;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenCheckDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\tBAG_OPEN_ASSIST_STATES.BagFailedToOpen :\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (HMIData.mailerMaterial = MAILER_MATERIAL.paper) AND HMIData.enablePaperBagger THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//perfBreaker.MoveDown();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenFingers.Release();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := bagOpenRetryCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenRetryCount < bagOpenRetrySetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF HMIData.bagOpenFeedNewBagCount < HMIData.bagOpenFeedNewBagSetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFeedNewBagCount := HMIData.bagOpenFeedNewBagCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveOut();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.FeedNewBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//IF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle OR NOT motorizedSealFlatteners.enable) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFailedToOpen.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := 0; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFeedNewBagCount := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagsRejectedTotal.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGlobals.rejectedBagCount := Globals.rejectedBagCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tBAG_OPEN_ASSIST_STATES.OpenBag :\t\t\t\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Move flatteners now if no funnel. Otherwise let the funnel move the flatteners when done\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF MSFatInSetpoint AND NOT funnel.enable THEN \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    \tIF //MSFatBagHoldSetpoint THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovingFlattenersDown) OR NOT HMIData.sealFlattenersInUse THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.bagOpening; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_OPEN_ASSIST_STATES.BagOpening :\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    \t//IF MSFatBagHoldSetpoint THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.bagOpened; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_OPEN_ASSIST_STATES.BagOpened :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpened := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Move flatteners now if no funnel. Otherwise let the funnel move the flatteners when done\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    \t//IF MSFatBagHoldSetpoint THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagOpenFeedNewBagCount := 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab :\t\t// \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF (pressureBar.pressureBarOpen OR NOT pressureBar.enable) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ((motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle OR NOT motorizedSealFlatteners.enable)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersIn AND HMIData.funnelFactorySelection = FunnelSelection.BagLoadingTray))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.MovedJawOut;        \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_OPEN_ASSIST_STATES.MovedJawOut :                // \n\t\t\t\t\t\t\t\t\t\t\t\t\t\toVacOn := FALSE; \t\t// Hard coded for now, this is vacuum\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.openBag := BAG_OPEN_ASSIST_STATES.Done;\n                               \n\tBAG_OPEN_ASSIST_STATES.FeedNewBag :   \t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle OR NOT motorizedSealFlatteners.enable) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.head := HEAD_STATES.SealAndSeparateBag;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t                        \n    BAG_OPEN_ASSIST_STATES.Done:                    //                                             \n    BAG_OPEN_ASSIST_STATES.Fault:                   //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\nEND_CASE\n\nCASE state.sb.finishCycle OF\n\tFINISH_CYCLE_STATES.Start :\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF funnel.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.OpenFunnel;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF enableBagOpen THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Shake;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF motorizedSealFlatteners.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.BringSealFlattenersInAndDown;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Shake;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.DwellSetting := TO_DINT(HMIData.lpaDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF LPA.DwellSetting <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.OpenFunnel :\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.DwellSetting := TO_DINT(HMIData.lpaDwell * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF LPA.DwellSetting <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLPA.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Open();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.OpeningFunnel;\n\t\n\tFINISH_CYCLE_STATES.OpeningFunnel :\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF funnel.opened THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.OpenedFunnel;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.OpenedFunnel :\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//IF enableBagOpen THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF iLeftFingerBagPresent AND iRightFingerBagPresent THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//IF motorizedSealFlatteners.enable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\tstate.sb.finishCycle := FINISH_CYCLE_STATES.BringSealFlattenersToBagHolding;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//ELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Shake;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpened := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagOpenRetryCount < bagOpenRetrySetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := bagOpenRetryCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.ClosingFunnelForRetry;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunnel.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagOpenRetryCount := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFailedToOpen.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagsRejectedTotal.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Shake;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\n\tFINISH_CYCLE_STATES.ClosingFunnelForRetry :\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF funnel.closed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Start;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\tFINISH_CYCLE_STATES.BringSealFlattenersInAndDown :\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToHandLoad();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.BringingSealFlattenersInAndDown;\n\t\n\tFINISH_CYCLE_STATES.BringingSealFlattenersInAndDown :\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.SealFlattenersInAndDown;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.SealFlattenersInAndDown :\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Shake;\n\t\n\tFINISH_CYCLE_STATES.BringSealFlattenersToBagHolding:\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmotorizedSealFlatteners.AutoMoveToBagHolding();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.BringingSealFlattenersToBagHolding;\n\t\n\tFINISH_CYCLE_STATES.BringingSealFlattenersToBagHolding: //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.Idle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.SealFlattenersAtBagHolding;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tFINISH_CYCLE_STATES.SealFlattenersAtBagHolding : \t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Shake;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tFINISH_CYCLE_STATES.Shake:\n\t\t//\n\t\tIF loadShelf.shakeStart = SHAKER_START_SELECTION.BagOpen OR\n   \t\t   loadShelf.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   loadShelf.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF rearLoadPlate.shakeStart = SHAKER_START_SELECTION.BagOpen OR\n   \t\t   rearLoadPlate.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   rearLoadPlate.Shake();\n\t\tEND_IF\n\t\t\n\t\t//\n\t\tIF frontLoadPlate.shakeStart = SHAKER_START_SELECTION.BagOpen OR\n   \t\t   frontLoadPlate.shakeStart = SHAKER_START_SELECTION.Both THEN\n\t\t   frontLoadPlate.Shake();\n\t\tEND_IF\n\n\t\tIF rearLoadPlate.Shaking OR frontLoadPlate.Shaking OR loadShelf.Shaking THEN\n\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Shaking;\n\t\tELSIF zebraPrinter.enable AND HMIData.printerCycleSelection <> PrinterCycleSelection.PrintWhileFeeding THEN\n\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.WaitForOutOfCyclePrint;\n\t\tELSE\n\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Done;\n\t\tEND_IF\n\t\n\tFINISH_CYCLE_STATES.Shaking:\n\t\tIF NOT frontLoadPlate.Shaking AND NOT rearLoadPlate.Shaking AND NOT loadShelf.Shaking THEN\n\t\t\tIF zebraPrinter.enable AND HMIData.printerCycleSelection <> PrinterCycleSelection.PrintWhileFeeding THEN\n\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.WaitForOutOfCyclePrint;\n\t\t\tELSE\n\t\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Done;\n\t\t\tEND_IF\n\t\tEND_IF\t\n\t\n\tFINISH_CYCLE_STATES.WaitForOutOfCyclePrint:\n\t\t//\n\t\tIF bagOpened THEN\n        \tIF NOT bagOpenFingers.CheckIfBagGrabbed(FALSE) AND NOT HMIData.enableDryCycle THEN\n\t\t\t\topenedBagWasRemoved.Trigger();\n\t\t\t\tbagOpened := FALSE;\n\t\t\tEND_IF\n\t\tEND_IF\n\t\t\n\t\tIF state.sb.printOutOfCycle = PRINT_OUT_OF_CYCLE_STATES.Done THEN\n\t\t\tstate.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.Idle;\n\t\t\tstate.sb.finishCycle := FINISH_CYCLE_STATES.Done;\n\t\tEND_IF\t\n\t\n\tFINISH_CYCLE_STATES.Done :\t\t\t\t\t\t\t\t\n\t\t//\n\t\tbagOpenRetryCount := 0;\nEND_CASE\n\n_waitForSealFlattenersUpTimer(IN := state.sb.automation = AUTOMATION_STATES.MovingSealFlattenersUp);\nCASE state.sb.automation OF\n\t\n\tAUTOMATION_STATES.MoveSealFlattenersUp:\n\t\tmotorizedSealFlatteners.sealFlattenersVerticalAxis.Retract();\n\t\tstate.sb.automation := AUTOMATION_STATES.MovingSealFlattenersUp;\n\t\t\n\tAUTOMATION_STATES.MovingSealFlattenersUp:\t\n\t\tIF _waitForSealFlattenersUpTimer.Q THEN\n\t\t\tmotorizedSealFlatteners.AutoMoveOut();\n\t\t\tstate.sb.automation := AUTOMATION_STATES.MovingSealFlattenersOut;\n\t\tEND_IF\n\t\t\n\tAUTOMATION_STATES.MoveSealFlattenersOut:\t\n\t\tmotorizedSealFlatteners.AutoMoveOut();\n\t\tstate.sb.automation := AUTOMATION_STATES.MoveSealFlattenersOut;\n\t\n\tAUTOMATION_STATES.MovingSealFlattenersOut:\n\t\tIF motorizedSealFlatteners.state = SEAL_FLATTENER_STATES.MovedFlattenersOut THEN\n\t\t\tmotorizedSealFlatteners.Reset();\n\t\t\tstate.sb.automation := AUTOMATION_STATES.MovedSealFlattenersIn;\n\t\tEND_IF\n\t\t\n\tAUTOMATION_STATES.MovedSealFlattenersIn:\n\t\tstate.sb.automation := AUTOMATION_STATES.DisableBagOpenSensing;\n\t\n\tAUTOMATION_STATES.DisableBagOpenSensing:\n\t\tbagOpened := FALSE;\n\t\tstate.sb.automation := AUTOMATION_STATES.RaiseBOF;\t\n\t\n\tAUTOMATION_STATES.RaiseBOF:\n\t\tbagOpenFingers.Release();\n\t\tstate.sb.automation := AUTOMATION_STATES.Done; \nEND_CASE\n\n// Print out of cycle\n_waitForTakeupTimer(IN := state.sb.printOutOfCycle = PRINT_OUT_OF_CYCLE_STATES.WaitForTakeup);\nCASE state.sb.printOutOfCycle OF\n\tPRINT_OUT_OF_CYCLE_STATES.Idle:\n\t\t// Machine state machine will start this sub state by setting to \"WaitForPrinter\"\n\t\t\n\tPRINT_OUT_OF_CYCLE_STATES.WaitForPrinter:\n\t\t// Wait for label\n\t\tIF zebraPrinter.state = PRINTER_STATES.DataReady THEN\n        \tstate.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.StartPrinting;\n        END_IF\n\t\t\n\tPRINT_OUT_OF_CYCLE_STATES.StartPrinting:\n\t\t// Turn off power to rear motor and disable tension fault. Tell Zebra FB to prep for print cycle.\n\t\tzebraPrinter.AutoPrintNow();\n\t\tbagDelivery.bagFeedRearMotor.SetTorque(0);\n\t\tbagDelivery.bagFeedRearMotor.DisableTensionFault();\n        state.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.SendPrintSignal;\n\t\n\tPRINT_OUT_OF_CYCLE_STATES.SendPrintSignal:\n\t\t// After print head and compensator are down, send the print and start barcode verifier\n\t\tIF zebraPrinter.printHeadDebounced THEN\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tzebraPrinter.AutoSendPrintSignal();\n\t\t\tbarcodeVerifier.Trigger();\n\t\t\tstate.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.Printing;\n        END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tPRINT_OUT_OF_CYCLE_STATES.Printing:\n\t\t// Wait for print to complete\n\t\t IF zebraPrinter.state = PRINTER_STATES.DonePrinting THEN\n         \tstate.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.FinishedPrinting;\n         END_IF\n\t\t \n\tPRINT_OUT_OF_CYCLE_STATES.FinishedPrinting:\n\t\t// All done. Tell Zebra FB that we see it finished, and up the torque on the rear motor to take up slack\n\t\tzebraPrinter.AutoAckPrintDone();\n\t\tbagDelivery.bagFeedRearMotor.SetTorque(100);\n        state.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.WaitForTakeup;\n\t\t\n\tPRINT_OUT_OF_CYCLE_STATES.WaitForTakeup:\n\t\t// Change this to a rear motor move in reverse to take up faster?\n\t\tIF  _waitForTakeupTimer.Q THEN\n\t\t\tbagDelivery.bagFeedRearMotor.EnableTensionFault();\n\t\t\t//bagDelivery._bagFeedRearMotor.SetTorque((TO_DINT(HMIData.bagTensionSetting * 100)));\n\t\tEND_IF\n\t\tstate.sb.printOutOfCycle := PRINT_OUT_OF_CYCLE_STATES.Done;\n\t\t\n\tPRINT_OUT_OF_CYCLE_STATES.Done:\n\t\t// Machine state machine will set this back to idle.\n\t\t\n\tPRINT_OUT_OF_CYCLE_STATES.Fault:\n\t\t//\n\t\t\nEND_CASE\n\nHMIData.initiateCycle := FALSE;","LineInfoPersistence":"(string)af37cb10-4a26-460e-a0a9-bf51ae0a9f1b_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_MOABHead_Electric EXTENDS FB_BaseComponent\nVAR_INPUT\n    motorizedSealFlattenersMode : DEVICE_MODES := DEVICE_MODES.Auto;\n    electricPressureBarMode : DEVICE_MODES := DEVICE_MODES.Auto;\n    startCycle : BOOL;\n    bagDeliveryMode : DEVICE_MODES;    // Mode of bag delivery system\n    printerMode : DEVICE_MODES;        // Mode of printer\n\tpassthroughMode : DEVICE_MODES;\n\tpassthroughSetting : REAL;\n    passthroughSettingLast : REAL;\n\tbagDropDelay : UINT := 1000;\nEND_VAR\nVAR_OUTPUT\n    readyToRun : BOOL;\n    state : StateMachine;\nEND_VAR\nVAR\n\texternalConveyorEndedOnAShelf : BOOL;\n\tpackageAtExitONS : FB_ONS;\n\tpackageAtExit : BOOL;\n\tpackageAtExitTimer : Standard.TON := (PT := T#20MS);\n\tpackageAtExitBufferTimer : Standard.TON := (PT := T#100MS);\n    motorizedSealFlatteners : FB_MotorizedSealFlatteners_PerfBreaker();\n\tmsfVerticalAxis : FB_ThreePositionCylinder();\n    pressureBar : FB_MotorizedPressureBar();\n\tIBD : FB_MotorizedIBD();\n\tsealBarTempSensor : FB_IFMTempSensor();\n\tsealBarHeater : FB_TempController();\n\tenableBagOpen : BOOL;\n\tenableHeater : BOOL;\n\tenableIBDDeflate : BOOL;\n\tenableIBDEject : BOOL;\n\tfactoryTestModeKeepCycling : BOOL;\n\tautoModeKeepCycling : BOOL;\n\tautoModeKeepCyclingTimer : Standard.TON;\n\tbagDelivery : FB_BagDelivery();\n\tzebraPrinter : FB_ZebraPrinterStandard;\n\tsealTimer : Standard.TON() := (PT := T#350MS);\n\tbagOpenFingerDelay : Standard.TON := (PT := T#100MS);\n\tbagDropTimer : Standard.TON;\n\tHPA : FB_MonostableMultivibrator();\n\tloadShelf : FB_BaseLoadPlate;\n\trearLoadPlate : FB_BaseLoadPlate;\n\tfrontLoadPlate : FB_BaseLoadPlate;\n\texitConveyorRun : DelayDwellFB() := (DwellSetting := 6000);\n\texternalExitConveyorRun : DelayDwellFB() := (DwellSetting := 6000);\n\tstartBCVONS : FB_ONS();\n\tbagOpenFingers : FB_BagOpenFingersWithSensors();\n\tbagOpenCheckDelay : Standard.TON := (PT:= T#200MS); // Delay to check if bag open\n\tbagOpenRetrySetting : UINT;\t\t// Number of times to retry opening bag\n\tbagOpenRetryCount : UINT;\t\t// Count of current retry attempts\n\n\tbagOpened : BOOL;\t\t\t\t// Bag was Opened flag\n\tstartCycleReqFromPalmButtons : BOOL;\n\tstartCycleReqFromPalmButtonsONS : FB_ONS();\n\tpressureBarMotor : FB_AppliedMotionStepServoEIPPassthrough();\n\tIBDMotor : FB_AppliedMotionStepServoEIPPassthrough();\n\tjawClamps : FB_ThreePositionCylinder();\n\thomeJawPB : BOOL;\n    setPassthroughPB : BOOL;\n\tvacuumHoldTimer : Standard.TON() := (PT := T#250MS);\n\tcycleTimer : TON() := (PT := T#1000S);\n\tcycleTime : REAL;\n\tgrabDistance : REAL := 0.1;\n\n\tbagFailedToOpen : FB_Fault(name := 'Bag Failed to Open');\n\topenedBagWasRemoved : FB_Fault(name := 'Opened Bag was Removed');\n\tsafePowerFailure : FB_Fault(name := 'E-Stop/Safety Power Failure');\n\tpalmButtonConfigError : FB_Fault(name := 'Palm Button Configuration Error');\n\tbarcodeVerificationFailed : FB_Fault(name := 'Barcode Verification Failed');\n\tbarcodeVerifierCommFail : FB_Fault(name := 'Barcode Verifier Communication Failure');\n\tinfeedConveyorIOCommFail : FB_Fault(name := 'Infeed Conveyor IO Communication Failure');\n\tinfeedConveyorVFDFaulted : FB_Fault(name := 'Infeed Conveyor VFD Failure');\n\tprintAndApplyFaulted : FB_Fault(name := 'Print and Apply Faulted');\n\tproductJammed : FB_Fault(name := 'Product Jammed on Exit Conveyor');\n\tprintAndApplyCommFailure : FB_Fault(name := 'Print and Apply Comm Failure');\n\tprintAndApplyWaitForLabelTimedOut : FB_Fault(name := 'Print and Apply Timed Out');\n\tprintAndApplyPackageFailedToExit : FB_Fault(name := 'Product Failed to Exit Conveyor');\n\tprintAndApplyPackageFailedToReachTamp : FB_Fault(name := 'Product Failed to Reach Print and Apply Tamp');\n\tprintAndApplyPackageRemovedBeforeTamp : FB_Fault(name := 'Product Removed Before Label Tamp');\n\tlabelsQueuedUpFault : FB_Fault(name := 'Labels Queued Up in Printer');\n\tsealFlattenerTimedOut : FB_Fault(name := 'Seal Flatteners Timed Out / Did Not Reach Destination');\n\tIBDFailedToHome : FB_Fault(name := 'Independent Bag Deflator Failed to Home');\n\t\n\tiPowerOffButtonONS : FB_ONS();\n\tforwardLoadPlateFaults : LoadPlateFaultsType;\n\trearLoadPlateFaults : LoadPlateFaultsType;\n\tloadShelfFaults : LoadPlateFaultsType;\n\t\n\tLPA : DelayDwellFB();\n\thpaServiceOnONS : FB_ONS;\n\texitConveyorJogONS : FB_ONS;\n\texternalExitConveyorJogONS : FB_ONS;\n\tobstructionFaultONS : FB_ONS;\n\thmiLight  : FB_HMILight;\n\tfaultONS : FB_ONS;\n\tpowerSettlingTimer : Standard.TON := (PT := T#6S);\n\tpressureBarCloseDelay : Standard.TON;\n\t_fillerDroppingProductONS : FB_ONS;\n\tfiller : FB_Filler();\n\tfillerModeCycleStartOnlyPulse : FB_MonostableMultivibrator();\n\tcollisionDetection : FB_CollisionDetection();\n\tmurrIOBusNode : FB_MurrIO();\n\tfunnel : FB_Funnel();\n\tstagingFunnel : FB_Funnel();\n\tbarcodeVerifier : FB_BarcodeReader();\n\tkeyenceBCV : FB_KeyenceNL20();\n\tcognexDM374BCV : FB_CognexDM374();\n\trearMotorCommsReturned : Standard.F_TRIG();\n\tbaggerHeadMovement : FB_BaggerHeadRaise();\n\tresettingActive : BOOL;\n\tresetTimer : Standard.TOF := (PT := T#1S);\n\tallMotorCommsGood : BOOL;\n\tbasicLightedPalmButton : FB_K50_Button_BasicMode;\n\tadvancedLightedPalmButtonOne : FB_K50_Button_AdvancedMode;\n\tadvancedLightedPalmButtonTwo : FB_K50_Button_AdvancedMode;\n\tstackLight : FB_TL50_AdvancedMode;\n\tfootSwitchONS : FB_ONS;\n\tIBDOutSetting: REAL;\n\tezfeed : FB_EZFeed();\n\tprintAndApply : FB_PrintAndApply();\n\tEIPReconfig : FB_DeviceTreeEnable();\n\tbatchEnableONS : FB_ONS;\n\ttriggerLPAWhileFeedingONS : FB_ONS();\n\t_runIntegratedExitConveyor : BOOL;\n\t_auxIOPhysical : FB_AuxIOPhysical;\n\t_auxIORemote : FB_AuxIO_RemoteComms;\n\t_bagGrabbedONS : Standard.R_TRIG;\n\t_waitForTakeupTimer : Standard.TON := (PT := T#50MS);\n\t_waitForTorqueTimer : Standard.TON := (PT := T#50MS);\n\t_waitForSealFlattenersUpTimer : Standard.TON := (PT := T#500MS);\n\t_waitForPressureBarOpenDelay : TON;\n\t\n\tperfBreaker : PerfBreaker;\t\t\t\t\t\t//PERF BREAKER\n\tposInhibitTON: TON;\n\tpbarSensorBypass: BOOL:=TRUE;\n\tposInhibit: BOOL;\n\tstagingFunnelCloseOutput: BOOL;\n\tstagingFunnelOpenOutput: BOOL;\n\tpaperBagger: BOOL;\n\tMSFatOutSetpoint: BOOL;\n\tMSFatInSetpoint: BOOL;\n\tMSFatBagHoldSetpoint: BOOL;\n\tMSFatBagFeedSetpoint: BOOL;\nEND_VAR\n","LineInfoPersistence":"(string)af37cb10-4a26-460e-a0a9-bf51ae0a9f1b_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)99124","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}