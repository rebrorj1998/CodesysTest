{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)1a0e4eac-3286-4793-8d0b-df4c1f26efb5","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)BagDeliveryFB_BothMotors","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)True","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}},{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)ad573d43-3d9d-45e6-bef9-65bb57c5bffb"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","bool":"System.Boolean","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: BagDeliveryFB\n//    Description: This is the state machine for the bag delivery test rig\n//    \n//    Created by: Ben Hess\n//    Created Date: Thursday, April 19, 2018\n\nSUPER^();\ntensionFailONS(CLK := iBagTensionFault);\n\ndelay();\ndelayForReverseFault();\nautoFeedDelay(IN := _amFeedBagOut);\n// This is the master Applied Motion motor\nIF useLastPrinterDelta THEN\n\tIF Globals.lastPrinterDelta >= T#90MS THEN\n\t\tdelayForPrintFeed := Globals.lastPrinterDelta - T#80MS;\n\tELSE\n\t\tdelayForPrintFeed := T#10MS;\n\tEND_IF\nEND_IF\nbagLengthSetpoint := HMIData.bagLength;\nprintVelocitySetpoint := HMIData.printSpeed;\nsealOffsetSetpoint := HMIData.bagSkirtLength;\nprintOffsetSetpoint := HMIData.printOffset;\nsealBarToPrintHeadLength := ABS(reverseToPrintHeadSetpoint) + 2.25;\nprintLengthSetpoint := HMIData.printLength;\nreverseVelocitySetpoint := TO_INT(HMIData.bagReverseSpeed);\nfeedVelocitySetpoint := TO_INT(HMIData.bagForwardSpeed);\n\n(*bagFeedMasterMotor(modbusInputParameters := BagDeliverMasterMotorModbusInputs, \n                    stepsPerInchSetpoint := Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY, \n                    reversePolarity := FALSE, \n                    slave := Bag_Delivery_Master_Motor);*)\nbagFeedMasterMotor(ptrEIPInputs := ADR(bagDeliveryMotorInputs),\n                ptrEIPOutputs := ADR(bagDeliveryMotorOutputs),\n                stepsPerInchSetpoint := Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY,\n                //faultHandler := PRG_Bagger.faultHandler,\n\t\t\t\treversePolarity := FALSE, \n\t\t\t\tdefaultCurrentSetpoint := 1150, \n\t\t\t\tcommFail := Bag_Delivery_EIP_Motor.eState <> IoDrvEthernetIP.AdapterState.RUNNING);\nbagFeedMasterMotor.Execute();\n\nbagFeedRearMotor(ptrEIPInputs := ADR(bagRearMotorInputs),\n                ptrEIPOutputs := ADR(bagRearMotorOutputs),\n                stepsPerInchSetpoint := Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY,\n                //faultHandler := PRG_Bagger.faultHandler,\n\t\t\t\treversePolarity := FALSE, \n\t\t\t\tdefaultCurrentSetpoint := 1150, \n\t\t\t\tcommFail := Bag_Delivery_Rear_Motor.eState <> IoDrvEthernetIP.AdapterState.RUNNING);\nbagFeedRearMotor.Execute();\n\nIF enableONS.Q OR resetONS.Q THEN\n    IF _mode = DEVICE_MODES.Manual THEN \n        state := BAG_DELIVERY_STATES.Manual;\n    ELSE\n        state := BAG_DELIVERY_STATES.Idle;\n    END_IF\n\t_reset := FALSE;\n\tClearCommands();\nEND_IF\njogForwardONS(CLK := jogForwardPB);\njogReverseONS(CLK := jogReversePB);\nIF NOT enable THEN\n    state := BAG_DELIVERY_STATES.Idle;\nEND_IF\ndelay();\n_ready := (_mode = DEVICE_MODES.Auto) AND (NOT (state = BAG_DELIVERY_STATES.Fault) OR NOT (state = BAG_DELIVERY_STATES.Idle));\n\nIF tensionFailONS.OSR THEN\n\tbagTensionFault.Trigger();\nEND_IF\n\nCASE state OF\n    BAG_DELIVERY_STATES.Idle :                     \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF _mode = DEVICE_MODES.Manual THEN \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.Manual;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF NOT iBagNotPresent OR Globals.enableDryCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.Ready;\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF iBagNotPresent AND (_amFeedToEye OR _amReverseBag) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.FeedToEye;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_amFeedToEye := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF jogForwardONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistance(distance := 30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := 30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogReverseONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistance(distance := -30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := -30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogForwardONS.OSF OR jogReverseONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n    \n\tBAG_DELIVERY_STATES.FeedToEye :\t\t\t\t\t//Feed to photoeye if not present\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistance(distance := feedToPhotoeyeSetpoint, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((feedToPhotoeyeSetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := feedToPhotoeyeSetpoint, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((feedToPhotoeyeSetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.FeedingToEye;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_DELIVERY_STATES.FeedingToEye :\t\t\t\t// Stop once photoeye seen\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.PT := T#3S;\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT iBagNotPresent THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.Fault;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnoBagOverEye.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n    BAG_DELIVERY_STATES.Reverse :                    // Reverse to break perf\n                                                    bagFeedMasterMotor.MoveDistance(distance := reverseDistanceSetpoint, \n                                                                                    acceleration := TO_INT((ABS(reverseDistanceSetpoint) * Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY) *  accelPercent),\n                                                                                    deceleration := TO_INT((ABS(reverseDistanceSetpoint) * Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY) *  decelPercent), \n                                                                                    velocity := REAL_TO_INT((reverseVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));  \n\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := reverseDistanceSetpoint, \n                                                                                    acceleration := TO_INT((ABS(reverseDistanceSetpoint) * Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY) *  accelPercent),\n                                                                                    deceleration := TO_INT((ABS(reverseDistanceSetpoint) * Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY) *  decelPercent), \n                                                                                    velocity := REAL_TO_INT((reverseVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));    \n                                                        state := BAG_DELIVERY_STATES.Reversing;\n                                                    \n                                                    \n    BAG_DELIVERY_STATES.Reversing :                    // Back up until we see the trailing edge of the bag\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t IF iBagNotPresent OR Globals.enableDryCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.PT := T#10MS;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelayForReverseFault.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.ReverseToPrinthead;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF bagFeedMasterMotor.CommandAcknowledged AND NOT iBagNotPresent THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelayForReverseFault.PT := T#3000MS;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelayForReverseFault.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF delayForReverseFault.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treverseFault.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelayForReverseFault.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.Fault; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\n                                                  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_DELIVERY_STATES.ReverseToPrinthead :                    // Reverse to print head\n                                                    bagFeedMasterMotor.MoveDistance(distance := reverseToPrintHeadSetpoint, \n                                                                                    acceleration := TO_INT((ABS(reverseToPrintHeadSetpoint) * Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY) *  accelPercent),\n                                                                                    deceleration := TO_INT((ABS(reverseToPrintHeadSetpoint) * Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY) *  decelPercent), \n                                                                                    velocity := REAL_TO_INT((reverseVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC))); \n\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := reverseToPrintHeadSetpoint, \n                                                                                    acceleration := TO_INT((ABS(reverseToPrintHeadSetpoint) * Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY) *  accelPercent),\n                                                                                    deceleration := TO_INT((ABS(reverseToPrintHeadSetpoint) * Globals.STEPS_PER_INCH_20_DEGREE_BAG_DELIVERY) *  decelPercent), \n                                                                                    velocity := REAL_TO_INT((reverseVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));    \n                                                    state := BAG_DELIVERY_STATES.ReversingToPrintHead;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_DELIVERY_STATES.ReversingToPrintHead :                    // Reverse to break perf\n                                                   \tdelay.PT := T#50MS;\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagFeedMasterMotor.CommandAcknowledged AND bagFeedMasterMotor.InPosition THEN\n                                                        \tstate := BAG_DELIVERY_STATES.ReverseDone;\n                                                    \tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    \n    BAG_DELIVERY_STATES.ReverseDone :                // We don't print in semi auto or manual mode.  In auto mode if the printer is selected then we move to those states\n                                                    IF _mode = DEVICE_MODES.SemiAuto OR _mode = DEVICE_MODES.Manual OR (_mode  = DEVICE_MODES.Auto AND autoFeedDelay.Q) THEN\n                                                        IF bagFeedMasterMotor.CommandAcknowledged THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.FeedBagOut;\n                                                        \tremainingLength := bagLengthSetpoint;\n                                                        \t_amFeedBagOut := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    ELSIF (_mode  = DEVICE_MODES.Auto AND _amWaitForPrinter) THEN\n                                                        IF bagFeedMasterMotor.CommandAcknowledged THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.WaitingForPrinter;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tremainingLength := bagLengthSetpoint - (printLengthSetpoint + printOffsetSetpoint + printerExtraFeedLength);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_amWaitForPrinter := FALSE;  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF  \n                                                    END_IF\n                                                        \n                                                    \n    BAG_DELIVERY_STATES.WaitingForPrinter :            // \n                                                    IF (_mode  = DEVICE_MODES.Auto AND _amPrinterReady) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF printOffsetSetpoint <> 0 THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.FeedToPrintOffset;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.FedToPrintOffset;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                        \n                                                        _amPrinterReady := FALSE;\n                                                    END_IF\n                                                        \n    BAG_DELIVERY_STATES.FeedToPrintOffset :            // \n                                                    bagFeedMasterMotor.MoveDistance(distance := printOffsetSetpoint, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((feedVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));  \n\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := printOffsetSetpoint, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((feedVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));  \n                                                        state := BAG_DELIVERY_STATES.FeedingToPrintOffset;\n                                                    \n    BAG_DELIVERY_STATES.FeedingToPrintOffset :        // \n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.PT := T#50MS;\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagFeedMasterMotor.CommandAcknowledged AND bagFeedMasterMotor.InPosition THEN\n                                                        \tstate := BAG_DELIVERY_STATES.FedToPrintOffset;\n                                                    \tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    \n                                                    \n    BAG_DELIVERY_STATES.FedToPrintOffset :            // \n                                                    IF (_mode  = DEVICE_MODES.Auto AND _amStartPrint) THEN\n                                                        state := BAG_DELIVERY_STATES.FeedAtPrintSpeed;\n                                                        _amStartPrint := FALSE;\n                                                    END_IF\n                                                    \n    BAG_DELIVERY_STATES.FeedAtPrintSpeed :            // \n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.PT := delayForPrintFeed;\n                                                    delay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistance(distance := printLengthSetpoint + printerExtraFeedLength, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((printVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := printLengthSetpoint + printerExtraFeedLength, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((printVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));  \n                                                        state := BAG_DELIVERY_STATES.FeedingAtPrintSpeed;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    \n    BAG_DELIVERY_STATES.FeedingAtPrintSpeed :        // \n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.PT := T#50MS;\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagFeedMasterMotor.CommandAcknowledged AND bagFeedMasterMotor.InPosition THEN\n                                                        \tstate := BAG_DELIVERY_STATES.FedAtPrintSpeed;\n                                                    \tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                   \n                                                    \n    BAG_DELIVERY_STATES.FedAtPrintSpeed :            // \n                                                    IF (_mode  = DEVICE_MODES.Auto AND _amPrinterDone) THEN\n                                                        state := BAG_DELIVERY_STATES.FeedBagOut;\n                                                        _amPrinterDone := FALSE;\n                                                    END_IF\n                                                    \n    BAG_DELIVERY_STATES.FeedBagOut :                // Feed bag length out\n                                                    //bagFeedMasterMotor.MoveDistanceFinal(distance := (remainingLength + sealOffsetSetpoint + (reverseToPrintHeadSetpoint*-1)), \n\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistanceFinal(distance := (remainingLength + sealBarToPrintHeadLength) - sealOffsetSetpoint, \n                                                                                        acceleration := accelSetpoint, \n                                                                                        deceleration := decelSetpoint, \n                                                                                        velocity := REAL_TO_INT((feedVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := (remainingLength + sealBarToPrintHeadLength) - sealOffsetSetpoint, \n                                                                                        acceleration := accelSetpoint, \n                                                                                        deceleration := decelSetpoint, \n                                                                                        velocity := REAL_TO_INT((feedVelocitySetpoint * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n                                                    state := BAG_DELIVERY_STATES.FeedingBagOut;    \n    \n    BAG_DELIVERY_STATES.FeedingBagOut :                // Wait until move is done\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.PT := T#50MS;\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagFeedMasterMotor.CommandAcknowledged AND bagFeedMasterMotor.InPosition THEN\n                                                        state := BAG_DELIVERY_STATES.FedBagOut;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    \tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                    \n    \n    BAG_DELIVERY_STATES.FedBagOut :                    // Go to the next ready state\n                                                    IF _mode = DEVICE_MODES.Manual THEN \n                                                        state := BAG_DELIVERY_STATES.Manual;\n                                                    ELSE\n                                                        state := BAG_DELIVERY_STATES.Ready;\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.driveRollerClean.SetCount(HMIData.driveRollerClean.count + TO_INT(bagLengthSetpoint));\n                                                    Globals.bagDeliveryCycleCount := Globals.bagDeliveryCycleCount + 1;\n    \n    BAG_DELIVERY_STATES.Ready :                        IF (_mode = DEVICE_MODES.Auto AND _amReverseBag) OR _mode = DEVICE_MODES.SemiAuto THEN \n                                                        state := BAG_DELIVERY_STATES.Reverse;\n                                                        ClearCommands();\n                                                    END_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t_amFeedToEye := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF iBagNotPresent AND NOT Globals.enableDryCycle THEN \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF jogForwardONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistance(distance := 30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := 30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogReverseONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistance(distance := -30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.MoveDistance(distance := -30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogForwardONS.OSF OR jogReverseONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n    \n    BAG_DELIVERY_STATES.Fault :                        ClearCommands();\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF jogForwardONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistance(distance := 30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogReverseONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.MoveDistance(distance := -30, \n                                                                                    acceleration := accelSetpoint, \n                                                                                    deceleration := decelSetpoint, \n                                                                                    velocity := REAL_TO_INT((1 * Globals.VELOCITY_IPS_MULTIPLIER_ELECTRIC)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogForwardONS.OSF OR jogReverseONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedMasterMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagFeedRearMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n    \n    BAG_DELIVERY_STATES.Manual :                    IF _mode = DEVICE_MODES.Auto THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := BAG_DELIVERY_STATES.Ready;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Manually feed bags out\n                                                    IF feedBagPB THEN\n                                                        state := BAG_DELIVERY_STATES.Reverse;\n                                                        feedBagPB := FALSE;\n                                                    END_IF\n                                                        \nEND_CASE","LineInfoPersistence":"(string)1a0e4eac-3286-4793-8d0b-df4c1f26efb5_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK BagDeliveryFB_BothMotors EXTENDS BaseComponentFB IMPLEMENTS IComponentStatus\nVAR_INPUT\n    feedBagPB : BOOL;                // Manually Feed bag out\n\tjogForwardPB : BOOL;\n\tjogReversePB : BOOL;\n    bagsToFeedSetpoint : INT;        // Bags to feed setpoint for testing\n    reverseDistanceSetpoint : REAL := -3;  // Distance to reverse\n    bagLengthSetpoint : REAL := 23.5;  // Bag length to feed\n    accelSetpoint : INT := 600;            // Acceleration Setpoint\n    decelSetpoint : INT := 2000;        // Deceleration Setpoint\n    reverseVelocitySetpoint : INT := 3;            // Reverse Velocity setoint (IPS)\n    feedVelocitySetpoint : INT := 55;            // Bag Feed Velocity setoint (IPS)\n    printVelocitySetpoint : UDINT := 6;            // Print speed (IPS)\n    sealOffsetSetpoint : REAL := 1.5;            // Seal Offset\n    printOffsetSetpoint : REAL := 3;            // Print Offset\n    printLengthSetpoint : REAL := 8;                    // Print length\n\treverseToPrintHeadSetpoint : REAL := -1.25;\n\tfeedToPhotoeyeSetpoint : REAL := 2.0;\n\tuseLastPrinterDelta : BOOL := TRUE;\n\ttensionFailONS : FB_ONS;\nEND_VAR\nVAR_OUTPUT\n    state : BAG_DELIVERY_STATES;    // Current state of bag delivery component\n\treverseFault : FB_Fault(name := 'Reverse Fault');\n\tnoBagOverEye : FB_Fault(name := 'No bag over Photoeye');\n\tbagTensionFault : FB_Fault(name := 'Bag Tension Fault');\nEND_VAR\nVAR\n    delay : TON := (PT := T#100MS);    // Delay for testing\n\tjogForwardONS: FB_ONS;\n\tjogReverseONS: FB_ONS;\n\tdelayForReverseFault : Standard.TON;\n\tautoFeedDelay : TON := (PT := T#200MS);\n\tsealBarToPrintHeadLength : REAL;\n    bagsCurrentlyFed  :INT;            // Bags currently fed for testing\n    remainingLength : REAL;            // Remaining bag length after print\n\tdelayForPrintFeed : TIME := T#250MS;\n\tprinterExtraFeedLength : REAL := 0.25;\n    //bagFeedMasterMotor : FB_AppliedMotionStepServoTCP();\n    //bagFeedMasterMotor : FB_AppliedMotionBagDeliveryMotor();\n\tbagFeedMasterMotor : FB_AppliedMotionBagDeliveryMotor_1();\n\t//bagFeedRearMotor : FB_AppliedMotionBagDeliveryMotor_1();\n\tbagFeedRearMotor : FB_AppliedMotionStepServoEIPBase();\n\taccelPercent : REAL := 0.1;\n\tdecelPercent : REAL := 0.05;\n    _amReverseBag : BOOL;            // Auto Mode - Reverse bag\n    _amFeedBagOut : BOOL;            // Auto Mode - Feed new bag out\n    _amWaitForPrinter : BOOL;        // Auto Mode - wait for printer\n    _amPrinterReady : BOOL;            // Auto Mode - Printer is ready\n    _amStartPrint : BOOL;            // Auto Mode - Start Printing\n    _amPrinterDone : BOOL;             // Auto Mode - Printer is Done\n\t_amFeedToEye : BOOL;\t\t\t  // Auto Mode - Feed Bag to Eye\nEND_VAR\n","LineInfoPersistence":"(string)1a0e4eac-3286-4793-8d0b-df4c1f26efb5_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)1631","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}