{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)bc5b0f85-43d4-40fb-8d1e-603c576ab48d","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)ElectricPressureBarFB","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)True","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}},{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)ad573d43-3d9d-45e6-bef9-65bb57c5bffb"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","bool":"System.Boolean","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: ElectricPressureBarFB\n//    Description: This function block is the state machine for the electric pressure bar\n//    \n//    Created by: Ben Hess\n//    Created Date: Monday, April 16, 2018\n\nelectricPressureBarMotor(deviceType := FML.CMMP_AS,\n                                        isFPCActive := TRUE, \n                                        ptrReadFHPPRegister := ADR(%IW145), \n                                        ptrReadFPCRegister := ADR(%IW149),\n                                        ptrWriteFHPPRegister := ADR(%QW82),\n                                        ptrWriteFPCRegister := ADR(%QW86));                                    \nelectricPressureBarMotor.Execute();\n\ndelay();\n\n//Report as ready if mode is auto and we're not faulted\n_ready := (_mode = DEVICE_MODES.Auto) AND NOT (state = PRESSURE_BAR_STATES.Fault);\n\n\nenableElectricPressureBarONS(CLK := enable);\nIF enableElectricPressureBarONS.Q THEN\n    state := PRESSURE_BAR_STATES.Idle;\nEND_IF\n\nIF NOT enable THEN\n        state := PRESSURE_BAR_STATES.Fault;\nEND_IF\n\nCASE state OF\n    PRESSURE_BAR_STATES.Idle:        IF enable AND _mode = DEVICE_MODES.SemiAuto OR (_mode = DEVICE_MODES.Auto AND _amCloseJaw) THEN\n                                        state := PRESSURE_BAR_STATES.CloseJaw;\n                                        _amCloseJaw := FALSE;\n                                    END_IF\n    \n    PRESSURE_BAR_STATES.OpenJaw:    electricPressureBarMotor.ExecuteStoredProgram(1);\n                                    IF electricPressureBarMotor.CommandAcknowledged THEN\n                                        state := PRESSURE_BAR_STATES.OpeningJaw;\n                                        Globals.electricPressureBarCount := Globals.electricPressureBarCount + 1;\n                                    END_IF\n        \n    \n    PRESSURE_BAR_STATES.OpeningJaw:    \n                                    IF electricPressureBarMotor.ActiveStoredProgramNumber = 1 AND electricPressureBarMotor.InPosition THEN\n                                        state := PRESSURE_BAR_STATES.JawOpened;\n                                    END_IF\n                                    \n    PRESSURE_BAR_STATES.JawOpened:     IF _mode = DEVICE_MODES.SemiAuto THEN\n                                        delay.IN := TRUE;\n                                        IF delay.Q THEN\n                                            state := PRESSURE_BAR_STATES.CloseJaw;\n                                            delay.IN := FALSE;\n                                        END_IF\n                                    ELSIF _mode = DEVICE_MODES.Auto AND _amCloseJaw THEN\n                                        state := PRESSURE_BAR_STATES.CloseJaw;\n                                        _amCloseJaw := FALSE;\n                                    END_IF\n        \n    PRESSURE_BAR_STATES.CloseJaw:    electricPressureBarMotor.ExecuteStoredProgram(2);\n                                    IF electricPressureBarMotor.CommandAcknowledged THEN\n                                        state := PRESSURE_BAR_STATES.ClosingJaw;\n                                        Globals.electricPressureBarCount := Globals.electricPressureBarCount + 1;\n                                    END_IF\n                                    \n    \n    PRESSURE_BAR_STATES.ClosingJaw:    IF electricPressureBarMotor.ActiveStoredProgramNumber = 2 AND electricPressureBarMotor.InPosition THEN\n                                        state := PRESSURE_BAR_STATES.JawClosed;\n                                    END_IF\n                                    \n    PRESSURE_BAR_STATES.JawClosed:    IF _mode = DEVICE_MODES.SemiAuto THEN\n                                        delay.IN := TRUE;\n                                        IF delay.Q THEN\n                                            state := PRESSURE_BAR_STATES.OpenJaw;\n                                            delay.IN := FALSE;\n                                        END_IF\n                                    ELSIF _mode = DEVICE_MODES.Auto AND _amOpenJaw THEN\n                                        state := PRESSURE_BAR_STATES.OpenJaw;\n                                        _amOpenJaw := FALSE;\n                                    END_IF\n    \n    PRESSURE_BAR_STATES.Fault:        ClearCommands();        \n    \n    \nEND_CASE","LineInfoPersistence":"(string)bc5b0f85-43d4-40fb-8d1e-603c576ab48d_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK ElectricPressureBarFB IMPLEMENTS IComponentStatus\nVAR_INPUT\n    enable : BOOL;\nEND_VAR\nVAR_IN_OUT\n\nEND_VAR\nVAR_OUTPUT\nEND_VAR\nVAR\n    electricPressureBarMotor : FB_FestoMotor();\n    delay: TON := (PT := T#1S);\n    state : PRESSURE_BAR_STATES;\n    enableElectricPressureBarONS : R_TRIG();\n    \n    _mode : DEVICE_MODES;    // Auto-SemiAuto-Manual\n    _ready : BOOL;            // Ready to be controlled\n    _amOpenJaw : BOOL;    // Auto Mode Open Jaw Command\n    _amCloseJaw : BOOL;     // Auto Mode Close Jaw Command\nEND_VAR\n","LineInfoPersistence":"(string)bc5b0f85-43d4-40fb-8d1e-603c576ab48d_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)616","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}