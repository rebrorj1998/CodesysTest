{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)3e93be6d-1cf2-4b4e-ad27-1f78d807e6c9","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)PrinterFB","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)True","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}},{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)ad573d43-3d9d-45e6-bef9-65bb57c5bffb"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","bool":"System.Boolean","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: Printer\n//    Description: This program manages the aspects of a (Zebra) printer\n//    Created by: Ben Hess\n//    Created Date: April 2nd, 2018\nSUPER^();\n// Enable TCP Server for label sending\ntcpServer();\n\n//Report as ready if mode is auto and we're not faulted\n_ready := (_mode = DEVICE_MODES.Auto) AND NOT (state = PRINTER_STATES.Fault);\n\nprintHeadDebounce(PT:= printHeadDebouneSetpoint, Q=> printHeadDebounced);\nIF enableONS.Q OR resetONS.Q THEN\n    state := PRINTER_STATES.Idle;\n\t_reset := FALSE;\n\t_amGoToIdle := FALSE;\n\t_amSendPrintSignal := FALSE;\n\t_amPrintNow := FALSE;\nEND_IF\n\nIF NOT enable THEN\n    state := PRINTER_STATES.Fault;\n\toRunPrinterRibbonUnwindMotor := FALSE;\n\toLowerPrintHead := FALSE;\nEND_IF\n\n\n\n//State machine for the printer\nCASE state OF\n    PRINTER_STATES.Idle :                            //Go to waiting for data if printer is ready\n                                                    oRunPrinterRibbonUnwindMotor := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\toPrinterStartPrint := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\toLowerPrintHead := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tprintHeadDebounce.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT printerDataReady THEN\n                                                        IF autoSendLabel THEN\n                                                            tcpServer.SendLabel();\n                                                        END_IF\n                                                        state := PRINTER_STATES.WaitingForData;\n                                                    ELSE\n                                                        state := PRINTER_STATES.DataReady;\n                                                    END_IF\n                                                    \n                                        \n    \n    PRINTER_STATES.WaitingForData :                    //If printerDataReady drops out the label data was received\n                                                    \n                                                    IF printerDataReady THEN\n                                                        state := PRINTER_STATES.DataReady;    \n                                                    END_IF\n                                                \n    PRINTER_STATES.DataReady :                        // Wait for command to begin printing\n                                                    IF NOT printerDataReady THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINTER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF _mode = DEVICE_MODES.Auto AND _amPrintNow THEN\n                                                        state := PRINTER_STATES.BeginPrintCycle;\n                                                        _amPrintNow := FALSE;\n                                                        oLowerPrintHead := TRUE;\n                                                        oRunPrinterRibbonUnwindMotor := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//oPrinterStartPrint := TRUE;\n                                                    END_IF                                    \n            \n    \n    PRINTER_STATES.BeginPrintCycle :                // Start printing\n                                                    \n                                                    printHeadDebounce.IN := TRUE;\n                                                    IF printHeadDebounce.Q AND _amSendPrintSignal THEN\n                                                        oPrinterStartPrint := TRUE;\n                                                        state := PRINTER_STATES.Printing;\n                                                        printHeadDebounce.IN := FALSE;\n                                                        _amSendPrintSignal := FALSE;\n                                                    END_IF                                                    \n                                        \n    \n    PRINTER_STATES.FeedAtPrintSpeed :                //\n\n                                                    \n                                                                                                \n                                        \n    PRINTER_STATES.Printing :                        //While printing, wait for End of Print signal\n                                                    IF printerEndOfPrint THEN\n                                                        oPrinterStartPrint := FALSE;\n                                                        oLowerPrintHead := FALSE;\n                                                        \n                                                        state := PRINTER_STATES.DonePrinting;    \n                                                    END_IF\n                                        \n    PRINTER_STATES.DonePrinting :                    //Done printing, feed a little more through\n                                                    IF _mode = DEVICE_MODES.Auto AND _amGoToIdle THEN\n                                                        oRunPrinterRibbonUnwindMotor := FALSE;\n                                                        state := PRINTER_STATES.Idle;\n                                                        _amGoToIdle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.printerCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.printHeadClean.Increment();\n                                                        Globals.printerCycleCounts := Globals.printerCycleCounts + 1;\n                                                    END_IF\n        \n    PRINTER_STATES.FeedThrough :                        \n                                        \n    PRINTER_STATES.Ready :                        \n                                        \n    PRINTER_STATES.Fault :                        \n                                        \nEND_CASE","LineInfoPersistence":"(string)3e93be6d-1cf2-4b4e-ad27-1f78d807e6c9_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK PrinterFB EXTENDS BaseComponentFB IMPLEMENTS IComponentStatus\nVAR_INPUT\n    autoSendLabel :BOOL;    // Automatically send a label                \nEND_VAR\nVAR_OUTPUT\n    state : PRINTER_STATES;         // Printer State Machine\n\toLowerPrintHead : BOOL;\n\tprintHeadDebounced : BOOL;\n\t\nEND_VAR\nVAR\n    _amPrintNow : BOOL;                // Auto mode - print now\n    _amSendPrintSignal : BOOL;        // Auto mode - send print signal\n    _amGoToIdle : BOOL;                // Auto mode - Acked, go back to idle mode\n    printHeadDebounce : TON;\n    printHeadDebouneSetpoint : TIME := T#50MS;\n    tcpServer : FB_TCPClient();\nEND_VAR\n\nVAR_IN_OUT\nEND_VAR\n","LineInfoPersistence":"(string)3e93be6d-1cf2-4b4e-ad27-1f78d807e6c9_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)528","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}