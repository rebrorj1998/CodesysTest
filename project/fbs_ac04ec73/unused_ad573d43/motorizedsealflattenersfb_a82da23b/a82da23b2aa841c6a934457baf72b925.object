{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)a82da23b-2aa8-41c6-a934-457baf72b925","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)MotorizedSealFlattenersFB","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)True","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}},{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)ad573d43-3d9d-45e6-bef9-65bb57c5bffb"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","bool":"System.Boolean","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block:  MotorizedSealFlattenersFB\n//    Description: State machine and motor management for motorized seal flateners\n//    Currently, this code requires one to use the Oriental drive with pre-programmed \n//    sequence for the horizontal axis\n//    Created by: Ben Hess\n//    Created Date: Friday, April 6, 2018\nSUPER^();\n// Setup and execute 2 motor axis'\n\n// Temporary delay between states for testing\nfingersDownDelay();\ndelay();\njogInONS(CLK := jogIn);\njogOutONS(CLK := jogOut);\nIF autoModeSelected THEN\n    delay.PT := T#300MS;\nELSE\n    delay.PT := T#750MS;\nEND_IF\n\noutSetpoint := HMIData.bagWidth + 0.2;\nbagHoldingSetpoint := HMIData.bagWidth;\n\n// Setup the vertical axis motor\nsealFlattenersVerticalAxis.Execute();\n\n// Setup the horizontal axis motor \n(*\nsealFlattenersHorizontalAxisMotor(modbusInBuffer := OrientalMotorModbusRead,\n                stepsPerInchSetpoint := 125,\n                reversePolarity := FALSE,\n                operatingCurrentDefault := 500,\n                modbusCommandOutBuffer := OrientalMotorCommandWrites,\n                modbusParametersOutBuffer := OrientalMotorParameterWrites,\n                triggerCommandWrite => OrientalMotorTriggerCommandWrite,\n                triggerParameterWrite => OrientalMotorTriggerParameterWrite);                \nsealFlattenersHorizontalAxisMotor.Execute();\n*)\n\nsealFlattenersHorizontalAxisMotor(ptrEIPInputs := ADR(sealFlattenerHorizontalMotorInputs),\n                ptrEIPOutputs := ADR(sealFlattenerHorizontalMotorOutputs),\n                stepsPerInchSetpoint := Globals.STEPS_PER_INCH_SEAL_FLATTENER_HORIZONTAL_AXIS_MOTOR,\n                faultHandler := PRG_Bagger.faultHandler,\n\t\t\t\treversePolarity := TRUE, \n\t\t\t\tdefaultCurrentSetpoint := defaultCurrentMSF, \n\t\t\t\tcommFail := MSFMotor.eState <> IoDrvEthernetIP.AdapterState.RUNNING,\n\t\t\t\tisHomable := TRUE);\n\t\t\t\t\nsealFlattenersHorizontalAxisMotor.Execute();\n\n//Report as ready if mode is auto and we're not faulted\n_ready := (_mode = DEVICE_MODES.Auto) AND NOT (state = SEAL_FLATTENER_STATES.Fault);\n\nenableMotorizedSealFlattenersONS(CLK := enable);\nIF stopPB THEN\n    sealFlattenersHorizontalAxisMotor.Stop();\n    stopPB := FALSE;\nEND_IF\n\nIF startPB AND semiAutoModeSelected THEN \n    //sealFlattenersHorizontalAxisMotor.StartOperation();\n    startPB := FALSE;\nEND_IF\n\nIF nextSeqPB THEN \n    //sealFlattenersHorizontalAxisMotor.NextSequence();\n    nextSeqPB := FALSE;\nEND_IF\n\nIF testMovePB THEN\n    sealFlattenersHorizontalAxisMotor.MoveToPosition(position := (testMoveSP), acceleration := 100, deceleration := 100, velocity := 600);\n    testMovePB := FALSE;\nEND_IF\n\nIF enableONS.Q OR resetONS.Q THEN \n    state := SEAL_FLATTENER_STATES.Idle;\n\tsealFlattenersHorizontalAxisMotor.Reset();\n\t_reset := FALSE;\n\tClearCommands();\nEND_IF\n\nIF NOT enable THEN\n    state := SEAL_FLATTENER_STATES.Fault;\nEND_IF\n\n// State amchine for motorized seal flatteners\nCASE state OF\n    \n\n    SEAL_FLATTENER_STATES.Idle :                                    //If enabled move to out\n                                                                    IF enable AND semiAutoModeSelected OR (autoModeSelected AND _amMoveOut) THEN\n                                                                        state := SEAL_FLATTENER_STATES.MoveFlattenersOut;\n                                                                        ClearCommands();\n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enable AND autoModeSelected AND _amMoveIn OR _amMoveInToBagHolding THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//IF enable AND autoModeSelected AND _amMoveIn THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersVerticalAxis.Retract();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MoveFlattenersIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClearCommands();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF jogInONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveDistance(distance := -18, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceleration := horizontalAxisAccel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeceleration := horizontalAxisDecel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvelocity := jogSpeed);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogOutONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveDistance(distance := 18, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceleration := horizontalAxisAccel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeceleration := horizontalAxisDecel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvelocity := jogSpeed);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogInONS.OSF OR jogOutONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF raiseService THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersVerticalAxis.Retract();  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\traiseService := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF lowerService THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersVerticalAxis.Extend();  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlowerService := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF moveToManualSetpoint THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveToPosition(position := manualPosSetpoint, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceleration := horizontalAxisAccel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeceleration := horizontalAxisDecel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvelocity := moveFingersSpeed);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveToManualSetpoint := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                                    \n    SEAL_FLATTENER_STATES.MoveFlattenersOut :                        // Move flatteners to out position\n                                                                \n                                                                    //sealFlattenersHorizontalAxisMotor.StartOperation();\n                                                                    sealFlattenersHorizontalAxisMotor.MoveToPositionTorque(position := outSetpoint, \n                                                                                                                        acceleration := horizontalAxisAccel,\n                                                                                                                        deceleration := horizontalAxisDecel,\n                                                                                                                        velocity := moveOutSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent := outCurrentMSF);                                                    \n                                                                    state := SEAL_FLATTENER_STATES.MovingFlattenersOut;\n                                                                    \n                                                                    \n    SEAL_FLATTENER_STATES.MovingFlattenersOut :                        // \n                                                                    delay.IN := TRUE;\n                                                                    IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged AND sealFlattenersHorizontalAxisMotor.CurrentPosition >= (bagHoldingSetpoint - 1.5) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersOut;\n                                                                        \tdelay.IN := FALSE; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                    END_IF\n                                                                    \n    SEAL_FLATTENER_STATES.MovedFlattenersOut :                        // Move flatteners to clearance position state\n                                                                    IF enable AND semiAutoModeSelected OR (autoModeSelected AND _amMoveClearance) THEN\n                                                                        state := SEAL_FLATTENER_STATES.MoveFlattenersUpAndToClearance;\n                                                                        ClearCommands();\n                                                                    END_IF\n    \n    \n    SEAL_FLATTENER_STATES.MoveFlattenersUpAndToClearance :                // Move flatteners to clearance position\n                                                                    \n                                                                    //sealFlattenersHorizontalAxisMotor.NextSequence();\n                                                                    sealFlattenersHorizontalAxisMotor.MoveToPosition(position := (outSetpoint - clearanceOffset), \n                                                                                                                        acceleration := horizontalAxisAccel,\n                                                                                                                        deceleration := horizontalAxisDecel,\n                                                                                                                        velocity := moveOutSpeed);    \n                                                                   \tsealFlattenersVerticalAxis.Retract();                                                       \n                                                                    state := SEAL_FLATTENER_STATES.MovingFlattenersUpAndToClearance;    \n    \n    \n    \n    SEAL_FLATTENER_STATES.MovingFlattenersUpAndToClearance :        delay.IN := TRUE;\n                                                                    IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged AND sealFlattenersHorizontalAxisMotor.InPosition THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersUpAndToClearance;    \n                                                                        \tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                    END_IF\n                                                                    \n                                                                    \n    SEAL_FLATTENER_STATES.MovedFlattenersUpAndToClearance :                // Move flatteners to up state\n                                                                    IF enable AND semiAutoModeSelected OR (autoModeSelected AND (_amMoveInToBagHolding OR _amMoveIn)) THEN\n                                                                        state := SEAL_FLATTENER_STATES.MoveFlattenersIn;\n                                                                        //ClearCommands();\n                                                                    END_IF\n                                        \n                                                                    \n    SEAL_FLATTENER_STATES.MoveFlattenersIn :                        // Move flatteners up and in\n                                                                    //sealFlattenersHorizontalAxisMotor.NextSequence();    \n                                                                    sealFlattenersHorizontalAxisMotor.MoveToPosition(position := inSetpoint, \n                                                                                                                        acceleration := horizontalAxisAccel,\n                                                                                                                        deceleration := horizontalAxisDecel,\n                                                                                                                        velocity := moveInSpeed);                                                    \n                                                                    state := SEAL_FLATTENER_STATES.MovingFlattenersIn;\n                                                                    \n                                                                    \n    SEAL_FLATTENER_STATES.MovingFlattenersIn :                        // If we did that command well move on \n                                                                        delay.IN := TRUE;\n                                                                        IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged AND sealFlattenersHorizontalAxisMotor.InPosition THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersIn;\n                                                                           \t\tdelay.IN := FALSE;    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                        END_IF \n                                                                    \n    SEAL_FLATTENER_STATES.MovedFlattenersIn :                        // Now that we're up and in move to down and 4 corners/bag holding\n                                                                    IF enable AND semiAutoModeSelected OR (autoModeSelected AND _amMoveInToBagHolding) THEN\n                                                                        state := SEAL_FLATTENER_STATES.MoveFlattenersDown;\n                                                                        ClearCommands();\n                                                                    END_IF    \n    \n    SEAL_FLATTENER_STATES.MoveFlattenersDown :            // Do moves for down and bag holding\n                                                                        \n                                                                        sealFlattenersVerticalAxis.Extend();\n                                                                                                                                                                                \n                                                                        state := SEAL_FLATTENER_STATES.MovingFlattenersDown;\n                                                                        \n    SEAL_FLATTENER_STATES.MovingFlattenersDown :            \n                                                                        //IF sealFlattenersVerticalAxis.CommandAcknowledged AND sealFlattenersVerticalAxis.InPosition THEN\n                                                                       \tfingersDownDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \tIF fingersDownDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersDown;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfingersDownDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                                        //END_IF \n                                                                        \n    SEAL_FLATTENER_STATES.MovedFlattenersDown :            state := SEAL_FLATTENER_STATES.MoveFlattenersToBagHolding;\n                                                                    \n                                                                    \n    SEAL_FLATTENER_STATES.MoveFlattenersToBagHolding :            // Do moves for down and bag holding\n                                                                        //sealFlattenersHorizontalAxisMotor.NextSequence();    \n                                                                        sealFlattenersHorizontalAxisMotor.MoveToPositionTorque(position := bagHoldingSetpoint, \n                                                                                                                        acceleration := horizontalAxisAccel,\n                                                                                                                        deceleration := horizontalAxisDecel,\n                                                                                                                        velocity := moveBagHoldingSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent := bagHoldingCurrentMSF);                                                \n                                                                        state := SEAL_FLATTENER_STATES.MovingFlattenersToBagHolding;\n                                                                        \n    SEAL_FLATTENER_STATES.MovingFlattenersToBagHolding :            delay.IN := TRUE;\n                                                                        IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersToBagHolding;\n                                                                            \tdelay.IN := FALSE; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF   \n                                                                        END_IF \n                                                                        \n    SEAL_FLATTENER_STATES.MovedFlattenersToBagHolding :            state := SEAL_FLATTENER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.motorizedSealFlattenerCycles.Increment();\n                                                                        Globals.motorizedSealFlattenersCount := Globals.motorizedSealFlattenersCount +1;\n                                                                        Globals.sealFlattenerFingersCount := Globals.sealFlattenerFingersCount +1;\n    SEAL_FLATTENER_STATES.Ready :\n    SEAL_FLATTENER_STATES.Fault :\nEND_CASE","LineInfoPersistence":"(string)a82da23b-2aa8-41c6-a934-457baf72b925_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK MotorizedSealFlattenersFB EXTENDS BaseComponentFB IMPLEMENTS IComponentStatus\nVAR_INPUT\n    {warning 'TODO: Make a struct for some of these - too many inputs'}\n\tsealFlattenersVerticalAxis : ICylinder();\n    clearanceOffset : REAL := 0.75;        // Clearance Offset in inches\n    inSetpoint : REAL := 1.25;            // In setpoint in inches\n    outSetpoint : REAL := 17.7;            // Out (sealing) setpoint in inches\n    bagHoldingSetpoint : REAL := 17;    // Bag holding setpoint in inches            \n    clearanceSpeed : INT := 3000;        // Speed to move in clearance move\n    moveInSpeed : INT := 3000;            // Speed to move in in move\n    moveOutSpeed : INT := 1000;            // Speed to move in out move\n    moveBagHoldingSpeed : INT := 10000;    // Speed to move in bag holding move\n    fingersUpSetpoint : REAL := 0;     // Fingers Up setpoint in inches\n    fingersDownSetpoint : REAL := 1.1; // Fingers down setpoint in inches\n    moveFingersSpeed : INT := 2000;        // Speed to move fingers\n    horizontalAxisAccel : INT := 1000;    // Accel setpoint for horizontal axis\n    horizontalAxisDecel : INT := 1000;    // Decel Setpoint for horizontal axis\n    verticalAxisAccel : INT := 150;    // Accel setpoint for vertical axis\n    verticalAxisDecel : INT := 150;    // Decel Setpoint for vertical axis\n    testMovePB : BOOL;\n    testMoveSP : REAL;\n    stopPB : BOOL;\n    startPB : BOOL;\n    nextSeqPB : BOOL;\n    delay : TON := (PT:= T#300MS);\n\tfingersDownDelay : Standard.TON := (PT := T#200MS);\n\t\n\tmanualPosSetpoint : REAL;\n\t\nEND_VAR\nVAR_IN_OUT\n\tjogIn : BOOL;\n\tjogOut : BOOL;\n\traiseService : BOOL;\n\tlowerService : BOOL;\n\tmoveToManualSetpoint : BOOL;\nEND_VAR\nVAR_OUTPUT\n    state : SEAL_FLATTENER_STATES;\nEND_VAR\nVAR\n    //pressureBarMotor : FB_FestoMotor();\n    //sealFlattenersVerticalAxisMotor : FB_AppliedMotionStepServoRTU();\n\tjogInONS: FB_ONS;\n\tjogOutONS: FB_ONS;\n\tjogSpeed : INT := 100;\n    sealFlattenersHorizontalAxisMotor : FB_AppliedMotionStepServoEIPBaseQX();\n\tdefaultCurrentMSF : DINT := 150;\n\toutCurrentMSF : DINT := 150;\n\tbagHoldingCurrentMSF : DINT := 85;\n    enableMotorizedSealFlattenersONS : R_TRIG();    \n    _amMoveOut : BOOL;                // Auto mode move out command\n\t_amMoveIn : BOOL;\n    _amMoveClearance : BOOL;            // Auto mode move Clearance command\n    _amMoveInToBagHolding : BOOL;    // Auto mode move in then bag holding command\nEND_VAR\n","LineInfoPersistence":"(string)a82da23b-2aa8-41c6-a934-457baf72b925_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)4530","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}