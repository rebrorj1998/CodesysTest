{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)11629cdb-46e6-420e-8675-0d44608e967d","ParentGuid":"(Guid)90a46c2b-4f58-49df-a132-966d40fdd6cc","Name":"(string)Execute","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)f8a58466-d7f6-439f-bbb8-d4600e41d099","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"f8a58466","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_Fault\n//\tDescription: Faults should be of this FB type.  \n//  An associated FaultType variable needs to be declared in the HMIData global variable list in order to be exposed via OPCUA \n//\tImplementation should look as follows:\n//\n//  *** Instantiate the fault with constructor that contains the fault name: ***\n//  VAR (*Faults*)\n//\t\texampleFault1 : FB_Fault(name := CONCAT(_prefix,  'Example Fault 1'));\n//\t\texampleFault2 : FB_Fault(name := CONCAT(_prefix,  'Example Fault 2'));\n//  END_VAR\n//\n//  *** In alarm area of FB call the fault(s). refHMIFaults is passed in from above***\n//  IF __ISVALIDREF(refHMIFaults) THEN\n//\t\texampleFault1(HMIFault := refHMIFaults.exampleFault1);\n//\t\texampleFault2(HMIFault := refHMIFaults.exampleFault2, faultTrigger := someFaultCondition);\n//  END_IF\n//\n//\t*** Either assign faultTrigger in call (as in exampleFault2 above) or set it later in logic\n//\texampleFault1.faultTrigger := someFaultCondition;\n//\n//\tCreated by: Ben Hess\n//\tCreated Date: Tuesday, May 22, 2018\n//\n\n//\n_faultTriggerONS(CLK := faultTrigger);\nIF _faultTriggerONS.OSR THEN\n\tTrigger();\nEND_IF\n\n//\n_ackCommandONS(CLK := ackCommand);\nIF _ackCommandONS.OSR THEN\n\tAck();\nEND_IF\n\n//\nIF _acked AND NOT faultTrigger THEN\n\t_active := FALSE;\n\t_acked := FALSE;\nEND_IF\n\n// When no longer active, remove collection of active faults\n_activeONS(CLK := _active);\nIF _activeONS.OSF THEN\n\tGlobalObjects.CollectionOfActiveFaults.RemoveObject(THIS^);\n\t_logger.AddLogItem(CONCAT(InstanceName, ' Cleared'));\nEND_IF\n\n// Outputs\nactive := _active;\nacknowledged := _acked;\n","LineInfoPersistence":"(string)11629cdb-46e6-420e-8675-0d44608e967d_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)METHOD Execute\n","LineInfoPersistence":"(string)11629cdb-46e6-420e-8675-0d44608e967d_Decl_LineIds"}}}}}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","f8a58466":"{f8a58466-d7f6-439f-bbb8-d4600e41d099}","string":"System.String"}}},"FormatVersion":"1.0"}