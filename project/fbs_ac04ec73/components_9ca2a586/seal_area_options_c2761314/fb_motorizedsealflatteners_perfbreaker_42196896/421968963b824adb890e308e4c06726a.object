{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)42196896-3b82-4adb-890e-308e4c06726a","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_MotorizedSealFlatteners_PerfBreaker","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)c2761314-bdc0-40c6-afc0-b20c945c18cf"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block:  MotorizedSealFlattenersFB\n//    Description: State Machine and motor management for Motorized Seal Flateners\n//\n//    Created by: Ben Hess\n//    Created Date: Friday, April 6, 2018\n//    Updated by: Carlos Lopez\n//    Created Date: Friday, October, 2024\n{region 'Set Up'}\n\t\t\t\t\t\nSUPER^();\n\t\t\t// SET UP HORIZONTAL AXIS MOTOR \nsealFlattenersHorizontalAxisMotor(ptrEIPInputs := ADR(sealFlattenerHorizontalMotorInputs),\n                ptrEIPOutputs := ADR(sealFlattenerHorizontalMotorOutputs),\n                stepsPerInchSetpoint := Globals.STEPS_PER_INCH_SEAL_FLATTENER_HORIZONTAL_AXIS_MOTOR,\n\t\t\t\treversePolarity := TRUE, \n\t\t\t\tpositionOffset :=,\n\t\t\t\tdefaultCurrentSetpoint := defaultCurrentMSF, \n\t\t\t\tcommFail := sealFlattenerMotorCommFailInput,\n\t\t\t\tisHomable := TRUE);\nsealFlattenersHorizontalAxisMotor.Execute(); \n\n\t\t\t// Set offset if we have combobreaker. Offset from outside edge of seal flattener finger to inside edge of perf breaker finger.\nIF sealAreaOption = SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker THEN\n\tsealFlattenersHorizontalAxisMotor.positionOffset := SEAL_FLATTENER_FINGER_TO_PERF_BREAKER_OFFSET;\nELSE\n\tsealFlattenersHorizontalAxisMotor.positionOffset := 0;\t\nEND_IF\ndisplayPos := actualPosition := sealFlattenersHorizontalAxisMotor.absolutePositonInches;\n\t\n\t\t\t// Report as ready if mode is auto and we're not faulted\n_ready := (_mode = DEVICE_MODES.Auto) AND NOT (state = SEAL_FLATTENER_STATES.Fault);\n\t\t\t//\nretryResetTMR( PT := retryResetDuration );\n\t \n\t\t\t// IF PERF BREAKER IS DISABLED, MAKE SURE IT'S NOT IN THE DOWN POSITION\nIF NOT (mailerMaterial = MAILER_MATERIAL.paper) AND perfBreaker.extendedStatus THEN\n\tperfBreaker.MoveUp();\nEND_IF\n\t \n\t// Setup posisitons depending on perfbreaker type\nIF sealAreaOption = SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker THEN\n\tinSetpoint := 5.0;\n\t// Set positions for perf breaker combo moves\t\n\tIF mailerMaterial = MAILER_MATERIAL.paper THEN\n\t\toutSetpoint := HMIData.bagWidth - _outSetpointOffset;\t\t \t \n\t\tbagHoldingSetpoint := HMIData.bagWidth;\n\t\t_bagFeedPosition := HMIData.bagWidth + _bagFeedOffset;\n\t\tIF (HMIData.baggerModelSelection = ModelSelection.Pro18_1174) OR (HMIData.baggerModelSelection = ModelSelection.Pro18_1183) THEN\n\t\t\tMAX_OUT_SETPOINT := 19;\n\t\tELSE\n\t\t\tMAX_OUT_SETPOINT := 25;\n\t\tEND_IF\n\t\t\n\tELSIF mailerMaterial = MAILER_MATERIAL.poly THEN\n\t\tbagHoldingSetpoint := HMIData.bagWidth;\n\t\t// Clamp values\n\t\tIF (HMIData.baggerModelSelection = ModelSelection.Pro18_1174) OR (HMIData.baggerModelSelection = ModelSelection.Pro18_1183) THEN\n\t\t\tIF (outSetpoint + clearanceOffset) <= 19 THEN\n\t\t\t\t_bagFeedPosition := (outSetpoint + clearanceOffset);\n\t\t\tELSE\n\t\t\t\t_bagFeedPosition := MAX_OUT_SETPOINT := 19;\n\t\t\tEND_IF\n\t\tELSE\n\t\t\tIF (outSetpoint + clearanceOffset) <= 24.5 THEN\n\t\t\t\t_bagFeedPosition := (outSetpoint + clearanceOffset);\n\t\t\tELSE\n\t\t\t\t_bagFeedPosition := MAX_OUT_SETPOINT := 24.5;\n\t\t\tEND_IF\n\t\tEND_IF\n\tEND_IF\nELSE // \"Regular\" seal flatteners\n\tinSetpoint := 2.0;\n\toutSetpoint := HMIData.bagWidth + 0.2;\n\tbagHoldingSetpoint := HMIData.bagWidth;\n\t// Clamp values\n\tIF ((HMIData.baggerModelSelection = ModelSelection.Pro18_1174) OR (HMIData.baggerModelSelection = ModelSelection.Pro18_1183)) THEN\n\t\tMAX_OUT_SETPOINT := 17.8;\n\t\tIF (outSetpoint + clearanceOffset) <= 17.8 THEN\n\t\t\t_bagFeedPosition := (outSetpoint + clearanceOffset);\n\t\tELSE\n\t\t\t_bagFeedPosition := MAX_OUT_SETPOINT;\n\t\tEND_IF\n\tELSE\n\t\tMAX_OUT_SETPOINT := 23.8;\n\t\tIF (outSetpoint + clearanceOffset) <= 23.8 THEN\n\t\t\t_bagFeedPosition := (outSetpoint + clearanceOffset);\n\t\tELSE\n\t\t\t_bagFeedPosition := MAX_OUT_SETPOINT;\n\t\tEND_IF\n\tEND_IF\nEND_IF\n\t \n// more clamping\nIF outSetpoint > MAX_OUT_SETPOINT THEN\n\toutSetpoint := MAX_OUT_SETPOINT;\nEND_IF\t\t\t\t\t  \n\nIF _bagFeedPosition > MAX_OUT_SETPOINT THEN\n\t_bagFeedPosition := MAX_OUT_SETPOINT;\nEND_IF\t\n \n// flags for positioning\nIF ABS(actualPosition - outSetpoint) < positionThreshold THEN\n\tatOutSetpoint := TRUE;\nELSE\n\tatOutSetpoint := FALSE;\nEND_IF\nIF actualPosition - _bagFeedPosition < positionThreshold THEN\n\tatBagFeedSetpoint := TRUE;\nELSE\n\tatBagFeedSetpoint := FALSE;\nEND_IF \t \n\t \nIF ABS(actualPosition - inSetpoint) < positionThreshold THEN\n\tatInSetpoint := TRUE;\nELSE\n\tatInSetpoint := FALSE;\nEND_IF \n\t \nIF actualPosition > (bagHoldingSetpoint - bagHoldTolerance) THEN\n\tatBagHoldSetpoint := TRUE;\nELSE\n\tatBagHoldSetpoint := FALSE;\nEND_IF \n\n// necessary?\nIF mailerMaterial = MAILER_MATERIAL.poly THEN\n\t\t//IF HMIData.passthroughPosition < 4 THEN\n\t\t\t//bagFeedPosition := inSetpoint;\n\t\t//ELSE\t \n\t\t\t//bagFeedPosition := bagFeedPosition-5;\n\t//\tEND_IF\nEND_IF \n\t\t\t// CHANGE OFFSETS ACCORDING TO MACHINE TYPE\nIF HMIData.baggerModelSelection = modelSelection.Pro18_1183 THEN\n\t_outSetpointOffset := 0;\n\t_movingSetpointOffset := 5;\nELSIF HMIData.baggerModelSelection = modelSelection.Pro24_1182 THEN\n\t_outSetpointOffset := 0;\n\t_movingSetpointOffset := 5;\nEND_IF\n\t\t\t// SET UP BAG HOLDING CURRENT AND MOVE IN SPEED FOR DIFFERENT MAILER MATERIAL\nIF mailerMaterial = MAILER_MATERIAL.poly THEN\n\tbagHoldingCurrentMSF := bagHoldCurrentPoly;\n\tIF sealAreaOption = SealAreaOptionSelectionEnum.SealFlattenersWithPerfBreaker THEN\n\t\tmoveInSpeed := moveInSpeedPaper;\n\tELSE\n\t\tmoveInSpeed := moveInSpeedPoly;\n\tEND_IF\nELSIF mailerMaterial = MAILER_MATERIAL.paper THEN\n\tbagHoldingCurrentMSF := bagHoldCurrentPaper;\n\tmoveInSpeed := moveInSpeedPaper;\nEND_IF\n\t\t\t// Temporary delay between states for testing\nfingersDownDelay();\nbagDropDelay(PT := TO_TIME(HMIData.bagDropTime * 1000));\nmoveInDelay( PT := moveInDelayDuration );\ndelay();\njogInONS(CLK := jogIn);\njogOutONS(CLK := jogOut);\n\n\t\t\t// Setup the vertical axis motor\nsealFlattenersVerticalAxis.Execute();\n{endregion}\n{region \"Enable, Reset, Fault\"}\n\nIF enableONS.Q OR resetONS.Q THEN \n\t_reset := FALSE;\n\ttimeoutFault := FALSE;\n\tbagDropDelay.IN := FALSE;\n\tClearCommands();\n\thandLoadRequested := FALSE;\n\tstate := SEAL_FLATTENER_STATES.Reset;\nEND_IF\n\nIF enable AND NOT HMIData.sealFlattenersInUse THEN\n\t//state := SEAL_FLATTENER_STATES.Idle;\n\tIF NOT sealFlattenersHorizontalAxisMotor.HomeRequired AND NOT atBagFeedSetpoint AND (enableONS.Q OR resetONS.Q) THEN\n\t\t manualPosSetpoint := _bagFeedPosition;\n\t\t// moveToManualSetpoint := TRUE;\n\tEND_IF\nEND_IF\n\t \ntimeoutTimer();\n\t \nIF timeoutTimer.Q AND bagDropDelay.IN = FALSE THEN\n\ttimeoutFault := TRUE;\nEND_IF\nperfBreakerRetractDelayTMR( PT := perfBreakerDelayDuration);  \n{endregion} \n{region \"State Machine\"}\n\t\t\t// State amchine for motorized seal flatteners\nCASE state OF\n    \n    SEAL_FLATTENER_STATES.Idle :                                    \t//If enabled move to when requested\n                                                                    IF (enable AND HMIData.sealFlattenersInUse) AND (semiAutoModeSelected OR (autoModeSelected AND (_amMoveOut OR _amMoveToStart))) THEN\n                                                                        state := SEAL_FLATTENER_STATES.MoveFlattenersOut;\n                                                                        ClearCommands();\n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// If enabled move to feed to seal position\n                                                                    IF enable AND (autoModeSelected AND _amMoveToFeedToSeal) THEN\n                                                                        state := SEAL_FLATTENER_STATES.MoveFlattenersInForFeedToSeal;\n                                                                        ClearCommands();\n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(*IF enable AND autoModeSelected AND _amMoveIn OR _amMoveInToBagHolding THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersVerticalAxis.Retract();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MoveFlattenersIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClearCommands();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF*)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  //above two IF statements inserted during merge of Carlos' paper work\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enable AND NOT HMIData.sealFlattenersInUse AND _amMoveToBagFeed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MoveFlattenersToBagFeed;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClearCommands();\t \n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF HMIData.sealFlattenersInUse AND (semiAutoModeSelected OR (autoModeSelected AND _amMoveOut)) THEN\n                                                                        state := SEAL_FLATTENER_STATES.MoveFlattenersOut;\n                                                                        ClearCommands();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//IF enable AND autoModeSelected AND _amMoveIn THEN\n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF (enable AND HMIData.sealFlattenersInUse) AND autoModeSelected AND (_amMoveIn (*OR _amMoveInToBagHolding*)) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//IF enable AND autoModeSelected AND _amMoveIn THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersVerticalAxis.Retract();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MoveFlattenersIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClearCommands();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF jogInONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveDistance(distance := -18, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceleration := horizontalAxisAccel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeceleration := horizontalAxisDecel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvelocity := jogSpeed);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogOutONS.OSR THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveDistance(distance := 18, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceleration := horizontalAxisAccel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeceleration := horizontalAxisDecel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvelocity := jogSpeed);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF jogInONS.OSF OR jogOutONS.OSF THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF raiseService THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersVerticalAxis.Retract();  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\traiseService := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF lowerService THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersVerticalAxis.Extend();  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlowerService := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF moveToManualSetpoint THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveToPositionTorque(position := manualPosSetpoint, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceleration := horizontalAxisAccel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeceleration := horizontalAxisDecel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvelocity := moveOutSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent := 100);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveToManualSetpoint := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := FALSE;\n                                                                    \n    SEAL_FLATTENER_STATES.MoveFlattenersOut :                       // Move flatteners to out position\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := TRUE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                                    sealFlattenersHorizontalAxisMotor.MoveToPositionTorque(position := (outSetpoint), \n                                                                                                                        acceleration := moveOutAccel,\n                                                                                                                        deceleration := moveOutDecel,\n                                                                                                                        velocity := moveOutSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent := outCurrentMSF);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tposSetpoint := outSetpoint;                                                   \n                                                                    state := SEAL_FLATTENER_STATES.MovingFlattenersOut;\n                                                                    \n    SEAL_FLATTENER_STATES.MovingFlattenersOut :                     // \n                                                                    delay.IN := TRUE;\n                                                                    IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged AND (sealFlattenersHorizontalAxisMotor.absolutePositonInches >= (outSetpoint - _movingSetpointOffset) OR sealFlattenersHorizontalAxisMotor.alarms.currentFoldback) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersOut;\n                                                                        \tdelay.IN := FALSE; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                    END_IF\n                                                                    \n    SEAL_FLATTENER_STATES.MovedFlattenersOut :                      // Move flatteners to clearance position state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := FALSE;\n                                                                    IF enable AND semiAutoModeSelected OR (autoModeSelected AND _amMoveClearance) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MoveFlattenersUpAndToClearance;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersVerticalAxis.Retract();  \n                                                                        ClearCommands();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF (autoModeSelected AND _amMoveToStart) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t state := SEAL_FLATTENER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     _amMoveToStart := FALSE;\n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    SEAL_FLATTENER_STATES.MoveFlattenersUpAndToClearance :          // Move flatteners to clearance position\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := TRUE;\n                                                                    sealFlattenersHorizontalAxisMotor.MoveToPosition(position := outSetpoint - clearanceOffset,\n                                                                                                                     acceleration := horizontalAxisAccel,\n                                                                                                                     deceleration := horizontalAxisDecel,\n                                                                                                                     velocity := moveOutSpeed);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tposSetpoint := outSetpoint;                            \n                                                                    state := SEAL_FLATTENER_STATES.MovingFlattenersUpAndToClearance;    \n    \n    SEAL_FLATTENER_STATES.MovingFlattenersUpAndToClearance :        \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\t\n                                                                    IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged AND sealFlattenersHorizontalAxisMotor.status.inPosition\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(*posReached*)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF fingersDownDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersUpAndToClearance;    \n                                                                        \t\tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfingersDownDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfingersDownDelay.IN := TRUE;\n                                                                    \n    SEAL_FLATTENER_STATES.MovedFlattenersUpAndToClearance :         // Move flatteners to up state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagDropDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MoveFlattenersToBagFeed;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_FLATTENER_STATES.MoveFlattenersToBagFeed :      \t\t\t// Move flatteners to out of the way of the bag for feeding\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.PT := T#50MS; delay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveToPosition(position := _bagFeedPosition, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceleration := horizontalAxisAccel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeceleration := horizontalAxisDecel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvelocity := moveInSpeed);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tposSetpoint := _bagFeedPosition;  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovingFlattenersToBagFeed;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE;             \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n   SEAL_FLATTENER_STATES.MovingFlattenersToBagFeed :        \t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\n                                                                    IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged AND sealFlattenersHorizontalAxisMotor.status.inPosition\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(*posReached*) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersToBagFeed;    \n                                                                        \tdelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                    END_IF\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_FLATTENER_STATES.MovedFlattenersToBagFeed:\t\t\t\t\t       // Move flatteners to up state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := FALSE;\n\n                                                                    IF enable AND semiAutoModeSelected OR (autoModeSelected AND (_amMoveInToBagHolding OR _amMoveIn OR _amMoveHandLoad)) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MoveFlattenersIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClearCommands();\n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enable AND _amMoveToBagFeed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t state := SEAL_FLATTENER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _amMoveToBagFeed := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                \n    SEAL_FLATTENER_STATES.MoveFlattenersIn :                        // Move flatteners up and in                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveInDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF moveInDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveInDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNPDPerfDelay.IN := FALSE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF perfBreakerEnable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreaker.MoveUp();\t\t\t//CARLOS\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreakerRetractDelayTMR.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveInTMR.IN := TRUE;\t\t\t\t//CARLOS\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveBagHoldTMR.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n                                                                    \tIF perfBreakerRetractDelayTMR.Q OR NOT perfBreakerEnable THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveToPositionTorque(position := inSetpoint, \n                                                                                                                        acceleration := moveInAccel,\n                                                                                                                        deceleration := moveInDecel,\n                                                                                                                        velocity := moveInSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent := defaultCurrentMSF);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tposSetpoint := inSetpoint;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n                                                    \n                                                                    \t\tstate := SEAL_FLATTENER_STATES.MovingFlattenersIn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tperfBreakerRetractDelayTMR.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagDropDelay.PT := T#1S;\n                                                                    \n    SEAL_FLATTENER_STATES.MovingFlattenersIn :                      // If we did that command well move on\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClearCommands(); \n                                                                        delay.IN := TRUE;\n                                                                        IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged AND ((sealFlattenersHorizontalAxisMotor.Status.InPosition (*posReached*) AND NOT moveTST)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t OR (moveTST AND moveInCompleted)) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersIn;\n                                                                           \t\tdelay.IN := FALSE;    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                        END_IF \n                                                                    \n    SEAL_FLATTENER_STATES.MovedFlattenersIn :                        // Now that we're up and in move to down and 4 corners/bag holding\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := FALSE;\n                                                                    IF enable AND semiAutoModeSelected OR (autoModeSelected AND (_amMoveInToBagHolding OR _amMoveHandLoad)) THEN\n                                                                        sealFlattenersVerticalAxis.Extend();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovingFlattenersDown; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF _amMoveHandLoad THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t handLoadRequested := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                       ClearCommands();\n                                                                    END_IF   \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                                                                                                        \t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF enable AND (autoModeSelected AND _amMoveOut) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveToPosition(position := (outSetpoint  + 0), \n                                                                                                                        acceleration := horizontalAxisAccel,\n                                                                                                                        deceleration := horizontalAxisDecel,\n                                                                                                                        velocity := moveInSpeed);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tposSetpoint := outSetpoint;                                                    \n                                                                    \tstate := SEAL_FLATTENER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClearCommands();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n    \n    SEAL_FLATTENER_STATES.MoveFlattenersDown :            \t\t\t// Do moves for down and bag holding\n                                                                    state := SEAL_FLATTENER_STATES.MovingFlattenersDown;\n                             \n    SEAL_FLATTENER_STATES.MovingFlattenersDown :            \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//IF sealFlattenersVerticalAxis.CommandAcknowledged AND sealFlattenersVerticalAxis.Status.InPosition THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfingersDownDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF fingersDownDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF handLoadRequested THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandLoadRequested := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MoveFlattenersToBagHolding;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfingersDownDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//END_IF \n                                                                        \n\tSEAL_FLATTENER_STATES.MovedFlattenersDown :      \n\n\tSEAL_FLATTENER_STATES.MoveFlattenersInForFeedToSeal:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Do moves for down and bag holding\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := TRUE;    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsealFlattenersHorizontalAxisMotor.MoveToPosition(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tposition := bagHoldingSetpoint - FEED_TO_SEAL_INSET, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceleration := horizontalAxisAccel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeceleration := horizontalAxisDecel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvelocity := moveBagHoldingSpeed\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);                                                \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovingFlattenersToBagHolding;\n\n\tSEAL_FLATTENER_STATES.MovingFlattenersInForFeedToSeal:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersToBagHolding;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelay.IN := FALSE; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF   \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\n\tSEAL_FLATTENER_STATES.MovedFlattenersInforFeedToSeal:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttimeoutTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.Idle; \t\n\n\n\n      \t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                             \n    SEAL_FLATTENER_STATES.MoveFlattenersToBagHolding :            // Do moves for down and bag holding\n\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t  //traceStartCMD := true;\n                                                                  timeoutTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  moveOutTMR.IN := TRUE;    \n                                                                  sealFlattenersHorizontalAxisMotor.MoveToPositionTorque(position := bagHoldingSetpoint (*- _movingSetpointOffset*), \n                                                                                                                  acceleration := moveBagHoldAccel,\n                                                                                                                  deceleration := moveBagHoldDecel,\n                                                                                                                  velocity := moveBagHoldingSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent := bagHoldingCurrentMSF);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  posSetpoint := bagHoldingSetpoint;                                                \n                                                                  state := SEAL_FLATTENER_STATES.MovingFlattenersToBagHolding;\n                                                                        \n    SEAL_FLATTENER_STATES.MovingFlattenersToBagHolding :          \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  delay.IN := TRUE;\n                                                                  IF delay.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \tIF sealFlattenersHorizontalAxisMotor.CommandAcknowledged AND (actualPosition > 6.0) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveBagHoldDuration :=\tmoveBagHoldTMR.ET;\t\t//CARLOS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveBagHoldTMR.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveOutDuration := moveOutTMR.ET;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmoveOutTMR.IN := FALSE;\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := SEAL_FLATTENER_STATES.MovedFlattenersToBagHolding;\n                                                                        delay.IN := FALSE; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF   \n                                                                  END_IF \n                                                                        \n    SEAL_FLATTENER_STATES.MovedFlattenersToBagHolding :           \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  timeoutTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  state := SEAL_FLATTENER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  HMIData.motorizedSealFlattenerCycles.Increment();\n                                                                  Globals.motorizedSealFlattenersCount := Globals.motorizedSealFlattenersCount + 1;\n                                                                  Globals.sealFlattenerFingersCount := Globals.sealFlattenerFingersCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  traceStartCMD := FALSE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_FLATTENER_STATES.Reset:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  //MOVE FLATTS AND PERFBREAKER UP AND OUT TO AVOID OBSTRUCTION WITH PRESSUREBAR\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  //sealFlattenersHorizontalAxisMotor.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  retryResetTMR.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  perfBreaker.MoveUp();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  //sealFlattenersVerticalAxis.Retract();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  // CHECK THAT MOTOR IS READY (RESET HAS PROPAGATED)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  IF sealFlattenersHorizontalAxisMotor.status.motorEnabled AND NOT sealFlattenersHorizontalAxisMotor.status.alarmPresent AND NOT sealFlattenersHorizontalAxisMotor.status.driveFaulted THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  state := SEAL_FLATTENER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ELSIF retryResetTMR.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t  sealFlattenersHorizontalAxisMotor.Reset();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  retryResetTMR.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  state := SEAL_FLATTENER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  END_IF\t\t \n\nEND_CASE\n\t \n{endregion}\n\t \n{region \"Testing\"}\n\nIF stopPB THEN\n    sealFlattenersHorizontalAxisMotor.Stop();\n    stopPB := FALSE;\nEND_IF\n\nIF testTorque THEN\n\tsealFlattenersHorizontalAxisMotor.MoveDistanceTorque(-0.5, 100, 100, 100, 20);\n\ttestTorque := FALSE;\nEND_IF\n\t \nIF testMovePB THEN\n\ttraceStartCMD := TRUE;\n\tsealFlattenersHorizontalAxisMotor.MoveToPositionTorque(position := testMoveSP, \n                                              acceleration := testMoveAccel,\n                                              deceleration := testMoveDecel,\n                                              velocity := testMoveSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\tcurrent := testCurrent);\n\tmoveInTMR.IN := TRUE;\nEND_IF\n\nmoveInTMR( PT := T#2S );\nIF moveInTMR.Q THEN\n\t traceStartCMD := FALSE;\n\t moveInTMR.IN := FALSE;\nEND_IF\nmoveOutTMR( PT := T#2S );\nmoveBagHoldTMR( PT := T#2S );\nmoveInCompleted := ABS(inSetpoint - sealFlattenersHorizontalAxisMotor.absolutePositonInches) < moveInThreshold;\n\nIF PositionReached( currentPosition := sealFlattenersHorizontalAxisMotor.absolutePositonInches, positionSetpoint := posSetpoint) THEN\n\tposReached := TRUE;\nELSE\n\tposReached := FALSE;\nEND_IF \n\t  \n{endregion}","LineInfoPersistence":"(string)42196896-3b82-4adb-890e-308e4c06726a_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_MotorizedSealFlatteners_PerfBreaker EXTENDS FB_BaseComponent IMPLEMENTS IComponentStatus\nVAR_INPUT\n\tsealFlattenersVerticalAxis \t\t: ICylinder  ;\t\t\n\tmailerMaterial \t\t\t\t\t: MAILER_MATERIAL \t:= MAILER_MATERIAL.paper;\n\tsealAreaOption\t\t\t\t\t: SealAreaOptionSelectionEnum;\n\tperfBreakerEnable \t\t\t\t: BOOL ;\t\n\thorizontalAxisAccel \t\t\t: INT \t\t\t\t:= 1000;    \t// Acceleration for Move to Manual Setpoint and Jog Commands\n    horizontalAxisDecel \t\t\t: INT \t\t\t\t:= 500;    \t\t// Deceleration for Move to Manual Setpoint and Jog Commands\n\tmanualPosSetpoint \t\t\t\t: REAL ;\t\t\t\t\t// Position for Move to Manual Setpoint Command\t\n    delay : TON := (PT:= T#25MS);\n\tfingersDownDelay : Standard.TON := (PT := T#50MS);\n\tsealFlattenerMotorCommFailInput : BOOL;\nEND_VAR\nVAR_IN_OUT\n\tjogIn \t\t\t\t\t\t\t: BOOL ;\n\tjogOut \t\t\t\t\t\t\t: BOOL ;\n\traiseService \t\t\t\t\t: BOOL ;\n\tlowerService \t\t\t\t\t: BOOL ;\n\tmoveToManualSetpoint \t\t\t: BOOL ;\n\tperfBreaker \t\t\t\t\t: PerfBreaker ;\nEND_VAR\nVAR_OUTPUT\n    state : SEAL_FLATTENER_STATES;\n\tactualPosition : REAL;\n\ttimeoutFault : BOOL;\n\tatOutSetpoint \t\t\t\t\t: BOOL;\n\tatInSetpoint: BOOL;\n\tatBagHoldSetpoint: BOOL;\n\tatBagFeedSetpoint: BOOL;\n\tdisplayPos : REAL;\nEND_VAR\nVAR\n\tsealFlattenersHorizontalAxisMotor \t: FB_AppliedMotionStepServoEIPBase();\n    _amMoveOut \t\t\t\t\t\t\t: BOOL;                 // Auto mode move out command\n\t_amMoveIn \t\t\t\t\t\t\t: BOOL;\t\t\t\t\t// Auto mode Move In Command\n    _amMoveClearance \t\t\t\t\t: BOOL;            \t\t// Auto mode move Clearance command\n    _amMoveInToBagHolding \t\t\t\t: BOOL;       \t\t\t// Auto mode move in then bag holding command\n\t_amMoveHandLoad \t\t\t\t\t: BOOL;\t\t\t    \t// Auto move to hand load positon command\n\t_amMoveToFeedToSeal \t\t\t\t: BOOL;\n\t_amMoveToStart\t\t\t\t\t\t: BOOL;\t\t\t\t\t// Auto move to start position command\n\t_amMoveToBagFeed \t\t\t\t\t: BOOL;\t\t\t\t\t// Auto Move to Bag Feed Position\n\t_outSetpointOffset \t\t\t\t\t: REAL \t\t:= -2.5; \t// Offset value for sealing\n\t_movingSetpointOffset \t\t\t\t: REAL \t\t:= 5; \t\t// Offset value for bag holding/mailer filling position\n\t_bagFeedOffset\t\t\t\t\t\t: REAL \t\t:= 1;\n\t_bagFeedPosition \t\t\t\t\t: REAL;\n\ttestMovePB \t\t\t\t\t\t\t: BOOL;\n    testMoveSP \t\t\t\t\t\t\t: REAL;\n\tstopPB \t\t\t\t\t\t\t\t: BOOL;\n\tMAX_OUT_SETPOINT \t\t\t\t\t: REAL \t\t:= 21.5;\t// Maximum position due to physical constrains of mechanical assembly\n\tdefaultCurrentMSF \t\t\t\t\t: DINT \t\t:= 180;\t\t// Default Current Setpoint for Seal Flatteners\n\toutCurrentMSF \t\t\t\t\t\t: DINT \t\t:= 180;\t\t// Current Setpoint for Seal Flattener Moving Out\n\tbagHoldingCurrentMSF \t\t\t\t: DINT \t\t:= 100;\t\t// Current Setpoint for Bag Holding Move\n\tbagHoldCurrentPoly \t\t\t\t\t: DINT \t\t:= 100;\t\t// Current Setpoint for Bag Holding Move for Poly material\n\tbagHoldCurrentPaper \t\t\t\t: DINT \t\t:= 130;\t\t// Current Setpoint for Bag Holding Move for Paper material\n\tpositionThreshold\t\t\t\t\t: real\t\t:= 0.1;\n\t\n\tjogInONS: FB_ONS;\n\tjogOutONS: FB_ONS;\n\tjogSpeed : INT := 100;\n    timeoutTimer : Standard.TON := (PT := T#2S);\n\tbagDropDelay : Standard.TON := (PT := T#50MS);    \n\tNPDPerfDelay : Standard.TON := (PT := T#5S); \n\n\thandLoadRequested : BOOL;\n\ttestTorque : BOOL;\n\n\tmoveInCompleted: BOOL;\n\tmoveInThreshold: REAL := 0.5;;\n\t\n\tinSetpoint : REAL := 2;            \t\t// In setpoint in inches\n    moveInSpeed : INT := 1500;            \t// Speed to move in in move\n\tmoveInAccel : INT := 500;\t\n\tmoveInDecel : INT := 500;\n\t\n    outSetpoint : REAL := 17.7;             // Out (sealing) setpoint in inches\n    moveOutSpeed : INT := 800;            \t// Speed to move in out move\n\tmoveOutAccel : INT := 1200;\t\n\tmoveOutDecel : INT := 1200;\n\tmoveOutTMR : TON;\n\tmoveOutDuration : TIME;\n\t\n    bagHoldingSetpoint : REAL := 17;    \t// Bag holding setpoint in inches            \n    moveBagHoldingSpeed : INT := 1000;    \t// Speed to move in bag holding move    \n\tmoveBagHoldAccel : INT := 1000;\t\n\tmoveBagHoldDecel : INT := 1500;\n\tmoveBagHoldTMR : TON;\n\tmoveBagHoldDuration : TIME;\n\t \n\tmoveTST : BOOL;\n\t\n\tperfBreakerRetractDelayTMR : standard.TON;\n\tperfBreakerDelayDuration : TIME := T#5MS;\n\n\tmoveInSpeedPoly: INT := 3000;\n\tmoveInSpeedPaper: INT := 1500;\n\n\ttraceStartCMD: BOOL;\n\tmoveInDelay: TON;\n\tmoveInDelayDuration: TIME := T#100MS;\n\ttestCurrent: DINT;\n\ttestMoveAccel: INT := 2000;\n\ttestMoveDecel: INT := 2000;\n\ttestMoveSpeed: INT := 2000;\n\n\tposReached: BOOL;\n\tposSetpoint: REAL;\n\tretryResetTMR\t\t\t: TON;\n\tretryResetDuration\t\t: TIME\t\t:= T#50MS;\n\n\tmoveInTMR: TON;\n\t\n\tbagHoldTolerance: REAL := 2.5;\n    clearanceOffset : REAL := 2.0;        // Clearance Offset in inches\n\n\t\nEND_VAR\n\nVAR CONSTANT\n\tFEED_TO_SEAL_INSET : REAL := 1;\n\tSEAL_FLATTENER_FINGER_TO_PERF_BREAKER_OFFSET : REAL := 3.75;\nEND_VAR","LineInfoPersistence":"(string)42196896-3b82-4adb-890e-308e4c06726a_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)10017","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}