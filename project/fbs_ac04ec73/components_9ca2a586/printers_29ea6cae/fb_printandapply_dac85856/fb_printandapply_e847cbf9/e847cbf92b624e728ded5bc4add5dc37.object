{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)e847cbf9-2b62-4e72-8ded-5bc4add5dc37","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_PrintAndApply","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)dac85856-5c52-4372-8cca-6fab9514fe3f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: PrintAndApplyFB\n//    Description: Statuses and Faults for print and apply\n//    Created by: Ben Hess\n//    Created Date: December 7th, 2020\n\n// Run parent FB\nSUPER^();\n\n// TCP/IP server used to clear labels on reset\t \n_tcpServer();\n\n// Warnings to display on HMI\nprinterNotReady := faultedStatus OR commFail;\nwaitingForPrinter := ((state = PRINT_AND_APPLY_STATES.WaitForLOTAR) OR (state = PRINT_AND_APPLY_STATES.WaitForLabel));\n\n// Timeout on waiting for printer too long\nwaitForPrinterFaultTimer(\n\tIN := waitingForPrinter AND (waitForPrinterFaultSetting > 0) AND enable, \n\tPT :=  TO_TIME(waitForPrinterFaultSetting * 1000.0),\n\t Q => waitForPrintFault\n);\n\n// Fault if package does not exit incline conveyor\npackageFailedToExitTimer(\n\tIN := watchForBagExit AND (packageExitTimeSetting > 0) AND enable, \n\tPT :=  TO_TIME(packageExitTimeSetting * 1000.0)\n);\n\t\t\t\t\t\t\t\t\t\t\t\t\n// Fault if not reached tamp head by the time conveyor stops\npackageFailedToReachTampTimer(\n\tIN := watchForBagToTamp AND (packageToTampTimeSetting > 0) AND enable, \n\tPT :=  TO_TIME(packageToTampTimeSetting * 1000.0)\n);\n\n// Fault if label is in queue for too long\nlabelsInQueueFaultTimer(IN := dataReady AND enable, \n\t\t\t\t\t\tQ=> labelsInQueue);\t\n\t\t\t\t\t\t\t\nIF watchForBagExit AND packageAtExitSensor THEN\n\twatchForBagExit := FALSE;\nEND_IF\n\t\t\t\t\t\nIF watchForBagToTamp AND productAtApplicatorSensor THEN\n\twatchForBagToTamp := FALSE;\nEND_IF\n\njammedFault := packageFailedToExitTimer.Q OR packageFailedToReachTampTimer.Q;\n\n// Set a flag is machine faults while a label might be present\nlabelMightBePresent := (state = PRINT_AND_APPLY_STATES.ReadyToApply) \n\t\t\t\t\t\tOR (state = PRINT_AND_APPLY_STATES.WaitForLOTAR) \n\t\t\t\t\t\tOR (state = PRINT_AND_APPLY_STATES.Applying)\n\t\t\t\t\t\tOR dataReady;\n\t\t\t\t\t\t\n// Displays as a pop-up on HMI\nIF ((baggerFaulted AND labelMightBePresent) OR faultedStatusONS.OSR) AND enable THEN\n\tclearOutBaggerIndicaiton := TRUE;\nEND_IF\n\n// Ack from operator screen that bagger has been cleared out\nIF _ackBaggerClear THEN\n\t// Only clear flag if product sensor on conveyor is clear\n\tIF NOT productAtApplicatorSensor THEN\n\t\tclearOutBaggerIndicaiton := FALSE;\n\tEND_IF \n\t_ackBaggerClear := FALSE;\nEND_IF\n\n// One shots\ninCycleONS(CLK := baggerInCycle);\nbaggerFaultedONS(CLK := baggerFaulted);\nfaultedStatusONS(CLK := faultedStatus);\n\n// Send reset output pulse\nresetOutputTimer.DwellSetting := 500;\nresetOutputTimer(Q => resetOutput);\n\n// Run trigger delay/dwell\ntriggerToPanther(Q => triggerOutput);\n\n// \n_conveyorClearedAfterCollisionONS(CLK := conveyorClearAfterCollision);\nIF _conveyorClearedAfterCollisionONS.OSR AND state = PRINT_AND_APPLY_STATES.Inhibited THEN\n\tstate := PRINT_AND_APPLY_STATES.Idle;\nEND_IF\n\n// Run Exit conveyor after tamping\nexitConveyorRunAfterPA.DwellSetting := TO_DINT(exitConveyorRunAfterPASetting * 1000.0);\nexitConveyorRunAfterPA(Q => runConveyorAfterApply);\n\n// Resetting logic\nIF resetONS.Q THEN\n\tIF (faultInput \n\t\tOR (baggerFaulted AND NOT (exemptFaultsActive AND GlobalObjects.CollectionOfActiveFaults.totalObj = 1)))\n\t\tAND enable THEN\n\t\t_tcpServer.ClearLabel();\n\t\tresetOutputTimer.Trigger();\n\tEND_IF\n\tIF NOT productAtApplicatorSensor THEN\n\t\tclearOutBaggerIndicaiton := FALSE;\n\tEND_IF \n\twatchForBagExit := FALSE;\n\twatchForBagToTamp := FALSE;\n\tpackageFailedToExitFault := FALSE;\n\t_beginCycle := FALSE;\n\tpackageWasSeen := FALSE;\n\ttriggerToPanther.Reset();\n\texitConveyorRunAfterPA.Reset();\n\tstate := PRINT_AND_APPLY_STATES.Idle;\nEND_IF\n\nIF NOT enable OR commFail OR faultedStatusONS.OSR OR baggerFaultedONS.OSR THEN\n\tstate := PRINT_AND_APPLY_STATES.Fault;\nEND_IF\n\nCASE state OF\n\tPRINT_AND_APPLY_STATES.Idle:\t\t\t// Wait for bagger cycle to begin\n\t\t\t\t\t\t\t\t\t\t\tinhibitConveyor := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tinhibitCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpackageWasSeen := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tIF _beginCycle THEN\n\t\t\t\t\t\t\t\t\t\t\t\t_beginCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\twatchForBagToTamp := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINT_AND_APPLY_STATES.WaitForLOTAR;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\n\tPRINT_AND_APPLY_STATES.WaitForLOTAR:\t// Wait for LOTAR from Panther. Add delay to allow for accel on conveyor if stopped, otherwise package can sail right through\n\t\t\t\t\t\t\t\t\t\t\tIF LOTAR THEN\n\t\t\t\t\t\t\t\t\t\t\t\tIF NOT productAtApplicatorSensor AND NOT packageWasSeen THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\ttriggerToPanther.DelaySetting := TO_DINT(tampDelayWithLOTAR * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINT_AND_APPLY_STATES.ReadyToApply;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tIF productAtApplicatorSensor THEN\n\t\t\t\t\t\t\t\t\t\t\t\ttriggerToPanther.DelaySetting := TO_DINT(tampDelayWithoutLOTAR * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\twatchForBagToTamp := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\tinhibitConveyor := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\tpackageWasSeen := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tinhibitCycle := TRUE;\n\t\n\tPRINT_AND_APPLY_STATES.ReadyToApply:\t// If package is seen, trigger Print and Apply\n\t\t\t\t\t\t\t\t\t\t\tinhibitConveyor := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tIF productAtApplicatorSensor OR packageWasSeen THEN\n\t\t\t\t\t\t\t\t\t\t\t\tIF NOT packageHeldAtExitSensor THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tinhibitCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\tpackageWasSeen := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\twatchForBagToTamp := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\ttriggerToPanther.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRunAfterPA.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINT_AND_APPLY_STATES.Applying;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\n\tPRINT_AND_APPLY_STATES.Applying:\t\t// Allow for a debounce on package leaving the photoeye\n\t\t\t\t\t\t\t\t\t\t\tIF productLeavingDebounce.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\tIF NOT packageHeldAtExitSensor THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\twatchForBagExit := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINT_AND_APPLY_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\tinhibitConveyor := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\texitConveyorRunAfterPA.ManualOff();\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINT_AND_APPLY_STATES.Inhibited;\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\n\tPRINT_AND_APPLY_STATES.Fault:\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\tinhibitConveyor := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tinhibitCycle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\twatchForBagExit := FALSE;\n\t\t\t\t\t\t\t\t\t\t\twatchForBagToTamp := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpackageFailedToExitFault := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpackageFailedToReachTamp := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpackageRemovedBeforeTamp := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpackageWasSeen := FALSE;\n\t\t\t\t\t\t\t\t\t\t\texitConveyorRunAfterPA.Reset();\n\t\t\t\t\t\t\t\t\t\t\ttriggerToPanther.Reset();\t\t\t\t\t\t\t\t\nEND_CASE\n\n\n// Product leaving rear exit conveyor debounce\nproductLeavingDebounce(IN := (NOT productAtApplicatorSensor) AND state = PRINT_AND_APPLY_STATES.Applying);\n\nprinterReadyToApply := state = PRINT_AND_APPLY_STATES.ReadyToApply;\n\n// Comms heartbeat for comm fail fault\ncommFailTimer1(IN := enable AND heartbeat);\ncommFailTimer2(IN := enable AND NOT heartbeat);\ncommFail := commFailTimer1.Q OR commFailTimer2.Q;\n\n// Faulted status from Print and Apply\nfaultedStatus := NOT commFail AND NOT iPAFaulted AND enable;","LineInfoPersistence":"(string)e847cbf9-2b62-4e72-8ded-5bc4add5dc37_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_PrintAndApply EXTENDS FB_BaseComponent IMPLEMENTS IComponentStatus\nVAR_INPUT\n\ttampDelayWithLOTAR : REAL;\n\ttampDelayWithoutLOTAR : REAL;\n\tpackageAtExitSensor : BOOL;\n\tpackageHeldAtExitSensor : BOOL;\n\tconveyorClearAfterCollision : BOOL;\n\texemptFaultsActive : BOOL;\n\tbarcodeVerificationFailure : BOOL;\n\tpressureBarObstruction : BOOL;\n\tbaggerFaulted : BOOL;\n\tbaggerInCycle : BOOL;\n\tbypass : BOOL;\n\tdataReady : BOOL;\n\tLOTAR : BOOL;\n\tfaultInput : BOOL;\n\tPACycleComplete : BOOL;\n\tapplicatorHome : BOOL;\n\theartbeat : BOOL;\n\tproductAtApplicatorSensor : BOOL;\n\texitConveyorRunAfterPASetting : REAL;\n\twaitForPrinterFaultSetting : REAL;\n\tpackageExitTimeSetting : REAL;\n\tpackageToTampTimeSetting : REAL;\nEND_VAR\nVAR_OUTPUT\n\tstate : PRINT_AND_APPLY_STATES;\n\tcommFail : BOOL;\n\tfaultedStatus : BOOL;\n\tprinterNotReady : BOOL;\n\tprinterReadyToApply : BOOL;\n\twaitingForPrinter : BOOL;\n\ttriggerOutput : BOOL;\n\tresetOutput : BOOL;\n\tinhibitCycle : BOOL;\n\tinhibitConveyor : BOOL;\n\trunConveyorAfterApply : BOOL;\n\twaitForPrintFault : BOOL;\n\tjammedFault : BOOL;\n\tclearOutBaggerIndicaiton : BOOL;\n\tpackageFailedToExitFault : BOOL;\n\tpackageFailedToReachTamp : BOOL;\n\tpackageRemovedBeforeTamp : BOOL;\n\tlabelsInQueue : BOOL;\nEND_VAR\nVAR \n\t_pantherTriggerDelay : INT := 0;\n\tresetOutputTimer : FB_MonostableMultivibrator();\n\ttriggerToPanther : DelayDwellFB() := (Dwellsetting := 1000);\n\texitConveyorRunAfterPA : DelayDwellFB() := (Dwellsetting := 3000);\n\tinCycleONS : FB_ONS;\n\tbaggerFaultedONS : FB_ONS;\n\tfaultedStatusONS : FB_ONS;\n\t_beginCycle : BOOL;\n\t_ackBaggerClear : BOOL;\n\tlabelMightBePresent : BOOL;\n\twatchForBagExit : BOOL;\n\twatchForBagToTamp : BOOL;\n\tpackageWasSeen : BOOL;\n\tcommFailTimer1 : Standard.TON := (PT := T#2S);\n\tcommFailTimer2 : Standard.TON := (PT := T#2S);\n\twaitForPrinterFaultTimer : Standard.TON;\n\tpackageFailedToExitTimer : Standard.TON;\n\tpackageJammedAtExitTimer : Standard.TON;\n\tpackageFailedToReachTampTimer : Standard.TON;\n\tproductLeavingDebounce : Standard.TON := (PT := T#500MS);\n\tlabelsInQueueFaultTimer : Standard.TON := (PT := T#5S);\n\t_conveyorClearedAfterCollisionONS : FB_ONS;\n\t_tcpServer : FB_TCPClient();\nEND_VAR\t\nVAR_IN_OUT\nEND_VAR\n","LineInfoPersistence":"(string)e847cbf9-2b62-4e72-8ded-5bc4add5dc37_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)3393","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}