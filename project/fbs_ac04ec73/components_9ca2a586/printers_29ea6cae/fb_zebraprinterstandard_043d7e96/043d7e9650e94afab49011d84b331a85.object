{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)043d7e96-50e9-4afa-b490-11d84b331a85","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_ZebraPrinterStandard","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)29ea6cae-e00d-4ca4-ba40-2aa0851a44e6"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: Printer\n//    Description: This program manages the aspects of a (Zebra) printer\n//    Created by: Ben Hess\n//    Created Date: April 2nd, 2018\n\nSUPER^();\n\n// Enable TCP Server for label sending\ntcpServer();\nendOfPrintONS(CLK := printerEndOfPrint);\n\n// Report as ready if mode is auto and we're not faulted\n_ready := (_mode = DEVICE_MODES.Auto) AND NOT (state = PRINTER_STATES.Fault);\n\n// // Turned off until fault is added to the HMI\n// printerNotPrintingTimer(IN := oPrinterStartPrint AND NOT printerEndOfPrint);\n// IF printerNotPrintingTimer.Q THEN\n// \tprinterNotPrintingFault.Trigger();\n// END_IF\n\nIF NOT (HMIData.mailerMaterial = MAILER_MATERIAL.paper) THEN\n\t_printerRibbonTimeoutTimer();\nEND_IF\n\n\n_printerPrintSignalSettlingTimer(IN := state = PRINTER_STATES.Printing);\nprintHeadDebounce(PT:= printHeadDebouneSetpoint, Q=> printHeadDebounced);\n\nIF enableONS.Q OR resetONS.Q THEN\n    state := PRINTER_STATES.Idle;\n\t_reset := FALSE;\n\t_amGoToIdle := FALSE;\n\t_amSendPrintSignal := FALSE;\n\t_amPrintNow := FALSE;\n\tprintHeadDebounced := FALSE;\n\toRunPrinterRibbonUnwindMotor := FALSE;\n\toLowerPrintHead := FALSE;\nEND_IF\n\nIF NOT enable THEN\n    state := PRINTER_STATES.Fault;\n\toRunPrinterRibbonUnwindMotor := FALSE;\n\toLowerPrintHead := FALSE;\nEND_IF\n\nIF HMIData.printHeadServiceRaise THEN\n\toLowerPrintHead := FALSE;\n\tHMIData.printHeadServiceRaise := FALSE;\nELSIF HMIData.printHeadServiceLower THEN\n\toLowerPrintHead := TRUE;\n\tHMIData.printHeadServiceLower := FALSE;\nEND_IF\n\n\n//State machine for the printer\nCASE state OF\n    PRINTER_STATES.Idle :                           // Go to waiting for data if printer is ready\n \t\t\t\t\t\t\t\t\t\t\t\t\t_printRibbonStateChanges := 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t_printerRibbonTimeoutTimer.IN := FALSE;\n                                                    oRunPrinterRibbonUnwindMotor := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\toPrinterStartPrint := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tprintHeadDebounce.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tprintHeadDebounced := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT printerDataReady THEN\n                                                        IF autoSendLabel THEN\n                                                            tcpServer.SendLabel();\n                                                        END_IF\n                                                        state := PRINTER_STATES.WaitingForData;\n                                                    ELSE\n                                                        state := PRINTER_STATES.DataReady;\n                                                    END_IF\n                                                    \n    PRINTER_STATES.WaitingForData :                 // If printerDataReady drops out the label data was received\n                                                    IF printerDataReady THEN\n                                                        state := PRINTER_STATES.DataReady;    \n                                                    END_IF\n                                                \n    PRINTER_STATES.DataReady :                        // Wait for command to begin printing\n                                                    IF NOT printerDataReady THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINTER_STATES.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF _mode = DEVICE_MODES.Auto AND _amPrintNow THEN\n                                                        state := PRINTER_STATES.BeginPrintCycle;\n                                                        _amPrintNow := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprintHeadDebounce.IN := TRUE;\n                                                        oLowerPrintHead := TRUE;\n                                                        oRunPrinterRibbonUnwindMotor := TRUE;\n                                                    END_IF                                    \n            \n    PRINTER_STATES.BeginPrintCycle :                // Start printing\n                                                    IF _amSendPrintSignal THEN\n                                                        oPrinterStartPrint := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_amSendPrintSignal := FALSE;\n                                                        printHeadDebounce.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINTER_STATES.Printing;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_previousRibbonEncoderState := ribbonEncoderState;\n                                                    END_IF                                                    \n                                        \n    PRINTER_STATES.Printing :                       \n\t\t\t\t\t\t\t\t\t\t\t\t\t//\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t_printerRibbonTimeoutTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF _previousRibbonEncoderState <> ribbonEncoderState THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_printerRibbonTimeoutTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_previousRibbonEncoderState := ribbonEncoderState;\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF _printerRibbonTimeoutTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toLowerPrintHead := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tribbonFault.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate := PRINTER_STATES.Idle; \n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t// While printing, wait for End of Print signal\n                                                    IF (endOfPrintONS.OSR OR endOfPrintONS.OSF) AND _printerPrintSignalSettlingTimer.Q THEN\n                                                        oPrinterStartPrint := FALSE;\n                                                        oLowerPrintHead := FALSE;\n                                                        state := PRINTER_STATES.DonePrinting;    \n                                                    END_IF\n                                        \n    PRINTER_STATES.DonePrinting :                    //Done printing, feed a little more through\n                                                    IF _mode = DEVICE_MODES.Auto AND _amGoToIdle THEN\n                                                        oRunPrinterRibbonUnwindMotor := FALSE;\n                                                        state := PRINTER_STATES.Idle;\n                                                        _amGoToIdle := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.printerCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.printHeadClean.Increment();\n                                                        Globals.printerCycleCounts := Globals.printerCycleCounts + 1;\n                                                    END_IF                       \n                                        \nEND_CASE","LineInfoPersistence":"(string)043d7e96-50e9-4afa-b490-11d84b331a85_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_ZebraPrinterStandard EXTENDS FB_BaseComponent IMPLEMENTS IComponentStatus\nVAR_INPUT\n    autoSendLabel :BOOL;    // Automatically send a label\n\tribbonEncoderState : BOOL;\t// Ribbon Encoder Input\n\tenableRibbonDetection : BOOL := TRUE; \n\treverseEndPrint : BOOL;               \nEND_VAR\nVAR_OUTPUT\n    state : PRINTER_STATES; // Printer State Machine\n\toLowerPrintHead : BOOL;\n\tprintHeadDebounced : BOOL;\n\tribbonFault : FB_Fault(name := 'Printer Ribbon Fault');\nEND_VAR\nVAR\n    _amPrintNow : BOOL;                // Auto mode - print now\n    _amSendPrintSignal : BOOL;        // Auto mode - send print signal\n    _amGoToIdle : BOOL;                // Auto mode - Acked, go back to idle mode\n    printHeadDebounce : TON;\n\tprintStarted : BOOL;\n    printHeadDebouneSetpoint : TIME := T#50MS;\n    tcpServer : FB_TCPClient();\n\tendOfPrintONS : FB_ONS();\n\tprinterNotPrintingFault : FB_Fault(name := 'Printer didnt respond to print request');\n\tprinterNotPrintingTimer : Standard.TON := (PT := T#250MS);\n\t_printerRibbonTimeoutTimer : Standard.TON := (PT := T#500MS);\n\t_printerPrintSignalSettlingTimer : Standard.TON := (PT := T#100MS);\n\t_printRibbonStateChanges : SINT;\n\t_previousRibbonEncoderState : BOOL;\nEND_VAR\n","LineInfoPersistence":"(string)043d7e96-50e9-4afa-b490-11d84b331a85_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)1923","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}