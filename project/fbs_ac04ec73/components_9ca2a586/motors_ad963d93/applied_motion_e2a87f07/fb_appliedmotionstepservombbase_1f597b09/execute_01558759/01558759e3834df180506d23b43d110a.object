{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)01558759-e383-4df1-8050-6d23b43d110a","ParentGuid":"(Guid)1f597b09-3e46-4e9c-b275-9de2f3cdba24","Name":"(string)Execute","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)f8a58466-d7f6-439f-bbb8-d4600e41d099","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"f8a58466","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: AppliedMotionStepServo\n//    Description: This block provides an abstraction for a Applied Motion Step Servo\n//    Created by: Ben Hess\n//    Created Date: April 2nd, 2018\n\n//Map raw Modbus Registers to parameters\nabsolutePositionSteps.highWord := modbusInputParameters[6];\nabsolutePositionSteps.lowWord := modbusInputParameters[7];\ndistanceSteps.highWord := modbusInputParameters[30];\ndistanceSteps.lowWord := modbusInputParameters[31];\njogAccel := WORD_TO_INT(modbusInputParameters[46]);\njogDecel := WORD_TO_INT(modbusInputParameters[47]);\njogVelocity := WORD_TO_INT(modbusInputParameters[48]);\npointToPointAccel := WORD_TO_INT(modbusInputParameters[27]);\npointToPointDecel := WORD_TO_INT(modbusInputParameters[28]);\nvelocity := WORD_TO_INT(modbusInputParameters[29]);\nstepServoStatusRaw := WORD_TO_INT(modbusInputParameters[1]);\nQSegmentRunning := WORD_TO_INT(modbusInputParameters[17]);\n\n//Convert Distance setpoint to steps.  Reverse polarity for display purposes if needed. \n//oDistanceSteps.displayValue := REAL_TO_DINT((oDistanceInches) * stepsPerInch);\n//oDistanceSteps.rawValue := REAL_TO_DINT((oDistanceInches ) * stepsPerInch);\n//DistanceSteps.displayValue := DistanceSteps.rawValue;\ndistanceInches := (DINT_TO_REAL(distanceSteps.displayValue) / INT_TO_REAL(stepsPerInchSetpoint));    \nabsolutePositionSteps.displayValue := absolutePositionSteps.rawValue;\nabsolutePositonInches := (DINT_TO_REAL(absolutePositionSteps.displayValue) / INT_TO_REAL(stepsPerInchSetpoint));\n\n//Homing required from motor - for now just if there was an initialization seen.\nhomeRequiredIndication S= status.initializing OR Globals.firstScan;\n\nIF reversePolarity THEN\n    //oDistanceSteps.rawValue := oDistanceSteps.rawValue * -1; \n    distanceInches := distanceInches * -1;\n    absolutePositonInches := absolutePositonInches * -1; \nEND_IF\n\n//Get Servo Status and unpack\nstatus(statusCode := StepServoStatusRaw);\n\n//Bit-packing for LONG types over Modbus\nModbusLongHandler.Pack(distanceSteps);\nModbusLongHandler.Pack(absolutePositionSteps);\n\n\n//Manual moves for motor\nIF moveDistanceManualPB THEN\n    MoveDistance(distance := distanceSetpointInches, acceleration := pointToPointAccelSetpoint, deceleration := pointToPointDecelSetpoint, velocity := velocitySetpoint);\n    moveDistanceManualPB := FALSE;\nEND_IF\n\nIF movePositionManualPB THEN\n    MoveToPosition(position := distanceSetpointInches, acceleration := pointToPointAccelSetpoint, deceleration := pointToPointDecelSetpoint, velocity := velocitySetpoint);\n    movePositionManualPB := FALSE;\nEND_IF","LineInfoPersistence":"(string)01558759-e383-4df1-8050-6d23b43d110a_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)METHOD Execute\nVAR_INPUT\nEND_VAR\n","LineInfoPersistence":"(string)01558759-e383-4df1-8050-6d23b43d110a_Decl_LineIds"}}}}}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","f8a58466":"{f8a58466-d7f6-439f-bbb8-d4600e41d099}","string":"System.String"}}},"FormatVersion":"1.0"}