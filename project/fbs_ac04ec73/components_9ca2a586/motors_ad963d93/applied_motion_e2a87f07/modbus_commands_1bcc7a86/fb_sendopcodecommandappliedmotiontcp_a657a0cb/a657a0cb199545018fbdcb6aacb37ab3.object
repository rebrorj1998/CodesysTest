{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)a657a0cb-1995-4501-8fbd-cb6aacb37ab3","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_SendOpcodeCommandAppliedMotionTCP","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)1bcc7a86-3b39-4db3-8635-43f8f5b9316c"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)modbusRequestTCP(\n                                slave:= Slave , \n                                xExecute:= , \n                                xAbort:= , \n                                usiUnitID:= , \n                                ModbusCommand:= modbusCommandTCP, \n                                pSendData:= ADR(sendBuffer), \n                                pRecvData:= , \n                                xBusy=> , \n                                xDone=> , \n                                xError=> , \n                                xAborted=> , \n                                ModbusError=> );\n\nxExecuteONS(CLK := xExecute);\nIF xExecuteONS.Q THEN\n    xDone := FALSE;\nEND_IF    \n                                \nCASE QXCommandState OF\n    OPCODE_MODBUS_COMMAND_STATES.Idle :                    //Move on to Send Parameters\n                                                        IF xExecute THEN\n                                                            QXCommandState := OPCODE_MODBUS_COMMAND_STATES.SendOpcodeAndParameters;\n                                                        END_IF\n                                                        xExecute := FALSE;\n                                \n    OPCODE_MODBUS_COMMAND_STATES.SendOpcodeAndParameters :            \n                                                        //Setup parameter registers to send to drive\n                                                        sendBuffer[0] := INT_TO_WORD(opcode);\n                                                        sendBuffer[1] := Parameter1;\n                                                        sendBuffer[2] := Parameter2;\n                                                        sendBuffer[3] := Parameter3;\n                                                        sendBuffer[4] := Parameter4;\n                                                        sendBuffer[5] := Parameter5;\n                                                        \n                                                        //    Declare command options : Write to multiple registers (Function 16), length of 6, offset of 124 (MB Register 400125)\n                                                        modbusCommandTCP.FunctionCode := IoDrvModbusBase.MBFunctionCode.WriteMultipleRegisters;\n                                                        modbusCommandTCP.uiWriteLen := 6;\n                                                        modbusCommandTCP.uiWriteOffset := 124;\n                                                        \n                                                        modbusRequestTCP.xExecute := TRUE;\n                                                        QXCommandState := OPCODE_MODBUS_COMMAND_STATES.WaitAfterOpcodeAndParametersSent;\n                                                        \n                                                        \n    OPCODE_MODBUS_COMMAND_STATES.WaitAfterOpcodeAndParametersSent :\n                                                        //Wait for confimation\n                                                        IF modbusRequestTCP.xDone = TRUE THEN\n                                                            modbusRequestTCP.xExecute := FALSE;\n                                                            xDone := TRUE;\n                                                            QXCommandState := OPCODE_MODBUS_COMMAND_STATES.Idle;\n                                                        ELSIF modbusRequestTCP.xError THEN\n                                                            modbusRequestTCP.xExecute := FALSE;\n                                                            xDone := TRUE;\n                                                            QXCommandState := OPCODE_MODBUS_COMMAND_STATES.Fault;\n                                                        END_IF\n    \n    OPCODE_MODBUS_COMMAND_STATES.Fault :                    \n                                                        //Move on to Send Parameters\n                                                        IF xExecute THEN\n                                                            QXCommandState := OPCODE_MODBUS_COMMAND_STATES.SendOpcodeAndParameters;\n                                                        END_IF\n                                                        xExecute := FALSE;\nEND_CASE\n\n\n\n\n","LineInfoPersistence":"(string)a657a0cb-1995-4501-8fbd-cb6aacb37ab3_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_SendOpcodeCommandAppliedMotionTCP\nVAR_INPUT\n    Parameter1 : WORD := 0;        //QX Parameter 1\n    Parameter2 : WORD := 0;        //QX Parameter 2\n    Parameter3 : WORD := 0;        //QX Parameter 3\n    Parameter4 : WORD := 0;        //QX Parameter 3\n    Parameter5 : WORD := 0;        //QX Parameter 3\n    opcode : STEP_SERVO_OPCODES;    //Opcode to perform\nEND_VAR\nVAR_IN_OUT\n    Slave :  IoDrvModbusTCP.ModbusTCPSlave;\nEND_VAR\n\nVAR_OUTPUT\n    xDone : BOOL;        //Successfully performed action\nEND_VAR\nVAR\n    QXCommandState : OPCODE_MODBUS_COMMAND_STATES;\n    modbusRequestTCP: IoDrvModbusTCP.ModbusRequest;\n    modbusCommandTCP : IoDrvModbusTCP.ModbusCommand;\n    sendBuffer : ARRAY [0 .. 5] OF WORD;            //Array of registers to send\n    xExecute : BOOL;\n    xExecuteONS : R_TRIG();\nEND_VAR\n","LineInfoPersistence":"(string)a657a0cb-1995-4501-8fbd-cb6aacb37ab3_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)723","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}