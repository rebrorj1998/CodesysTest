{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)514c8c44-700e-4984-87b3-76f560969d1a","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_SendMoveCommandAppliedMotionRTU","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)1bcc7a86-3b39-4db3-8635-43f8f5b9316c"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\nxExecuteONS(CLK := xExecute);\nIF xExecuteONS.Q THEN\n    xDone := FALSE;\nEND_IF    \n\nCASE moveCommandState OF\n    MOVE_MODBUS_COMMAND_STATES.Idle :                    //Move on to Send Parameters\n                                                        IF xExecute THEN\n                                                            moveCommandState := MOVE_MODBUS_COMMAND_STATES.SendParameters;\n                                                        END_IF\n                                                        xExecute := FALSE;\n                                \n    MOVE_MODBUS_COMMAND_STATES.SendParameters :            //We have to use triggers instead of taking over the handle to the COM port\n                                                        IF CheckIfParSendSuccessful() THEN\n                                                            moveCommandState := MOVE_MODBUS_COMMAND_STATES.SendOpcode;\n                                                        ELSE    \n                                                            triggerParameterWrite := TRUE;\n                                                            moveCommandState := MOVE_MODBUS_COMMAND_STATES.WaitAfterParametersSent;                                            \n                                                        END_IF\n                                                        \n    MOVE_MODBUS_COMMAND_STATES.WaitAfterParametersSent :\n                                                        //Wait for confimation\n                                                        IF CheckIfParSendSuccessful() THEN\n                                                            moveCommandState := MOVE_MODBUS_COMMAND_STATES.SendOpcode;                                                    \n                                                        END_IF\n    MOVE_MODBUS_COMMAND_STATES.SendOpcode :                \n                                                        //Send just Opcode now\n                                                        triggerOpcodeWrite := TRUE;\n                                                        moveCommandState := MOVE_MODBUS_COMMAND_STATES.WaitAfterOpcodeSent;\n                                                        \n    MOVE_MODBUS_COMMAND_STATES.WaitAfterOpcodeSent :    //\n                                                        xDone := TRUE;\n                                                        triggerParameterWrite := FALSE;\n                                                        triggerOpcodeWrite := FALSE;\n                                                        moveCommandState := MOVE_MODBUS_COMMAND_STATES.Idle;    \n                                        \n    MOVE_MODBUS_COMMAND_STATES.Fault :                    \n                                                        //Move on to Send Parameters\n                                                        IF xExecute THEN\n                                                            moveCommandState := MOVE_MODBUS_COMMAND_STATES.SendParameters;\n                                                        END_IF\n                                                        xExecute := FALSE;\nEND_CASE\n\n\n\n\n","LineInfoPersistence":"(string)514c8c44-700e-4984-87b3-76f560969d1a_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_SendMoveCommandAppliedMotionRTU\nVAR_INPUT\n//    distanceHighWord : WORD;\n//    distanceLowWord : WORD;        \n//    acceleration : INT;        //Acceleration in RPM/sec\n//    deceleration : INT;        //Deceleration in RPM/sec\n//    velocity : INT;            //Velocity in .25RPM\n    opcode : STEP_SERVO_OPCODES;    //Opcode to perform\n    \n    //Parameters from motor - we need to check these to verify successful send\n    distanceHighWordFromMotor : REFERENCE TO WORD;    //DistanceHighWord From Motor\n    distanceLowWordFromMotor : REFERENCE TO WORD;        //DistanceLowWord from Motor\n    accelerationFromMotor : REFERENCE TO INT;        //Acceleration in RPM/sec from Motor\n    decelerationFromMotor : REFERENCE TO INT;        //Deceleration in RPM/sec from Motor\n    velocityFromMotor : REFERENCE TO INT;            //Velocity in .25RPM from Motor\n    //opcodeFromMotor : REFERENCE TO INT;                //Opcode from motor\nEND_VAR\nVAR_IN_OUT\n    parameterSettingsBuffer : ARRAY [0..4] OF WORD;\nEND_VAR\n\nVAR_OUTPUT\n    triggerParameterWrite : BOOL;\n    triggerOpcodeWrite : BOOL;\n    xDone : BOOL;\nEND_VAR\nVAR\n    moveCommandState : MOVE_MODBUS_COMMAND_STATES;\n    modbusRequestTCP: IoDrvModbusTCP.ModbusRequest;\n    modbusCommandTCP : IoDrvModbusTCP.ModbusCommand;\n    sendBuffer : ARRAY [0 .. 4] OF WORD;            //Array of registers to send\n    xExecute : BOOL;\n    xExecuteONS : R_TRIG();\nEND_VAR","LineInfoPersistence":"(string)514c8c44-700e-4984-87b3-76f560969d1a_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)449","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}