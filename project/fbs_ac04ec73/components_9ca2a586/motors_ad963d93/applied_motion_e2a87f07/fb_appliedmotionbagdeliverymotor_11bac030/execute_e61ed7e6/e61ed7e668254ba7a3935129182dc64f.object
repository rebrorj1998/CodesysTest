{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)e61ed7e6-6825-4ba7-a393-5129182dc64f","ParentGuid":"(Guid)11bac030-91a5-4955-94cf-289834fb7fc8","Name":"(string)Execute","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)f8a58466-d7f6-439f-bbb8-d4600e41d099","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"f8a58466","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\n//\nSUPER^.Execute();\n\n// Used in state engine to delay between moves\n_delayTimer();\n\n// If motor velocity is greater then threshold for 2 seconds, fault\n_tensionFaultDwellTimer(IN := _torqueMode AND (ABS(velocity) > VELOCITY_THRESHOLD_FOR_TENSION_FAULT));\nIF (_tensionFaultDwellTimer.Q AND NOT HMIData.enableDryCycle) AND _tensionFaultEnabled THEN\n\ttensionFault := TRUE;\nEND_IF\n\n_torqueModeONS(CLK := (_state = BAG_DELIVERY_MOVE_STATES.SetToTorqueMode));\n// Clear Params\nIF _bagDeliveryReset THEN\n\t_bagDeliveryReset := FALSE;\n\t_state := BAG_DELIVERY_MOVE_STATES.Idle;\n\t_delayTimer.IN := FALSE;\n\tcommandSuccessful := FALSE;\n\ttensionFault := FALSE;\n\tackRequest := FALSE;\n\tack := FALSE;\nEND_IF\n\n//\nCASE _state OF\n\tBAG_DELIVERY_MOVE_STATES.Idle:\n\t\tIF _moveDistance THEN\n\t\t\t_moveDistance := FALSE;\n\t\t\t_state := BAG_DELIVERY_MOVE_STATES.SetToPointToPointMode;\n\t\t\t//commandSuccessful := FALSE;\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_DELIVERY_MOVE_STATES.SetToPointToPointMode:\n\t\tIF EIP THEN\n\t\t\tIF RearMotor THEN\n\t\t\t\tTriggerPointToPointMode();\t\n\t\t\tEND_IF\t\t\t\t\t\t\n\t\t\t//IF commandSuccessful OR NOT RearMotor THEN\n\t\t\t//\tcommandSuccessful := FALSE;\n\t\t\t\t_state := BAG_DELIVERY_MOVE_STATES.AckPointToPointMode;\n\t\t\t//END_IF\n\t\tELSIF NOT EIP THEN\n\t\t\tTriggerPointToPointMode();\n\t\t\t//IF commandSuccessful THEN\n\t\t\t//\tcommandSuccessful := FALSE;\n\t\t\t\t_state := BAG_DELIVERY_MOVE_STATES.WaitAfterSettingOutputOff;\n\t\t\t//END_IF\n\t\tEND_IF\n\t\t\n\tBAG_DELIVERY_MOVE_STATES.WaitAfterSettingOutputOff:\t\t\n\t\tIF commandSuccessful THEN\n\t\t\tcommandSuccessful := FALSE;\n\t\t\t_state := BAG_DELIVERY_MOVE_STATES.MoveMotor;\n\t\tEND_IF\n\t\t\n\tBAG_DELIVERY_MOVE_STATES.AckPointToPointMode:\n\t\t_delayTimer.PT := T#10MS;\n\t\t_delayTimer.IN := TRUE;\n\t\tIF _delayTimer.Q THEN\n\t\t\tackRequest := TRUE; // Request acknowledgment from parent class\n\t\t\tIF ack THEN // Parent class acknowledges this motor and sibling are ready to move\n\t\t\t\tackRequest := FALSE;\n\t\t\t\t_delayTimer.IN := FALSE;\n\t\t\t\t_state := BAG_DELIVERY_MOVE_STATES.MoveMotor;\n\t\t\tEND_IF\n\t\tEND_IF\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_DELIVERY_MOVE_STATES.MoveMotor: \t\t\t\t\t\n\t\tFeedToLength();\n\t\t_state := BAG_DELIVERY_MOVE_STATES.WaitAfterMovingMotor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_DELIVERY_MOVE_STATES.WaitAfterMovingMotor:\n\t_delayTimer.PT := T#50MS;\n\t_delayTimer.IN := TRUE;\n\tIF _delayTimer.Q THEN\n\t\tIF NOT _moveFinal THEN\n\t\t\tIF commandSuccessful THEN\n\t\t\t\tcommandSuccessful := FALSE;\n\t\t\t\t_moveDone := TRUE;\n\t\t\t\t_delayTimer.IN := FALSE;\n\t\t\t\t_state := BAG_DELIVERY_MOVE_STATES.Idle;\n\t\t\tEND_IF\n\t\tELSE\n\t\t\tIF commandSuccessful AND (NOT Moving AND InPosition) THEN\n\t\t\t\t\n\t\t\t\t\tcommandSuccessful := FALSE;\n\t\t\t\t\t_delayTimer.IN := FALSE;\n\t\t\t\t\t_state := BAG_DELIVERY_MOVE_STATES.SetToTorqueMode;\t\n\t\t\tEND_IF\n\t\tEND_IF \n\t\t\n\tEND_IF\n\t\n\tBAG_DELIVERY_MOVE_STATES.SetToTorqueMode:\t\n\t\tIF EIP THEN\n\t\t\tIF RearMotor AND _torqueModeONS.OSR THEN\n\t\t\t\tTriggerTorqueMode();\n\t\t\tEND_IF\t\n\t\t\tIF commandSuccessful OR NOT RearMotor THEN\n\t\t\t\tcommandSuccessful := FALSE;\n\t\t\t\t_state := BAG_DELIVERY_MOVE_STATES.WaitAfterSettingOutputOn;\n\t\t\tEND_IF\n\t\tELSE\n\t\t\tTriggerTorqueMode();\n\t\t\tIF commandSuccessful THEN\n\t\t\t\tcommandSuccessful := FALSE;\n\t\t\t\t_state := BAG_DELIVERY_MOVE_STATES.WaitAfterSettingOutputOn;\n\t\t\tEND_IF\n\t\tEND_IF\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tBAG_DELIVERY_MOVE_STATES.WaitAfterSettingOutputOn:\n\t\tIF EIP THEN\n\t\t\t_delayTimer.PT := T#10MS;\n\t\t\t_delayTimer.IN := TRUE;\n\t\t\tIF _delayTimer.Q THEN\n\t\t\t\t_moveDone := TRUE;\n\t\t\t\t_moveFinal := FALSE;\n\t\t\t\t_delayTimer.IN := FALSE;\n\t\t\t\t_state := BAG_DELIVERY_MOVE_STATES.Idle;\n\t\t\tEND_IF\n\t\tELSE\n\t\t\t_moveDone := TRUE;\n\t\t\t_state := BAG_DELIVERY_MOVE_STATES.Idle;\n\t\tEND_IF\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nEND_CASE\n","LineInfoPersistence":"(string)e61ed7e6-6825-4ba7-a393-5129182dc64f_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)METHOD Execute\nVAR_INPUT\nEND_VAR\n\n\n","LineInfoPersistence":"(string)e61ed7e6-6825-4ba7-a393-5129182dc64f_Decl_LineIds"}}}}}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","f8a58466":"{f8a58466-d7f6-439f-bbb8-d4600e41d099}","string":"System.String"}}},"FormatVersion":"1.0"}