{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)4f1cba86-4f8d-488b-aab4-e95662513013","ParentGuid":"(Guid)767f96ac-8730-43af-abc8-87aa44ed3cf9","Name":"(string)Execute","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)f8a58466-d7f6-439f-bbb8-d4600e41d099","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"f8a58466","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\n\n//Check to make sure we have a valid reference.  Disable complier warning since we're doing the check\n//{warning disable C0371}\n(*\nIF NOT __ISVALIDREF(ptrReadFHPPRegister) \n    OR NOT __ISVALIDREF(ptrReadFPCRegister) \n    OR NOT __ISVALIDREF(ptrWriteFHPPRegister)\n    OR NOT __ISVALIDREF(ptrWriteFPCRegister)\nTHEN\n     RETURN;\nEND_IF\n*)\n\n\n\n//Convert array of bytes to array of words. Playin' with pointers!\nptrModbusMemory := ptrReadFHPPRegister;\nFHPP_IN := ptrModbusMemory^; \nptrModbusMemory := ptrReadFPCRegister;\nFPC_IN := ptrModbusMemory^;\nptrModbusMemory := ptrWriteFHPPRegister;\nptrModbusMemory^ := FHPP_OUT; \nptrModbusMemory := ptrWriteFPCRegister;\nptrModbusMemory^ := FPC_OUT;\n\n// Function block calls for axis\nReadAxis(\n    FML_REF            := DATA_REF_Axis,\n    Modbus            := FALSE,\n    HighByteFirst    := TRUE,\n    DeviceType        := deviceType,\n    FPC_active        := isFPCActive,\n    \n    FHPP_Source        := FHPP_IN,\n    FPC_Source        := FPC_IN);    \nCRTL_Axis(\n    FML_REF            := DATA_REF_Axis);    \nPNU_Axis(\n    FML_REF            := DATA_REF_Axis);\nMULTI_Axis(\n    FML_REF            := DATA_REF_Axis,\n    SizeOfParam        := SIZEOF(MultiParam),\n    AdrOfParam        := ADR(MultiParam));\nDIRMP_Axis(\n    FML_REF            := DATA_REF_Axis);    \nDIAG_Axis(\n    FML_REF            := DATA_REF_Axis);\nDIAG_BUFF_Axis(\n    FML_REF            := DATA_REF_Axis);\nDATA_OBJECT_Axis(\n    FML_REF            := DATA_REF_Axis);\nFILE_Axis(\n    FML_REF            := DATA_REF_Axis);\nFILE_ARRAY_Axis(\n    FML_REF            := DATA_REF_Axis,\n    SizeOfFileArray    := SIZEOF(ARY_DATA_FILE),\n    AdrOfFileArray    := ADR(ARY_DATA_FILE));    \nWriteAxis(\n    FML_REF            := DATA_REF_Axis,\n    FHPP_Target        => FHPP_OUT,\n    FPC_Target        => FPC_OUT);\n{warning 'TODO: Remove this hack to clear start command if error occurs'}\nremoveStartCommandTimer(IN := CRTL_Axis.StartTask OR CRTL_Axis.AckStart);\n//removeStartCommandTimer(IN := CRTL_Axis.AckStart);\nstartAckONS(CLK := CRTL_Axis.AckStart);    \n//IF removeStartCommandTimer.Q THEN\nIF _sendStart AND NOT CRTL_Axis.AckStart THEN\n    CRTL_Axis.StartTask := TRUE;\n    _sendStart := FALSE;\nEND_IF\n\nIF startAckONS.Q OR removeStartCommandTimer.Q THEN\n    CRTL_Axis.StartTask := FALSE;\n    commandSuccessful := TRUE;\nEND_IF\n//Set Home required indication\nhomeRequiredIndication S= NOT CRTL_Axis.HomingValid;\n//commandSuccessful S= CRTL_Axis.AckStart;\n//{warning restore C0371}","LineInfoPersistence":"(string)4f1cba86-4f8d-488b-aab4-e95662513013_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)METHOD Execute\nVAR_INPUT\nEND_VAR\n","LineInfoPersistence":"(string)4f1cba86-4f8d-488b-aab4-e95662513013_Decl_LineIds"}}}}}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","f8a58466":"{f8a58466-d7f6-439f-bbb8-d4600e41d099}","string":"System.String"}}},"FormatVersion":"1.0"}