{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)af2ace41-e01e-4f7a-a446-2522e24f38a7","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_CollisionDetection","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)79a14740-5826-46ee-9580-710efda5a416"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\n//  FB_CollisionDetection\n//  FBs/Components/Collisiton Detection/FB_CollisionDetection\n//\n//  Created by Evan Ische on 8/20/2021. \n//  Copyright (C) 2021 Sharp Packaging Systems By Pregis. All rights reserved.\n//\n\n//\nSUPER^();\n\n// Initalize timer.\n_debounceTimer();\n\n// Initalize timer. Used to mute the fins on the rear exit conveyor \n_packageAtExitTimer( IN := packageAtExit);\n\n// Initalize timer. How long rearExitConveyor runs after bags on trunkline\n_collisionEngineRunoffTimer(PT := SECONDS_TO_TIME(collisionEngineRunoffDwell));\n\n// Initalize timer, if complete, turn off timer.\n// Times how long collision detected stays high when triggered \n_collisionDetectionTimer(PT := SECONDS_TO_TIME(collisionDetectedDwell));\nIF _collisionDetectionTimer.Q THEN\n\t_collisionDetectionTimer.IN := FALSE;\nEND_IF\n\n// Initalize timer. debounce the falling edge of collisiondetected \n_collisionDetectionOffTimer(IN := NOT _collisionDetected);\n\n// If reset or not enabled clear paramaters\n_enabledONS(CLK := enable);\nIF resetONS.Q OR _enabledONS.OSF THEN\n\t_conveyorState := CONVEY_PACKAGES_STATE.Idle;\n\t_collisionDetectionState := COLLISION_DETECTION_STATE.Idle;\n\t_collisionEngineState := COLLISION_ENGINE_STATE.Idle;\nEND_IF\n\n// Collision Detection State Engine\nCASE _collisionDetectionState OF\n\n\tCOLLISION_DETECTION_STATE.Idle:\n\t\n\t\t// Null Parameters\n\t\t_collisionDetected := FALSE;\n\t\t_collisionDetectionTimer.IN := FALSE;\n\t\t\n\t\t// If collision detected while enabled, start sequence\n\t\tIF collisionDetected AND enable AND NOT _muteColisionDetection THEN\n\t\t\t_collisionDetected := TRUE;\n\t\t\t_collisionDetectionState := COLLISION_DETECTION_STATE.CollisionDetected;\n\t\tEND_IF\n\t\t\n\tCOLLISION_DETECTION_STATE.CollisionDetected:\n\t\t_collisionDetectionTimer.IN := TRUE;\n\t\t_collisionDetectionState := COLLISION_DETECTION_STATE.CollisionActive;\n\t\n\tCOLLISION_DETECTION_STATE.CollisionActive:\n\t\tIF NOT collisionDetected AND NOT _collisionDetectionTimer.IN THEN\n\t\t\t_collisionDetectionState := COLLISION_DETECTION_STATE.CollisionEnded;\n\t\tEND_IF\n\t\n\tCOLLISION_DETECTION_STATE.CollisionEnded:\n\t\t_collisionDetected := FALSE;\n\t\t_collisionDetectionState := COLLISION_DETECTION_STATE.Idle;\n\t\nEND_CASE\n\n// Collision Active State Engine\nCASE _collisionEngineState OF\n\t\n\tCOLLISION_ENGINE_STATE.Idle:\n\t\t\n\t\t// Null Parameters\n\t\tconveyorCleared := TRUE;\n\t\trunExitConveyor := FALSE;\n\t\ttriggerBarcodeScanner := FALSE;\n\t\trunExternalExitConveyor := FALSE;\n\t\t_muteColisionDetection := FALSE;\n\t\t_collisionEngineRunoffTimer.IN := FALSE;\n\t\t_conveyorState := CONVEY_PACKAGES_STATE.Idle;\n\t\tinhibitExternalExitConveyor := FALSE;\n\t\tpackageHeldByCollisionDetection := FALSE;\n\t\t\n\t\t// If package has reached the end of the conveyor, check for collision\n\t\tIF _packageAtExitTimer.Q AND conveyorsActive THEN\n\t\t\t_collisionEngineState := COLLISION_ENGINE_STATE.PackageAtExit;\n\t\tEND_IF\n\t\n\tCOLLISION_ENGINE_STATE.PackageAtExit:\n\t\t// If the product reaches the exit sensor while a collision is detected, inhibit the external exit conveyor\n\t\tIF _collisionDetected THEN\n\t\t\tconveyorCleared := FALSE;\n\t\t\tinhibitExternalExitConveyor := TRUE;\n\t\t\t_collisionEngineState := COLLISION_ENGINE_STATE.PackageHeldAtExit;\n\t\tELSE\n\t\t\t_collisionEngineState := COLLISION_ENGINE_STATE.WaitForPackageToReachTrunkline;\n\t\tEND_IF\n\t\t\n\tCOLLISION_ENGINE_STATE.WaitForPackageToReachTrunkline:\n\t\n\t\t_debounceTimer.IN := NOT _packageAtExitTimer.Q;\n\t\tIF _debounceTimer.Q THEN\n\t\t\t_debounceTimer.IN := FALSE;\n\t\t\t_collisionEngineState := COLLISION_ENGINE_STATE.Idle;\n\t\tEND_IF\n\t\n\tCOLLISION_ENGINE_STATE.PackageHeldAtExit:\n\t\t// Wait for the collision to clear and then move on\n\t\tpackageHeldByCollisionDetection := TRUE;\n\t\tIF _collisionDetectionOffTimer.Q THEN\n\t\t\t_muteColisionDetection := TRUE;\n\t\t\tpackageHeldByCollisionDetection := FALSE;\n\t\t\tinhibitExternalExitConveyor := FALSE;\n\t\t\t_collisionEngineState := COLLISION_ENGINE_STATE.ConveyPackagesPastExitSensor;\n\t\tEND_IF\n\t\n\tCOLLISION_ENGINE_STATE.ConveyPackagesPastExitSensor:\n\t\t\n\t\t//\n\t\tCASE _conveyorState OF \n\t\t\tCONVEY_PACKAGES_STATE.Idle:\n\t\t\t\t_conveyorState := CONVEY_PACKAGES_STATE.StartConveyor;\n\t\t\t\t\n\t\t\tCONVEY_PACKAGES_STATE.StartConveyor:\n\t\t\t\trunExternalExitConveyor := TRUE;\n\t\t\t\tIF multiplePackagesHeld THEN\n\t\t\t\t\t// Used to push sencond package to the rear exit conveyor\n\t\t\t\t\trunExitConveyor := TRUE;\n\t\t\t\t\ttriggerBarcodeScanner := TRUE;\n\t\t\t\tEND_IF\n\t\t\t\t_conveyorState := CONVEY_PACKAGES_STATE.ConveyFirstPackage;\n\t\t\t\t\n\t\t\tCONVEY_PACKAGES_STATE.ConveyFirstPackage:\n\t\t\t\t// Make sure the package is fully removed from conveyor before moving on\n\t\t\t\t_debounceTimer.IN := NOT _packageAtExitTimer.Q;\n\t\t\t\tIF _debounceTimer.Q THEN\n\t\t\t\t\t_debounceTimer.IN := FALSE;\n\t\t\t\t\t// Continue to package 2 logic if in queue, otherwise finish up\n\t\t\t\t\tIF NOT multiplePackagesHeld THEN\n\t\t\t\t\t\t_conveyorState := CONVEY_PACKAGES_STATE.Runoff;\n\t\t\t\t\tELSE\n\t\t\t\t\t\t_conveyorState := CONVEY_PACKAGES_STATE.WaitForSecondPackage;\n\t\t\t\t\tEND_IF\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\tCONVEY_PACKAGES_STATE.WaitForSecondPackage:\n\t\t\t\tIF _packageAtExitTimer.Q THEN\n\t\t\t\t\t// If a collision is detected when the 2nd package reachs the exit sensor\n\t\t\t\t\t// kill the conveyors and return back to package at exit\n\t\t\t\t\trunExitConveyor := FALSE;\n\t\t\t\t\ttriggerBarcodeScanner := FALSE;\n\t\t\t\t\tIF _collisionDetected THEN\n\t\t\t\t\t\tconveyorCleared := TRUE;\n\t\t\t\t\t\trunExternalExitConveyor := FALSE;\n\t\t\t\t\t\t_conveyorState := CONVEY_PACKAGES_STATE.Idle;\n\t\t\t\t\t\t_collisionEngineState := COLLISION_ENGINE_STATE.PackageAtExit;\n\t\t\t\t\tELSE\n\t\t\t\t\t\t_conveyorState := CONVEY_PACKAGES_STATE.ConveySecondPackage;\n\t\t\t\t\tEND_IF\n\t\t\t\tELSIF packageAtExit AND NOT _packageAtExitTimer.Q THEN\n\t\t\t\t\t_muteColisionDetection := FALSE;\n\t\t\t\tEND_IF\n\t\t\t\n\t\t\tCONVEY_PACKAGES_STATE.ConveySecondPackage:\n\t\t\t\t_debounceTimer.IN := NOT _packageAtExitTimer.Q;\n\t\t\t\tIF _debounceTimer.Q THEN\n\t\t\t\t\t_debounceTimer.IN := FALSE;\n\t\t\t\t\t_conveyorState := CONVEY_PACKAGES_STATE.Runoff;\n\t\t\t\tEND_IF\n\t\t\t\n\t\t\tCONVEY_PACKAGES_STATE.Runoff:\n\t\t\t\t_collisionEngineRunoffTimer.IN := TRUE;\n\t\t\t\tIF _collisionEngineRunoffTimer.Q THEN\n\t\t\t\t\t_conveyorState := CONVEY_PACKAGES_STATE.ConveyorCleared;\n\t\t\t\tEND_IF\n\t\t\t\n\t\t\tCONVEY_PACKAGES_STATE.ConveyorCleared:\n\t\t\t\t_collisionEngineState := COLLISION_ENGINE_STATE.Idle;\n\t\tEND_CASE\n\t\nEND_CASE      ","LineInfoPersistence":"(string)af2ace41-e01e-4f7a-a446-2522e24f38a7_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_CollisionDetection EXTENDS FB_BaseComponent\nVAR_INPUT\n\tcollisionDetected : BOOL;\n\tcollisionDetectedDwell : REAL;\n\tcollisionEngineRunoffDwell : REAL;\n\tpackageAtExit : BOOL;\n\tmultiplePackagesHeld : BOOL;\n\tconveyorsActive : BOOL;\nEND_VAR\nVAR_OUTPUT\n\tconveyorCleared : BOOL;\n\tinhibitExternalExitConveyor : BOOL;\n\trunExternalExitConveyor : BOOL;\n\trunExitConveyor : BOOL;\n\tpackageHeldByCollisionDetection : BOOL;\n\ttriggerBarcodeScanner : BOOL;\nEND_VAR\nVAR\n\t_enabledONS : FB_ONS;\n\t_conveyorState : CONVEY_PACKAGES_STATE;\n\t_collisionEngineState : COLLISION_ENGINE_STATE;\n\t_collisionEngineRunoffTimer : Standard.TON;\n\t_collisionDetectionState : COLLISION_DETECTION_STATE;\n\t_collisionDetected : BOOL;\n\t_collisionDetectionONS : FB_ONS;\n\t_collisionDetectionTimer : Standard.TON;\n\t_collisionDetectionOffTimer : Standard.TON := (PT :=T#50MS);\n\t_muteColisionDetection : BOOL;\n\t_packageAtExitTimer : Standard.TON := (PT := T#20MS);\n\t_debounceTimer : Standard.TON := (PT := T#250MS);\n\t_testINT : INT;\nEND_VAR\n","LineInfoPersistence":"(string)af2ace41-e01e-4f7a-a446-2522e24f38a7_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)1711","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}