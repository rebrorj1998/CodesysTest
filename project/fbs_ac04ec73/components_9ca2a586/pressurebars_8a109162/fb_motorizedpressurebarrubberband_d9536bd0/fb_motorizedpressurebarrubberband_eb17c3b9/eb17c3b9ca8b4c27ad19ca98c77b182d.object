{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)eb17c3b9-ca8b-4c27-ad19-ca98c77b182d","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_MotorizedPressureBarRubberband","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)d9536bd0-f334-428b-ba2e-2c726a277c51"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//Modified to ensure that PBAR motor syncs with encoder after each move. CT\n//movingOSF(CLK:= pbarmotor.status.moving);\nmovingOSF(CLK:= pressureBarOpen);\nIF (pbarmotor.driveInputs[5] <> pbarmotor.driveInputs[6]+100) AND movingOSF.Q THEN\n\t//pbarmotor.ResetEncoderPosition(pbarmotor.driveinputs[5]);\nEND_IF\n//\nactualPosition := pbarMotor.absolutePositonInches;\n\n// Absolutle difference of actual vs commanded pressure bar position\npressureBarPositionError := ABS(TO_DINT((actualPosition - pbarOutCommandedSetting) * 1000));\n\n// Check is pressure bar open position is within buffer threshold  \npressureBarOpen := pressureBarPositionError < openedPositionBuffer;\n\ndelayTimer();\nretryOpenDelay();\npressureBarClosed := iPressureBarClosed;\nfailTimer(IN := ((state = MotorizedPbarStatesRubberBand.StartedClamping)AND (NOT (iJawCLampRetracted AND iPressureBarClosed)))\n\t\t\t\tOR ((state = MotorizedPbarStatesRubberBand.ReleaseClamp)AND NOT iJawClampExtended)\n\t\t);\n\t\t\nclamped := state = MotorizedPbarStatesRubberBand.Clamping;\n\nstrokeTimer();\nmovingONS(CLK := state = MotorizedPbarStatesRubberBand.MovingJawIn);\n\nIF movingONS.OSR THEN\n\tstrokeTimer.IN := TRUE;\nEND_IF\nIF movingONS.OSF THEN\n\tstrokeTime := strokeTimer.ET;\n\tstrokeTimer.IN := FALSE;\nEND_IF\n\t\n\ndisableMotorONS(CLK := clamped AND (iPressureBarClamped and not HMIData.enablePerfBreaker) AND iJawClampsRetracted);\nIF disableMotorONS.OSR THEN\n\tpbarMotor.AllowClamping();\nEND_IF\n\n\n\n// jawClampsLeftFeedbackHandler(\n// \textendedFeedbackInput:= iJawClampLeftExtended, \n// \tretractedFeedbackInput:= iJawCLampLeftRetracted, \n// \textendOutput:= jawClamps.extendOutput, \n// \tretractOutput:= jawClamps.retractOutput, \n// \textendFaultDelay:= 1000, \n// \tretractFaultDelay:= 1000, \n// \tfaultMonitoring:= NOT disableFaults, \n// \tfailedToExtend=> failToReleaseLeft.faultTrigger, \n// \tfailedToRetract=> failToClampLeft.faultTrigger);\n// \n// jawClampsRightFeedbackHandler(\n// \textendedFeedbackInput:= iJawClampRightExtended, \n// \tretractedFeedbackInput:= iJawCLampRightRetracted, \n// \tretractOutput:= jawClamps.retractOutput, \n// \textendOutput:= jawClamps.extendOutput, \n// \textendFaultDelay:= 1000, \n// \tretractFaultDelay:= 1000, \n// \tfaultMonitoring:= NOT disableFaults, \n// \tfailedToExtend=> failToReleaseRight.faultTrigger, \n// \tfailedToRetract=> failToClampRight.faultTrigger);\n\n\nIF extendJawClamp THEN\n\textendJawClamp := FALSE;\n\tjawClamps.Extend();\nELSIF retractJawClamp THEN\n\tretractJawClamp := FALSE;\n\tjawClamps.Retract();\nEND_IF\n\nIF NOT pbarMotor.HomeRequired THEN\n\tIF extendJaw THEN\n\t\textendJaw := FALSE;\n\t\tpbarMotor.MoveToPositionTorque(pbarOutSetting,accel,decel,velo,testCurrent);\n\tELSIF retractJaw THEN\n\t\tretractJaw := FALSE;\n\t\tpbarMotor.MoveToPositionTorque(pbarInSetting,accel,decel,velo,testCurrent);\n\tEND_IF\nEND_IF\n\nIF testDisable THEN\n\tpbarMotor.Disable();\n\ttestDisable := FALSE;\nEND_IF\n\nIF testEnable THEN\n\tpbarMotor.Enable();\n\ttestEnable := FALSE;\nEND_IF\n\nIF testClamp THEN\n\tpbarMotor.AllowClamping();\n\ttestClamp := FALSE;\nEND_IF\n\nIF testRelease THEN\n\tpbarMotor.DoneClamping();\n\ttestRelease := FALSE;\nEND_IF\n\nIF testResetPosition THEN\n\tpbarMotor.ResetEncoderPosition(pbarMotor.driveInputs[5]);\n\ttestResetPosition := FALSE;\nEND_IF\n\nIF testZeroCurrent THEN\n\tpbarMotor.MoveDistanceTorque(velocity:=100, acceleration := 1, deceleration := 1, distance := 0, current := 1);\n\t//pbarMotor.SetTorque(1);\n\ttestZeroCurrent := FALSE;\nEND_IF\n\nIF testSomeCurrent THEN\n\tpbarMotor.SetTorque(testCurrent);\n\ttestSomeCurrent := FALSE;\nEND_IF\n\nIF testPosLimit THEN\n\tpbarMotor.SetPositionFaultLimit(posLimit);\n\ttestPosLimit := FALSE;\nEND_IF\n\ndoneClampingDelay();\n\nIF resetONS.Q THEN\n\tpbarOutCommandedSetting := pbarOutSetting;\n\tpbarMotor.Reset();\n\t//pbarMotor.Enable();\n\tpbarMotor.ResetEncoderPosition(pbarMotor.driveInputs[5]);\n\t//IBDMotor.Reset();\n\tGlobals.jawMovingIn := FALSE;\n\t_reset := FALSE;\n\t_openJaw := FALSE;\n\tstartTest := FALSE;\n\ttestActive := FALSE;\n\tdelayTimer.IN := FALSE;\n\tjawClamps.Extend();\n\tpbarFeedbackHandler.extendOutput := FALSE;\n\tpbarFeedbackHandler.retractOutput := FALSE;\n\tdoneClampingDelay.IN := TRUE;\n\tstate := MotorizedPbarStatesRubberBand.Idle; \nEND_IF\n\nIF doneClampingDelay.Q THEN\n\tpbarMotor.DoneClamping();\n\tdoneClampingDelay.IN := FALSE;\nEND_IF\n\nfaultingONS(CLK := (\tpbarMotor.Faulted AND NOT disableFaults)\n\tOR (pbarFeedbackHandler.faultIndication\n\tOR jawClampsLeftFeedbackHandler.faultIndication\n\tOR jawClampsRightFeedbackHandler.faultIndication\n\tOR faults.obstructionDetected.active));\n\nIF \tfaultingONS.OSR\n\tAND state <> MotorizedPbarStatesRubberBand.Faulted \nTHEN\n\tstate := MotorizedPbarStatesRubberBand.Faulting; \nEND_IF\n\nhomeRequiredONS(CLK := pbarMotor.homeRequired);\nIF homeRequiredONS.OSR THEN\n\thomeRequired := TRUE;\nEND_IF\n\n_ready := state = MotorizedPbarStatesRubberBand.Idle AND NOT homeRequired AND pressureBarOpen;\n\nCASE state OF\n\tMotorizedPbarStatesRubberBand.Idle :\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//Test Reset encoder and motor\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF startTest THEN\n\t\t\t\t\t\t\t\t\t\t\tstartTest := FALSE;\n\t\t\t\t\t\t\t\t\t\t\ttestActive := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tIF pbarMotor.homeRequired THEN\n\t\t\t\t\t\t\t\t\t\t\t\tpbarMotor.HomeNow();\n\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Homing;\n\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Initialize;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\tIF _moveJawClear THEN\n\t\t\t\t\t\t\t\t\t\t\tstate:= MotorizedPbarStatesRubberBand.MoveJawClear;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\tIF _homeNow THEN\n\t\t\t\t\t\t\t\t\t\t\t_homeNow := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t//IF (pbarMotor.homeRequired) THEN\n\t\t\t\t\t\t\t\t\t\t\t\tpbarMotor.HomeNow();\n\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#150MS;\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Homing;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF _openJaw THEN\n\t\t\t\t\t\t\t\t\t\t\t_openJaw := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t_motorCurrent := MOTOR_CURRRENT_HIGH;\n\t\t\t\t\t\t\t\t\t\t\tpbarOutCommandedSetting := pbarOutSetting;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MoveJawOut;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF _openForBagFeed AND NOT _reset THEN\n\t\t\t\t\t\t\t\t\t\t\t_openForBagFeed := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t_motorCurrent := MOTOR_CURRRENT_HIGH;\n\t\t\t\t\t\t\t\t\t\t\tpbarOutCommandedSetting := pbarBagFeedSetting;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MoveJawOut;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF _closeJaw THEN\n\t\t\t\t\t\t\t\t\t\t\t_closeJaw := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t_motorCurrent := MOTOR_CURRRENT_HIGH;\n\t\t\t\t\t\t\t\t\t\t\t//IF enableRubberBandJaw THEN\n\t\t\t\t\t\t\t\t\t\t\t\t_positionFaultLimit := POSITION_FAULT_LIMIT_STANDARD;\n\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.PrepareToSetPositionLimit;\n\t\t\t\t\t\t\t\t\t\t\t\t_nextState := MotorizedPbarStatesRubberBand.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\t\t//ELSE\n\t\t\t\t\t\t\t\t\t\t\t//\tstate := MotorizedPbarStatesRubberBand.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF _closeJawNoLatch THEN\n\t\t\t\t\t\t\t\t\t\t\t_motorCurrent := MOTOR_CURRRENT_HIGH;\n\t\t\t\t\t\t\t\t\t\t\t_positionFaultLimit := POSITION_FAULT_LIMIT_STANDARD;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tMotorizedPbarStatesRubberBand.Homing :\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\tGlobals.jawMovingIn := TRUE;\n\t\t\t\t\t\t\t\t\t\t_homeNow := FALSE;\n\t\t\t\t\t\t\t\t\t\tIF NOT (pbarMotor.homeRequired OR homeRequired) AND delayTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\thomeRequired := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Initialize;\n\t\t\t\t\t\t\t\t\t\tELSIF pbarMotor.HomeRequired OR homeRequired AND NOT pbarMotor.status.moving  THEN\n\t\t\t\t\t\t\t\t\t\t\thomeRequired := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t pbarMotor.HomeNow();\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\t\n\tMotorizedPbarStatesRubberBand.Initialize :\t\t\t//\n\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#500MS;\n\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\tGlobals.jawMovingIn := TRUE;\n\t\t\t\t\t\t\t\t\t\tIF delayTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\tIF pressureBarOpen THEN\n\t\t\t\t\t\t\t\t\t\t\t\tpbarMotor.DoneClamping();\n\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Initializing;\n\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\tjawClamps.Extend();\n\t\t\t\t\t\t\t\t\t\t\t\tpbarMotor.MoveToPositionTorque(pbarOutSetting,accel,decel,velo,_motorCurrent);\n\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Initializing;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\n\t\n\tMotorizedPbarStatesRubberBand.Initializing :\t\t\t//\n\t\t\t\t\t\t\t\t\t\tIF _homeNow THEN\n\n\t\t\t\t\t\t\t\t\t\t\t//IF (pbarMotor.homeRequired) THEN\n\t\t\t\t\t\t\t\t\t\t\t\tpbarMotor.HomeNow();\n\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#150MS;\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Homing;\n\n\t\t\t\t\t\t\t\t\t\tELSIF pressureBarOpen THEN\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Initialized;\n\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\t\n\tMotorizedPbarStatesRubberBand.Initialized :\t\t\t//\n\t\t\t\t\t\t\t\t\t\tIF testActive THEN\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Idle;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\tMotorizedPbarStatesRubberBand.PrepareToSetPositionLimit:\n\t\t\tpbarMotor.SetPositionFaultLimit(_positionFaultLimit);\n\t\t\tstate := MotorizedPbarStatesRubberBand.PreparingToSetPositionLimit;\n\t\t\n\tMotorizedPbarStatesRubberBand.PreparingToSetPositionLimit:\n\t\tIF pbarMotor.commandSuccessful THEN\n\t\t\tstate := MotorizedPbarStatesRubberBand.PreparedSettingPositionLimit;\n\t\tEND_IF\n\t\n\tMotorizedPbarStatesRubberBand.PreparedSettingPositionLimit:\n\t\tstate := _nextState;\n\t\t_nextState := MotorizedPbarStatesRubberBand.Idle;\n\t\t\t\t\t\t\t\t\t\t\n\tMotorizedPbarStatesRubberBand.MoveJawOut:\t\t\n\t\t//\n\t\t\t\t\t\t\t\t\t\tGlobals.jawMovingIn := FALSE;\n\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF pbarOutSetting > slowOpenThreshold THEN\n\t\t\t\t\t\t\t\t\t\t\tpbarMotor.MoveToPositionTorque(pbarOutCommandedSetting,slowAccel,decel,slowVel,_motorCurrent);\n\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\tpbarMotor.MoveToPositionTorque(pbarOutCommandedSetting,accel,decel,velo,_motorCurrent);\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\tdistanceToMove := ABS(actualPosition - pbarOutCommandedSetting);\n\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MovingJawOut;\n\t\n\tMotorizedPbarStatesRubberBand.MoveJawClear : //\n\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#150MS;\n\t\t\t\t\t\t\t\t\t\tIF NOT jawClear AND NOT pbarMotor.Moving AND retrycount <=5 AND  homeRequired THEN\n\t\t\t\t\t\t\t\t\t\t_moveJawClear := FALSE;\n\t\t\t\t\t\t\t\t\t\tIF NOT delaytimer.in THEN\n\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\tELSIF delayTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\tpbarMotor.MoveDistance( 5,accel,decel,clearVelo);\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tretrycount:= retrycount + 1;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\n\n\t\t\t\t\t\t\t\t\t\tELSIF jawClear THEN\n\t\t\t\t\t\t\t\t\t\t\tretrycount := 0;\n\t\t\t\t\t\t\t\t\t\t\t_moveJawClear := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpbarMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\tIF NOT pbarMotor.Moving THEN\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Idle;\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\n\n\t\t\t\t\t\t\t\t\t\tELSIF retrycount>5 THEN\n\t\t\t\t\t\t\t\t\t\t\t\tretrycount := 0;\n\n\t\t\t\t\t\t\t\t\t\t\t_moveJawClear := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpbarMotor.Stop();\n\t\t\t\t\t\t\t\t\t\t\tfaults.failedToOpen.faultTrigger:=TRUE;\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Idle;\n\t\t\t\t\t\t\t\t\t\tELSIF NOT homeRequired THEN \n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Initialize;\n\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\n\tMotorizedPbarStatesRubberBand.MovingJawOut :\t\t\t//\n\t\t\t\t\t\t\t\t\t\tretryOpenDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\tIF retryOpenDelay.Q AND actualPosition < 0.3 THEN\n\t\t\t\t\t\t\t\t\t\tretryOpenDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tstate:= MotorizedPbarStatesRubberBand.MoveJawOut;\n\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\tIF pressureBarOpen AND NOT pbarMotor.status.moving THEN\n\t\t\t\t\t\t\t\t\t\t\tretryOpenDelay.IN := FALSE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tIF testActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#500MS;\n\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\tIF delayTimer.Q  THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#0MS;\n\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\tIF delayTimer.Q  THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tpbarmotor.ResetEncoderPosition(pbarmotor.driveinputs[5]);\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.ResettingEncoder;\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\tELSIF NOT pbarMotor.status.moving AND NOT pressureBarOpen THEN  //Didn't make it. Try again!\n\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#100MS;\n\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\tIF delayTimer.Q  THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF pbarOutSetting > slowOpenThreshold THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpbarMotor.MoveToPositionTorque(pbarOutCommandedSetting,slowAccel,decel,slowVel,_motorCurrent);\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpbarMotor.MoveToPositionTorque(pbarOutCommandedSetting,accel,decel,velo,_motorCurrent);\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t//state := MotorizedPbarStatesRubberBand.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\n\tMotorizedPbarStatesRubberBand.ResettingEncoder :\n\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#50MS;\n\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\tIF delayTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tIF enableRubberBandJaw AND (pbarOutCommandedSetting = pbarOutSetting) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t_positionFaultLimit := POSITION_FAULT_LIMIT_HIGH;\n\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.PrepareToSetPositionLimit;\n\t\t\t\t\t\t\t\t\t\t\t\t_nextState := MotorizedPbarStatesRubberBand.StartRubberBanding;\n\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Idle;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\t\n\tMotorizedPbarStatesRubberBand.MovedJawOut :\t\t\t//\n\t\t\t\t\t\t\t\t\t\tIF delayTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MoveJawIn;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tMotorizedPbarStatesRubberBand.StartRubberBanding :\n\t\t\t\t\t\t\t\t\t\tpbarMotor.MoveToPositionTorque(pbarOutCommandedSetting, accel, decel, velo, MOTOR_CURRENT_LOW);\n\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Idle;\n\t\n\tMotorizedPbarStatesRubberBand.MoveJawIn :\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\tGlobals.jawMovingIn := TRUE;\n\t\t\t\t\t\t\t\t\t\tpbarMotor.MoveToPositionTorque(pbarInSetting, accel, decel, velo, _motorCurrent);\n\t\t\t\t\t\t\t\t\t\tdistanceToMove := ABS(actualPosition - pbarInSetting);\n\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MovingJawIn;\n\t\n\tMotorizedPbarStatesRubberBand.MovingJawIn : \t\t\t//\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF iPressureBarClosed THEN\n\t\t\t\t\t\t\t\t\t\t\tIF NOT  _closeJawNoLatch THEN\n\t\t\t\t\t\t\t\t\t\t\t\t//pbarMotor.AllowClamping();\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := jawClampsDelay;\n\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MovedJawIn;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\t\n\tMotorizedPbarStatesRubberBand.MovedJawIn :\t\t\t//\n\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t// Need this delay for the 1183/1196 motors - not the 1182 though.\n\t\t\t\t\t\t\t\t\t\t\tIF delayTimer.Q OR HMIData.baggerModelSelection = ModelSelection.Pro24_1182 THEN\n\n\t\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\tIF _closeJawNoLatch THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t_closeJawNoLatch := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Idle;\n\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.StartClamping;\n\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\n\tMotorizedPbarStatesRubberBand.StartClamping :\t\t\t//\n\t\t\t\t\t\t\t\t\t\t// pbarMotor.SetPositionLimit(20000);\n\n\t\t\t\t\t\t\t\t\t\tjawClamps.Retract();\n\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.StartedClamping;\n\t\n\tMotorizedPbarStatesRubberBand.StartedClamping :\t\t//\n\t\t\t\t\t\t\t\t\t\tIF iPressureBarClosed AND iJawClampsRetracted THEN\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Clamping;\t\n\t\t\t\t\t\t\t\t\t\t\t//Removed this delay and moved the Encoder-Drive Sync to the Motor Control FB.  CT 9/5/23\n\n\n\t\t\t\t\t\t\t\t\t\t\t//pbarMotor.AllowClamping();\n\t\t\t\t\t\t\t\t\t\t\t//delayTimer.PT := T#250MS;\n\t\t\t\t\t\t\t\t\t\t\t//delayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t//IF delayTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\t\t//pbarMotor.AllowClamping();\n\t\t\t\t\t\t\t\t\t\t\t//\tpbarMotor.ResetEncoderPosition(pbarMotor.driveInputs[5]);\n\t\t\t\t\t\t\t\t\t\t\t//\tstate := MotorizedPbarStatesRubberBand.Clamping;\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF testActive THEN\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := T#2S;\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\t\n\tMotorizedPbarStatesRubberBand.Clamping :\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\tIF _openJaw OR (testActive AND delayTimer.Q) THEN\n\t\t\t\t\t\t\t\t\t\t\t_openJaw := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpbarOutCommandedSetting := pbarOutSetting;\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tjawClamps.Extend();\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.ReleaseClamp;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF _openForBagFeed OR (testActive AND delayTimer.Q) THEN\n\t\t\t\t\t\t\t\t\t\t\t_openForBagFeed := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tpbarOutCommandedSetting := pbarBagFeedSetting;\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tjawClamps.Extend();\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.ReleaseClamp;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\n\t\n\t\n\tMotorizedPbarStatesRubberBand.ReleaseClamp :\t\t\t//  \n\t\t\t\t\t\t\t\t\t\tIF iJawClampExtended THEN\n\t\t\t\t\t\t\t\t\t\t\tpbarMotor.DoneClamping();\n\t\t\t\t\t\t\t\t\t\t\t//pbarMotor.Enable();\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.PT := jawClampsDelay;\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.ReleasingClamp;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\n\t\n\tMotorizedPbarStatesRubberBand.ReleasingClamp :\t\t//\n\t\t\t\t\t\t\t\t\t\tIF delayTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.MoveJawOut;\n\t\t\t\t\t\t\t\t\t\t\t//HMI.data.TFBeltPressureBarCycles := HMI.data.TFBeltPressureBarCycles + 1;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tMotorizedPbarStatesRubberBand.Faulting :\t\t\t// \n\t\t\t\t\t\t\t\t\t\tGlobals.jawMovingIn := FALSE;\n\t\t\t\t\t\t\t\t\t\t_reset := FALSE;\n\t\t\t\t\t\t\t\t\t\t_openJaw := FALSE;\n\t\t\t\t\t\t\t\t\t\t_closeJaw := FALSE;\n\t\t\t\t\t\t\t\t\t\t_homeNow := FALSE;\n\t\t\t\t\t\t\t\t\t\t_closeJawNoLatch := FALSE;\n\t\t\t\t\t\t\t\t\t\t_openForBagFeed := FALSE;\n\t\t\t\t\t\t\t\t\t\tstartTest := FALSE;\n\t\t\t\t\t\t\t\t\t\ttestActive := FALSE;\n\t\t\t\t\t\t\t\t\t\tdelayTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tjawClamps.Extend();\n\t\t\t\t\t\t\t\t\t\tpbarFeedbackHandler.extendOutput := FALSE;\n\t\t\t\t\t\t\t\t\t\tpbarFeedbackHandler.retractOutput := FALSE;\n\t\t\t\t\t\t\t\t\t\tpbarMotor.Disable();\n\t\t\t\t\t\t\t\t\t\t//IBDMotor.Disable();\n\t\t\t\t\t\t\t\t\t\tstate := MotorizedPbarStatesRubberBand.Faulted;\n\t\t\t\n\tMotorizedPbarStatesRubberBand.Faulted :\t\t\t\t//\n\t\nEND_CASE\n\n\nIF pbarMotor.alarms.positionLimit OR failTimer.Q THEN\n\tfaults.obstructionDetected.faultTrigger := TRUE;\n\t//homeRequired := TRUE;\n\t//state := MotorizedPbarStatesRubberBand.Faulting;\nELSE\n\tfaults.obstructionDetected.faultTrigger := FALSE;\nEND_IF\n\npbarFeedbackHandler(\n\textendedFeedbackInput:= pressureBarOpen, \n\tretractedFeedbackInput:= iPressureBarClosed, \n\textendOutput:= state = MotorizedPbarStatesRubberBand.MovingJawOut, \n\tretractOutput:= state = MotorizedPbarStatesRubberBand.MovingJawIn, \n\textendFaultDelay:= 3000 , \n\tretractFaultDelay:= 3000 , \n\tfaultMonitoring:= distanceToMove > 0.5, \n\tfailedToExtend=> faults.failedToOpen.faultTrigger, \n\tfailedToRetract=> faults.failedToClose.faultTrigger);\n\t\nSUPER^();\n","LineInfoPersistence":"(string)eb17c3b9-ca8b-4c27-ad19-ca98c77b182d_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_MotorizedPressureBarRubberband EXTENDS FB_BaseComponent\nVAR_INPUT\n\tjawClear :BOOL := TRUE;\n\topenedPositionBuffer : DINT;\n\tiPressureBarClamped: BOOL;\n\tiPressureBarClosed : BOOL;\n\tiPressureBarNotObstructed : BOOL;\n\tiBaggerEnableButton : BOOL;\n\tiJawClampExtended : BOOL;\n\tiJawCLampRetracted : BOOL;\n\tpbarOutSetting : REAL := 12.0;\n\tpbarBagFeedSetting : REAL := 2.0;\n\tpbarInSetting : REAL := 0.0;\n\tcloseDelay : REAL;\n\tdisableFaults : BOOL;\n\textendJawClamp : BOOL;\n\tretractJawClamp : BOOL;\n\textendJaw : BOOL;\n\tretractJaw : BOOL;\n\tenableRubberBandJaw : BOOL;\n\tslowAccel : INT := 50;\n\tslowVel : INT := 1000;\n\tslowOpenThreshold : int := 6;\nEND_VAR\nVAR_OUTPUT\n\t\n\t\n\tfailToClampLeft : FB_Fault(name := 'Pbar Left Fail to Clamp');\n\tfailToReleaseLeft : FB_Fault(name := 'Pbar Left Fail to Release');\n\tfailToClampRight : FB_Fault(name := 'Pbar Right Fail to Clamp');\n\tfailToReleaseRight : FB_Fault(name := 'Pbar Right Fail to Release');\n\tfaults : PressureBarFaultsType;\n\tstate : MotorizedPbarStatesRubberBand;\n\tactualPosition : REAL;\n\tpressureBarOpen : BOOL;\n\tpressureBarClosed : BOOL;\n\thomeRequired : BOOL;\n\tclamped : BOOL;\nEND_VAR\nVAR\n\t_homeNow : BOOL;\n\t_openJaw : BOOL;\n\t_closeJaw : BOOL;\n\t_closeJawNoLatch : BOOL;\n\t_openForBagFeed : BOOL;\n\t_nextState : MotorizedPbarStatesRubberBand;\n\tjawClampsDelay : TIME := T#75MS;\n\tretryOpenDelay : TON := (PT:= T#500MS);\n\taccel : INT := 75;\n\tdecel : INT := 75;\n\tvelo : INT := 2000;\n\tclearVelo: INT := 1000;\n\ttestCurrent : DINT := 650;\n\ttestZeroCurrent : BOOL;\n\ttestSomeCurrent : BOOL;\n\ttestClamp : BOOL;\n\ttestRelease : BOOL;\n\ttestPosLimit : BOOL;\n\ttestDisable : BOOL;\n\ttestEnable : BOOL;\n\ttestResetPosition : BOOL;\n\tposLimit : DINT := 800;\n\tpbarFeedbackHandler : FB_CylinderFeedback;\n\tjawClampsLeftFeedbackHandler : FB_CylinderFeedback;\n\tjawClampsRightFeedbackHandler : FB_CylinderFeedback;\n\tstartTest : BOOL;\n\ttestActive : BOOL;\n\tmovePassthroughNow : BOOL;\n\tdelayTimer : Standard.TON := (PT:= T#500MS);\n\tfailTimer : Standard.TON := (PT:= T#500MS);\n\thomeRequiredONS : FB_ONS;\n\tfaultingONS : FB_ONS;\n\tfaultTimeMultiplier : REAL := 150;\n\tdistanceToMove : REAL;\n\tdisableMotorONS : FB_ONS;\n\tpbarOutCommandedSetting : REAL := 2;\n\tstrokeTimer : Standard.TON;\n\tstrokeTime : TIME;\n\tmovingONS : FB_ONS;\n\tdoneClampingDelay : Standard.TON := (PT := T#50MS);\n\tpressureBarPositionError : DINT;\n\tmovingOSF: f_trig;\n\t_incrementalReverse:BOOL := FALSE;\n\t_incrementalReverseDistance : REAL := 0.0;\n\t_moveJawClear: BOOL;\n\tretrycount: INT;\n\t_positionFaultLimit : INT;\n\t_motorCurrent : DINT;\nEND_VAR\nVAR_IN_OUT\n\tjawClamps : FB_ThreePositionCylinder;\n\tpbarMotor : FB_AppliedMotionStepServoEIPPassthrough;\nEND_VAR\nVAR CONSTANT\n\tMOTOR_CURRRENT_HIGH : DINT := 650;\n\tMOTOR_CURRENT_LOW : DINT := 200;\n\tPOSITION_FAULT_LIMIT_STANDARD : INT := 2000;\n\tPOSITION_FAULT_LIMIT_HIGH : INT := 24000;\nEND_VAR","LineInfoPersistence":"(string)eb17c3b9-ca8b-4c27-ad19-ca98c77b182d_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)9539","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}