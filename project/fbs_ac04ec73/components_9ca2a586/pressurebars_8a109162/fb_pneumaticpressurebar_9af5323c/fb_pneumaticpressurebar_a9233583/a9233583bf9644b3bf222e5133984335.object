{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)a9233583-bf96-44b3-bf22-2e5133984335","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_PneumaticPressureBar","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)9af5323c-ab64-4651-8b27-a38fea491f63"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: Cylinder\n//    Description: This program moves a jaw cylinder back and forth\n//    Created by: Ben Hess\n//    Created Date: January 16th, 2017\n\nSUPER^();\n\n//Stop the auto cycle if button pressed or coming out of auto mode or moving the servo.\nIF stopCyclePB OR NOT (_mode = DEVICE_MODES.SemiAuto) THEN \n    startCyclePB := FALSE;\nEND_IF\n\nHMIData.pressureBarService.retractedFeedback := iPressureBarRetracted;\nHMIData.pressureBarService.extendedFeedback := iPressureBarExtended;\n\nautoModeSelected := (_mode = DEVICE_MODES.Auto);\nsemiAutoModeSelected := (_mode = DEVICE_MODES.SemiAuto);\nmanualModeSelected := (_mode = DEVICE_MODES.Manual);\n\ntimerExtendedDebounce(PT := INT_TO_TIME(extendDelaySP));\ntimerExtendDwell(PT := INT_TO_TIME(extendDwellSP));\ntimerRetractedDebounce(PT := INT_TO_TIME(retractDelaySP));\ntimerRetractDwell(PT := INT_TO_TIME(retractDwellSP));\ntimerObsSwitchFault(PT := T#100MS);\n//Go to idle when enabled\nIF enableONS.Q OR resetONS.Q THEN    \n    state := PRESSURE_BAR_STATES.Idle;\n\t_reset := FALSE;\n\ttimerObsSwitchFault.IN := FALSE;\nEND_IF\n\nIF NOT enable THEN\n    state := PRESSURE_BAR_STATES.Idle;\nEND_IF\n\n_ready := (_mode = DEVICE_MODES.Auto) AND NOT (state = PRESSURE_BAR_STATES.Fault);\n\nfaultTimer();\nfillTimer(IN := (state = PRESSURE_BAR_STATES.FillCylindersWithAirThenClose OR state = PRESSURE_BAR_STATES.FillCylindersWithAirThenOpen));\n\nCASE state OF\n    \n                                    \n    PRESSURE_BAR_STATES.Idle :                //Initial state\n                                    IF (semiAutoModeSelected AND startCyclePB) OR (autoModeSelected AND _amOpenJaw) OR HMIData.pressureBarService.extendCommand THEN\n\t\t\t\t\t\t\t\t\t\t//IF lightCurtainsInstalled THEN\n\t\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.FillCylindersWithAirThenOpen;\n\t\t\t\t\t\t\t\t\t\t//ELSE\n\t\t\t\t\t\t\t\t\t\t\t//state := PRESSURE_BAR_STATES.OpenJaw;\n\t\t\t\t\t\t\t\t\t\t//END_IF\n                                        \n                                        _amOpenJaw := FALSE;\n\t\t\t\t\t\t\t\t\t\tHMIData.pressureBarService.extendCommand := FALSE;\n                                    ELSIF (autoModeSelected AND _amCloseJaw) OR HMIData.pressureBarService.retractCommand THEN\n                                        //IF lightCurtainsInstalled THEN\n\t\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.FillCylindersWithAirThenClose;\n\t\t\t\t\t\t\t\t\t\t//ELSE\n\t\t\t\t\t\t\t\t\t\t\t//state := PRESSURE_BAR_STATES.CloseJaw;\n\t\t\t\t\t\t\t\t\t\t//END_IF\n\t\t\t\t\t\t\t\t\t\t_amCloseJaw := FALSE;\n\t\t\t\t\t\t\t\t\t\tHMIData.pressureBarService.retractCommand := FALSE;\n                                    ELSIF manualModeSelected THEN\n                                        state := PRESSURE_BAR_STATES.Manual;\n                                    END_IF\n                                    timerObsSwitchFault.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\n    PRESSURE_BAR_STATES.FillCylindersWithAirThenOpen :\t\t// Fill the cylinders on both sides with air to prevent slamming\n\t \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tExtendCylinderLowPressure();\n\t\t\t\t\t\t\t\t\tIF fillTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.OpenJaw;\n\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\n    PRESSURE_BAR_STATES.OpenJaw :                //Open jaw by extending cylinder\n                                    ExtendCylinderHighPressure();\n                                    state := PRESSURE_BAR_STATES.OpeningJaw;\n    \n    PRESSURE_BAR_STATES.OpeningJaw :            //\n                                    //This delay is a debounce for the sensors.\n                                    faultTimer.PT := T#3S;\n\t\t\t\t\t\t\t\t\tfaultTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\tIF iPressureBarExtended THEN\n                                        timerExtendedDebounce.IN := TRUE;\n                                        IF timerExtendedDebounce.Q THEN\n\t\t\t\t\t\t\t\t\t\t\tIF lightCurtainsInstalled THEN\n\t\t\t\t\t\t\t\t\t\t\t\tExhaustCylinder();\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                            state := PRESSURE_BAR_STATES.JawOpened;\n                                            timerExtendedDebounce.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tfaultTimer.IN := FALSE;\n                                        END_IF\n\t\t\t\t\t\t\t\t\tELSIF faultTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\tfaultTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tExhaustCylinder();\n\t\t\t\t\t\t\t\t\t\tfaults.failedToOpen.Trigger();\n\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.Fault;\n                                    END_IF\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF (NOT iLightCurtainsClear AND lightCurtainsInstalled) THEN\n\t\t\t\t\t\t\t\t\t\tfaultTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tfaults.lightCurtainViolation.Trigger();\n\t\t\t\t\t\t\t\t\t\tExhaustCylinder();\n\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.Fault;\n\t\t\t\t\t\t\t\t\tEND_IF\n\n                                    \n                                    \n    \n    PRESSURE_BAR_STATES.JawOpened :            //Jaw is opened.  If in semi auto mode, go to close jaw after extend dwell. \n                                    IF (semiAutoModeSelected AND startCyclePB) THEN\n                                        timerExtendDwell.IN := TRUE;\n                                    END_IF\n                                    \n                                    IF timerExtendDwell.Q OR (autoModeSelected AND _amCloseJaw) OR HMIData.pressureBarService.retractCommand THEN\n                                        //IF lightCurtainsInstalled THEN\n\t\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.FillCylindersWithAirThenClose;\n\t\t\t\t\t\t\t\t\t\t//ELSE\n\t\t\t\t\t\t\t\t\t\t//\tstate := PRESSURE_BAR_STATES.CloseJaw;\n\t\t\t\t\t\t\t\t\t\t//END_IF\n                                        _amCloseJaw := FALSE;\n\t\t\t\t\t\t\t\t\t\tHMIData.pressureBarService.retractCommand := FALSE;\n                                        timerExtendDwell.IN := FALSE;\n                                    END_IF\n    \n\tPRESSURE_BAR_STATES.FillCylindersWithAirThenClose :\t\t// Fill the cylinders on both sides with air to prevent slamming\n\t \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//ExtendCylinderLowPressure();\n\t\t\t\t\t\t\t\t\tExtendCylinderHighPressure();\n\t\t\t\t\t\t\t\t\tIF fillTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.CloseJaw;\n\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n    PRESSURE_BAR_STATES.CloseJaw :            //Close jaw by retracting cylinder\n                                    RetractCylinder();\n                                    state := PRESSURE_BAR_STATES.ClosingJaw;\n    \n    PRESSURE_BAR_STATES.ClosingJaw :            //\n                                    //This delay is a debounce after the sensor is seen\n                                    faultTimer.PT := T#3S;\n\t\t\t\t\t\t\t\t\tfaultTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\tIF iPressureBarRetracted THEN\n                                        timerRetractedDebounce.IN := TRUE;    \n                                        IF timerRetractedDebounce.Q THEN\n                                            state := PRESSURE_BAR_STATES.JawClosed;\n                                            timerRetractedDebounce.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\tfaultTimer.IN := FALSE;\n                                        END_IF\n\t\t\t\t\t\t\t\t\tELSIF faultTimer.Q THEN\n\t\t\t\t\t\t\t\t\t\tfaultTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tfaults.failedToClose.Trigger();\n\t\t\t\t\t\t\t\t\t\tExtendCylinderLowPressure();\n\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.Fault;\n                                    END_IF\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF (NOT iLightCurtainsClear AND lightCurtainsInstalled) THEN\n\t\t\t\t\t\t\t\t\t\tfaultTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tfaults.lightCurtainViolation.Trigger();\n\t\t\t\t\t\t\t\t\t\tExhaustCylinder();\n\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.Fault;\n\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF NOT iPressureBarNotObstructed AND NOT iPressureBarRetracted THEN\n\t\t\t\t\t\t\t\t\t\tfaults.obstructionDetected.Trigger();\n\t\t\t\t\t\t\t\t\t\tExhaustCylinder();\n\t\t\t\t\t\t\t\t\t\tfaultTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.Fault;\n\t\t\t\t\t\t\t\t\tEND_IF\n                                    \n                                    \n                                    \n    \n    PRESSURE_BAR_STATES.JawClosed :            //Go to sealing if seal bar enabled, otherwise if in auto mode go to open jaw after retract dwell. Else go back to idle\n\n                                    \n                                    IF (semiAutoModeSelected AND startCyclePB) THEN\n                                        timerRetractDwell.IN := TRUE;\n                                    END_IF    \n\t\t\t\t\t\t\t\t\tIF iPressureBarNotObstructed THEN\n\t\t\t\t\t\t\t\t\t\ttimerObsSwitchFault.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\tIF timerObsSwitchFault.Q THEN\n\t\t\t\t\t\t\t\t\t\t\tExtendCylinderLowPressure();\n\t\t\t\t\t\t\t\t\t\t\tfaults.obstructionFailedToSwitch.Trigger();\n\t\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.Fault;\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\ttimerObsSwitchFault.IN := FALSE;\n\t\t\t\t\t\t\t\t\tEND_IF\n                                    \n                                    IF timerRetractDwell.Q OR (autoModeSelected AND _amOpenJaw) OR HMIData.pressureBarService.extendCommand THEN\n                                        state := PRESSURE_BAR_STATES.FillCylindersWithAirThenOpen;\n\t\t\t\t\t\t\t\t\t\tHMIData.pressureBarService.extendCommand := FALSE;\n                                        _amOpenJaw := FALSE;\n                                        timerRetractDwell.IN := FALSE;\n                                    END_IF\n\n \n    PRESSURE_BAR_STATES.Manual :    IF manualExhaustPB THEN\n                                        ExhaustCylinder();\n                                        manualExhaustPB := FALSE;\n                                    ELSIF manualRetractPB THEN\n                                        RetractCylinder();\n                                        manualRetractPB := FALSE;\n                                    ELSIF manualExtendHighPressurePB THEN\n                                        ExtendCylinderHighPressure();\n                                        manualExtendHighPressurePB := FALSE;\n\t\t\t\t\t\t\t\t\tELSIF manualExtendLowPressurePB THEN\n                                        ExtendCylinderLowPressure();\n                                        manualExtendLowPressurePB := FALSE;\n                                    END_IF\n                                \n    PRESSURE_BAR_STATES.Fault : \t\t\n\t\t\t\t\t\t\t\t\tExhaustCylinder();\n    \nEND_CASE\n\nIF NOT iPressureBarNotObstructed AND Globals.jawMovingIn THEN\n\t\t\t\t\t\t\t\t\t\tfaults.obstructionDetected.Trigger();\n\t\t\t\t\t\t\t\t\t\t//ExtendCylinderLowPressure();\n\t\t\t\t\t\t\t\t\t\tExhaustCylinder();\n\t\t\t\t\t\t\t\t\t\tfaultTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\tstate := PRESSURE_BAR_STATES.Fault;\nEND_IF\nIF iPressureBarExtended AND iPressureBarRetracted THEN\n\tfaults.sensorFault.Trigger();\n\tstate := PRESSURE_BAR_STATES.Fault;\nEND_IF\n\n//Count cycles\nincrementCount(CLK :=timerExtendDwell.Q); \nIF incrementCount.Q THEN\n    cumulativeHeadCycleCount := cumulativeHeadCycleCount + 1;\nEND_IF\n","LineInfoPersistence":"(string)a9233583-bf96-44b3-bf22-2e5133984335_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_PneumaticPressureBar EXTENDS FB_BaseComponent\nVAR_INPUT\n\tiPressureBarRetracted : BOOL;\n\tiPressureBarExtended : BOOL;\n\tiPressureBarNotObstructed : BOOL;\n\tiLightCurtainsClear : BOOL;\n\tlightCurtainsInstalled : BOOL;\nEND_VAR\nVAR_OUTPUT\n    state : PRESSURE_BAR_STATES;     //Jaw State\n\toExtendCylinder : BOOL;\n\toRetractCylinder : BOOL;\n\tfaults : PressureBarFaultsType;\nEND_VAR\nVAR\n    _amOpenJaw : BOOL;    // Auto Mode Open Jaw Command\n    _amCloseJaw : BOOL;     // Auto Mode Close Jaw Command\n    startCyclePB : BOOL;                //Start Cycle\n    stopCyclePB : BOOL;                //Stop Cycle\n    manualExtendHighPressurePB : BOOL;            //Manually Extend Cylinder High Pressure\n    manualExtendLowPressurePB : BOOL;            //Manually Extend Cylinder Low Pressure\n    manualRetractPB : BOOL;            //Manually Retract Cylinder\n    manualExhaustPB : BOOL;            //Manually Echaust Cylinder\n    timerExtendedDebounce : TON;            //Timer for extend delay\n    timerExtendDwell : TON;            //Timer for extend dwell after extended\n    timerRetractedDebounce : TON;        //Timer for retract delay\n    timerRetractDwell : TON;        //Timer for retract dwell after extended\n    timerSealDwell : TON;            //Timer for seal dwell\n\ttimerObsSwitchFault : Standard.TON;\n    extendDelaySP : INT := 50;    //Extend delay SP\n    extendDwellSP : INT := 300;    //Extend dwell SP\n    retractDelaySP : INT := 50;        //Retract delay SP\n    retractDwellSP : INT := 750;    //Retract dwell SP\n    incrementCount : R_TRIG();\n    incrementSealBarCountONS : Standard.R_TRIG;\n    incrementBagOpenFinersONS : Standard.R_TRIG;\n\tfaultTimer : Standard.TON;\n\tfillTimer : Standard.TON := (PT := T#150MS);\nEND_VAR\nVAR_IN_OUT\n\tcumulativeHeadCycleCount : DINT;\nEND_VAR","LineInfoPersistence":"(string)a9233583-bf96-44b3-bf22-2e5133984335_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)3442","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}