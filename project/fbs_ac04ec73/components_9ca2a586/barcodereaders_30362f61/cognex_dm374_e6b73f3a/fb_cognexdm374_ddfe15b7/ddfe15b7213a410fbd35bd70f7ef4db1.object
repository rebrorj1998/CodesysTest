{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)ddfe15b7-213a-410f-bd35-bd70f7ef4db1","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_CognexDM374","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)e6b73f3a-e123-4184-bbf1-ce157c2b1be1"}]}}}},{"@Key":"(Guid)97c1f2ea-5995-48b9-abd5-a3ab983c5def","@Value":{"@Type":"97c1f2ea","@Value":{"UseExplicitExecutionOrder":"(bool)False"}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","97c1f2ea":"{97c1f2ea-5995-48b9-abd5-a3ab983c5def}","bool":"System.Boolean","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\n//\nSUPER^();\n\n// If reset or not enabled move to the idle state to clear all variables\nIF resetONS.Q OR NOT enable THEN\n\t_state := eCognexDM374States.Idle;\nEND_IF\n\n// Read data from barcode scanner\n_triggerReady              := inputScannerData[0].0;\n_triggerAck                := inputScannerData[0].1;\n_triggerID.bytes[0]        := inputScannerData[6];\n_triggerID.bytes[1]        := inputScannerData[7];\n_resultID.bytes[0]         := inputScannerData[8];\n_resultID.bytes[1]         := inputScannerData[9];\n_result                    := inputScannerData[10].0;\n_resultDataLength.bytes[0] := inputScannerData[13];\n_resultDataLength.bytes[1] := inputScannerData[14];\n_resultData                := ADR(inputScannerData[16]);\n\n// Write data to barcode scanner\noutputScannerData[0].0 := _triggerEnable;\noutputScannerData[0].1 := _trigger;\n\n// The resulting string of the last read barcode. Can possibly be two results in one string\nlastReadData := LEFT(_resultData^, _resultDataLength.i - 1);\n\n// Controls the trigger duration\n_triggerTimer(PT := TO_TIME(triggerDwell * 1000));\n\n// If trigger is high and we dont see an ack bit, fault after debounce\n_triggerAckTimer(IN := _trigger AND NOT _triggerAck, Q => triggerFeedbackFault);\n\n// DM374 State Machine\nCASE _state OF\n\teCognexDM374States.Idle:\n\t\n\t\t// Null parameters\n\t\t_trigger := FALSE;\n\t\t_triggerTimer.IN := FALSE;\n\t\t_triggerAckTimer.IN := FALSE;\n\t\tbarcodeFault := FALSE;\n\t\t\n\t\t_triggerONS(CLK := trigger);\n\t\tIF _triggerONS.OSR AND _triggerReady THEN\n\t\t\t_triggerIDBuffer := _triggerID.i;\n\t\t\t_state := eCognexDM374States.Trigger;\n\t\tEND_IF\n\t\n\teCognexDM374States.Trigger:\n\t\t_trigger := TRUE;\n\t\t_triggerTimer.IN := TRUE;\n\t\t_state := eCognexDM374States.WaitForResults;\n\t\n\teCognexDM374States.WaitForResults:\n\t\tIF _triggerTimer.Q THEN\n\t\t\t_trigger := FALSE;\n\t\t\t// Make sure the resultID matches the triggerID for accurate results\n\t\t\tIF _resultID.i = _triggerIDBuffer THEN\n\t\t\t\t_triggerTimer.IN := FALSE;\n\t\t\t\t_state := eCognexDM374States.Idle;\n\t\t\t\tIF NOT _result THEN\n\t\t\t\t\t// Incremenet bad read count\n\t\t\t\t\tbadReadCount := badReadCount + 1;\n\t\t\t\t\tgoodReadCount := 0;\n\t\t\t\tELSE\n\t\t\t\t\t// Increment good read count\n\t\t\t\t\tbadReadCount := 0;\n\t\t\t\t\tgoodReadCount := goodReadCount +1;\n\t\t\t\tEND_IF\n\t\t\t\tIF badReadCount >= badScanFaultsAllowed THEN\n\t\t\t\t\tbarcodeFault := TRUE;\n\t\t\t\tEND_IF\n\t\t\tEND_IF\n\t\tEND_IF\nEND_CASE\n\n// Setting this tag enables EtherNet/IP triggering\n_triggerEnable := TRUE;","LineInfoPersistence":"(string)ddfe15b7-213a-410f-bd35-bd70f7ef4db1_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_CognexDM374 EXTENDS FB_BaseComponent\nVAR_INPUT\n\ttrigger : BOOL;\n\ttriggerDwell : REAL;\n\tbadScanFaultsAllowed : UDINT;\n\tinputScannerData : POINTER TO BYTE;\n\toutputScannerData : POINTER TO BYTE;\nEND_VAR\nVAR_OUTPUT\n\tlastReadData : STRING[100];\n\tgoodReadCount : UDINT;\n\tbadReadCount : UDINT;\n\tbarcodeFault : BOOL;\n\ttriggerFeedbackFault : BOOL;\nEND_VAR\nVAR\n\t_result : BOOL;\n\t_resultData : POINTER TO STRING[100];\n\t_resultDataLength : CombineBytes;\n\t_resultID : CombineBytes;\n\t_triggerID : CombineBytes;\n\t_triggerReady : BOOL;\n\t_triggerEnable : BOOL;\n\t_trigger : BOOL;\n\t_triggerONS : FB_ONS;\n\t_triggerAck : BOOL;\n\t_triggerIDBuffer : INT;\n\t_triggerAckTimer : Standard.TON := (PT := T#1S);\n\t_triggerTimer : Standard.TON;\n\t_state : eCognexDM374States;\nEND_VAR\n","LineInfoPersistence":"(string)ddfe15b7-213a-410f-bd35-bd70f7ef4db1_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)1398","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}