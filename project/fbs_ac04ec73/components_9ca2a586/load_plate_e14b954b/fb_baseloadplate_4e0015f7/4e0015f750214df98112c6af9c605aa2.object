{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)4e0015f7-5021-4df9-8112-c6af9c605aa2","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_BaseLoadPlate","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)e14b954b-9d71-4f0c-835e-e37ae87d18ff"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\n//  FB_BaseLoadPlate\n//  FBs/Components/LoadPlate/FB_BaseLoadPlate\n//\n//  Created by Evan Ische on 6/19/2021. \n//  Copyright (C) 2021 Sharp Packaging Systems By Pregis. All rights reserved.\n//\n\nSUPER^();\n\n// Null Parameters on reset of cycle completion\t\t\t\t   \nIF _triggerDwellTimer.Q OR resetONS.Q THEN\n\t_trigger := FALSE;\n\t_shaking := FALSE;\n\t_shake := FALSE;\n\t_shakerDelayTimer.IN := FALSE;\n\t_shakerDwellTimer.IN := FALSE;\n\t_extendFaultTimer.IN := FALSE;\n\t_retractFaultTimer.IN := FALSE;\n\t_state := LOAD_PLATE_STATE.Idle;\nEND_IF\n\n//\n_inUseONS(CLK := inUse); \n\n//\n_shakeONS(CLK := _shaker.OUT);\n\n//\n_triggerONS(CLK := _triggerDelayTimer.Q);\n\n//\n_faultActiveONS(CLK := faultActive);\n\n//\n_disabledPositionHasUpdated := FALSE;\nIF disabledPosition <> _previousDisabledPosition THEN\n\t_disabledPositionHasUpdated := TRUE;\n\t_previousDisabledPosition := disabledPosition;\nEND_IF \n_switchedPowerOnONS(CLK := switchedPowerON);\n\n//\n_updateNotInUsePosition := (_switchedPowerOnONS.OSR OR _disabledPositionHasUpdated OR _inUseONS.OSF);\t\t\nIF _manualOn \n\tOR ((_triggerONS.OSR OR _shakeONS.OSF OR (_faultActiveONS.OSR AND switchedPowerON AND dischargeOnFault)) AND inUse) \n\tOR (_updateNotInUsePosition AND DischargePositionWhileDisabled AND NOT inUse) \n\tTHEN\n\t\tmoveToDischargePosition := TRUE;\n\t\t_manualOn := FALSE;\nELSIF _manualOff \n\tOR (((_triggerONS.OSF AND NOT faultActive) OR _shakeONS.OSR OR _inUseONS.OSR OR resetONS.Q) AND inUse) \n\tOR (_updateNotInUsePosition AND LoadingPositionWhileDisabled AND NOT inUse) \n\tTHEN\n\t\tmoveToDischargePosition := FALSE;\n\t\t_manualOff := FALSE;\nEND_IF\nmoveToLoadingPositon := NOT moveToDischargePosition;\n\n// Counts the time between telling an actuator to move positions, and when it gets to the new position. If Timer finished, fault.\n_extendFaultTimer(\n\tIN := moveToLoadingPositon AND NOT inLoadingPosition AND faultsEnabled AND NOT resetONS.Q,\n\tPT := _faultTime,\n\t Q => failedToExtend);\n\t \n_retractFaultTimer(\n\tIN := moveToDischargePosition AND NOT inDischargePosition AND faultsEnabled AND NOT resetONS.Q,\n\tPT := _faultTime,\n\t Q => failedToRetract);\n\n// How Long To Wait Before Going Active\n_triggerDelayTimer(\n\tIN := _trigger,\n\tPT := TO_TIME(triggerDelay * 1000));\n\t\n// Retract Duration\n_triggerDwellTimer(\n\tIN := _triggerDelayTimer.Q,\n\tPT := TO_TIME(triggerDwell * 1000));\n\t\n// \n_shaker(\n\tTIMEHIGH := TO_TIME(shakerOnDwell * 1000),\n\tTIMELOW := TO_TIME(shakerOffDwell * 1000));\n_shakerDelayTimer(PT := TO_TIME(shakerDelay * 1000));\n_shakerDwellTimer(PT := TO_TIME(shakerDwell * 1000));\t\n\n//\nCASE _state OF\n\tLOAD_PLATE_STATE.Idle:\n\t\tIF _shake THEN\n\t\t\t_shake := FALSE;\n\t\t\t_state := LOAD_PLATE_STATE.Shake;\n\t\tEND_IF\n\t\n\tLOAD_PLATE_STATE.Shake:\n\t\t_shakerDelayTimer.IN := TRUE;\n\t\tIF _shakerDelayTimer.Q THEN\n\t\t\t_shakerDelayTimer.IN := FALSE;\n\t\t\t_state := LOAD_PLATE_STATE.Shaking;\n\t\tEND_IF\n\t\n\tLOAD_PLATE_STATE.Shaking:\n\t\t// Starts Shaker\n\t\t_shaker.ENABLE := TRUE;\n\t\t_shakerDwellTimer.IN := TRUE;\n\t\tIF _shakerDwellTimer.Q THEN\n\t\t\t// Ends Shaker\n\t\t\t_shaker.ENABLE := FALSE;\n\t\t\t_shakerDwellTimer.IN := FALSE;\n\t\t\t_state := LOAD_PLATE_STATE.Shaked;\n\t\tEND_IF\n\t\n\tLOAD_PLATE_STATE.Shaked:\n\t\tIF inLoadingPosition THEN\n\t\t\t_state := LOAD_PLATE_STATE.Idle;\n\t\tELSE\n\t\t\tIF NOT inLoadingPosition THEN\n\t\t\t\t_manualOff := TRUE;\n\t\t\tEND_IF\n\t\tEND_IF\nEND_CASE","LineInfoPersistence":"(string)4e0015f7-5021-4df9-8112-c6af9c605aa2_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_BaseLoadPlate EXTENDS FB_BaseComponent\nVAR_INPUT\n\tinUse : BOOL;\n\tfaultActive : BOOL;\n\tdischargeOnFault : BOOL;\n\tinLoadingPosition : BOOL;\n\tinDischargePosition : BOOL;\n\tswitchedPowerON : BOOL;\n\tfaultsEnabled : BOOL;\n\ttriggerDwell : REAL;\n\ttriggerDelay : REAL;\n    shakerEnable : BOOL;\n\tshakerDwell : REAL;\n\tshakerDelay : REAL;\n\tshakerOnDwell : REAL;\n\tshakerOffDwell : REAL;\n\tshakeStart : SHAKER_START_SELECTION;\n\tdisabledPosition : PackageEjectionDisabledPosition;\nEND_VAR\nVAR_OUTPUT\n\tmoveToDischargePosition : BOOL;\n\tmoveToLoadingPositon : BOOL;\n\tfailedToExtend : BOOL;\n\tfailedToRetract : BOOL;\nEND_VAR\nVAR\n\t_faultActiveONS : FB_ONS;\n\t_faultTime : TIME := T#2500MS;\n\t_shake : BOOL;\n\t_shaking : BOOL;\n\t_trigger : BOOL;\n\t_manualOn : BOOL;\n\t_manualOff : BOOL;\n\t_shaker : Util.BLINK;\n\t_shakerDelayTimer : Standard.TON;\n\t_shakerDwellTimer : Standard.TON;\n\t_triggerDelayTimer : Standard.TON;\n\t_triggerDwellTimer : Standard.TON;\n\t_extendFaultTimer : Standard.TON;\n\t_retractFaultTimer : Standard.TON;\n\t_triggerONS : FB_ONS;\n\t_shakeONS : FB_ONS;\n\t_state : LOAD_PLATE_STATE;\n\t_inUseONS : FB_ONS;\n\t_switchedPowerOnONS : FB_ONS;\n\t_disabledPositionHasUpdated : BOOL;\n\t_previousDisabledPosition : PackageEjectionDisabledPosition;\n\t_updateNotInUsePosition : BOOL;\nEND_VAR\n","LineInfoPersistence":"(string)4e0015f7-5021-4df9-8112-c6af9c605aa2_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)3579","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}