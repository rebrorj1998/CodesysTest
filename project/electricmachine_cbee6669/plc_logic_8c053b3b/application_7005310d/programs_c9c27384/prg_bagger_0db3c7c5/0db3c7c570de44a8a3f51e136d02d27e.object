{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)0db3c7c5-70de-44a8-a3f5-1e136d02d27e","ParentGuid":"(Guid)7005310d-b120-4936-a828-3693f92ca107","Name":"(string)PRG_Bagger","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)c9c27384-9013-48c1-8e63-d2921de84879"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Program: PRG_Bagger \n//    Description: This program glues together the whole machine and all of its components.\n//    \n//    Created by: Ben Hess\n//    Created Date: Tuesday, April 17, 2019\n\nmoabHead();\n//pneuHead();\nfaultHandler();\nhmiInitiate := HMIData.initiateCycle;\ncurrentDateAndTime();\n//msfCommFaultONS(CLK := MSFMotor.eState <> IoDrvEthernetIP.AdapterState.RUNNING);\nHMIData.bagEdgePhotoeyeCovered := NOT iBagNotPresent;\noSoftStart := TRUE;\n\nHMIData.airFilterClean();\nHMIData.pressureBarGuideShaftGuides();\nHMIData.driveRollerClean();\nHMIData.printHeadClean();\n//HMIData.pressureBarLeak(iExtended := iPressureBarExtended, iRetracted := iPressureBarRetracted, maximumStrokeTime := (TO_REAL(HMIData.passthroughSetting / 26.6)) + 0.3);\nHMIData.loadPlateLeak(iExtended := iLoadPlateExtended, iRetracted := iLoadPlateRetracted, maximumStrokeTime := 0.4);\n//HMIData.msfHorizontalMotorTemp(iDriveTemp := sealFlattenerHorizontalMotorInputs[4]);\n//HMIData.bagDeliveryMotorTemp(iDriveTemp := bagDeliveryMotorInputs[4]);\n//HMIData.passthroughMotorTemp(iDriveTemp := jawPasstrhoughMotorInputs[4]);\n\n\n\n\nIF resetCommFaults THEN\n\tFOR i := 0 TO numberOfMSFFaults BY 1 DO\n\t\tmsfMotorFaults[i].message := '';\n\t\tmsfMotorFaults[i].timeOfFault := DT#1970-1-1-1:0:0;\n\tEND_FOR\n\tnumberOfMSFFaults := 0;\n\tmsfFaultListFull := FALSE;\n\tresetCommFaults := FALSE;\nEND_IF\n\nthroughputCalculator(\n\tinCycle:= HMIData.inCycle, \n\truntimeTimeout:= , \n\treset:= HMIData.resetAverageCycleTime, \n\tBPM=> HMIData.calculatedCyclesPerMinute, \n\tBPMCycles=> , \n\tBPMSeconds=> , \n\tBPMIndication=> );\n\t\n// HMIData.version := SVN_VERSION_INFO.VERSION;\nfaultOutTimer(PT := T#2S);\n_LOTARCompleteONS(CLK := iPALOTAR);\nIF _LOTARCompleteONS.OSF OR (moabHead.state.head = HEAD_STATES.Idle AND NOT iPALOTAR) THEN\n\t_faultSequenceCompleted := TRUE;\nEND_IF\n\n// Test code to run bagger even with a barcode fault\nIF ((HMIData.barcodeVerifierSelection = BCVSelection.TwoDimensional) AND (HMIData.printerSelection = LabelPrinterSelection.PrintAndApply300DPI)) THEN\n\tHMIData.faultActive := (_faulActive AND GlobalObjects.CollectionOfActiveFaults.faultActive AND NOT moabHead.barcodeVerificationFailed.active) OR (_faulActive AND moabHead.barcodeVerificationFailed.active AND _faultSequenceCompleted) OR (_faulActive AND GlobalObjects.CollectionOfActiveFaults.totalObj > 1);\nELSE\n\tHMIData.faultActive := GlobalObjects.CollectionOfActiveFaults.faultActive;\nEND_IF\n\nIF GlobalObjects.CollectionOfActiveFaults.faultActive THEN\n\t_faulActive := TRUE;\nELSE\n\t_faulActive := FALSE;\n\t_faultSequenceCompleted := FALSE;\nEND_IF\n\n//HMIData.faultActive := GlobalObjects.CollectionOfActiveFaults.faultActive;\n//faultActiveONS(CLK := GlobalObjects.CollectionOfActiveFaults.faultActive);\nfaultActiveONS(CLK := HMIData.faultActive);\nIF faultActiveONS.OSR THEN\n\tmoabHead.hmiLight.TurnOff();\nEND_IF","LineInfoPersistence":"(string)0db3c7c5-70de-44a8-a3f5-1e136d02d27e_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)PROGRAM PRG_Bagger\nVAR_INPUT\n\nEND_VAR\nVAR_OUTPUT\n    \nEND_VAR\nVAR\n\t_LOTARCompleteONS : FB_ONS;\n\t_faulActive : BOOL;\n\t_faultSequenceCompleted : BOOL;\n\t_barcodeVerificationFailed : BOOL;\n    moabHead : FB_MOABHead_Electric;\n    //angledHead : FB_20degHead();\n    //pneuHead : FB_PneumaticHead();\n    testEIPMotor : FB_AppliedMotionStepServoEIPBase();\n    faultHandler : FB_FaultHandler();\n\thmiInitiate : BOOL;\n\tmsfMotorFaults : ARRAY[0..100] OF MotorCommFault;\n\tnumberOfMSFFaults : UINT;\n\tmsfCommFaultONS : R_TRIG();\n\tmsfFaultListFull : BOOL;\n\tfestoFaults : ARRAY[0..100] OF MotorCommFault;\n\tnumberOfFestoFaults : UINT;\n\tfestoCommFaultONS : R_TRIG();\n\tfestoFaultListFull : BOOL;\n\tcurrentDateAndTime : GetTime();\n\tresetCommFaults : BOOL;\n\ti : INT;\n\treverseFault : FB_HMIFault := (refFault := PRG_Bagger.moabHead.bagDelivery.reverseFault);\n\tfaultActiveONS : FB_ONS;\n\tthroughputCalculator : FB_Throughput();\n\tfaultOutTimer : TON();\nEND_VAR\n","LineInfoPersistence":"(string)0db3c7c5-70de-44a8-a3f5-1e136d02d27e_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)620","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}