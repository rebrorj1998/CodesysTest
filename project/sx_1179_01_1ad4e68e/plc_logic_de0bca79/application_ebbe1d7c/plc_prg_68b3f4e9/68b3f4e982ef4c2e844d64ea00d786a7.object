{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)68b3f4e9-82ef-4c2e-844d-64ea00d786a7","ParentGuid":"(Guid)ebbe1d7c-dc4c-48cc-803f-785ef2dd37d1","Name":"(string)PLC_PRG","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tProgram: PLC_PRG\n//\tDescription: Base program for the 1179/1181 SX. \n//\t\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: \n\n\n\n\n// Initialze global objects on first scan\nIF NOT firstScanDone THEN\n\tGlobalObjects.CollectionOfInitialzable.InitializeAll();\n\tGlobalObjects.CollectionOfLoggable.RegisterAll(internalLogger := Globals.SystemLog);\n\tGlobalObjects.CollectionOfFaults.FaultUpdateForHMI();\n\thIecTask := IecTaskGetCurrent(0);\n\tIecTaskDisableWatchdog(hIecTask); // Watchdog disabled\n\tfirstScanDone := TRUE;\nEND_IF\n\n// Teach bag photoeye\nteachPhotoeyeTimer(IN := HMIData.teachBagPhotoeye, Q => oTeachPhotoeye);\nHMIData.teachingBagPhoteye := oTeachPhotoeye;\n\n// Use fault collection for faultActive indication\nHMIData.faultActive := GlobalObjects.CollectionOfActiveFaults.faultActive;\n\n// Cycle start conditions\n// Auto mode dwell timer\nautoModeTimer(PT := TO_TIME(HMIData.autoModeDwell * 1000), IN := autoModeKeepCycling AND UN00_SXMachine.currentState = PACK_ML.State.Execute AND NOT HMIData.inCycle);\n// Start from Cycle Start input\ncycleStartONS(clk := iCycleStart);\n// All start conditions\nIF HMIData.initiateCycle OR cycleStartONS.OSR OR autoModeTimer.Q THEN\n\tIF UN00_SXMachine.currentState = PACK_ML.State.Execute AND NOT HMIData.inCycle THEN\n\t\tEM01_SXBaggerHead.StartCycle();\n\t\tIF HMIData.autoModeEnable THEN\n\t\t\tautoModeKeepCycling := TRUE;\n\t\tEND_IF\n\tEND_IF\n\tHMIData.initiateCycle := FALSE;\nEND_IF\n// Unlatch flag for auto mode when faulted or stopped\nIF UN00_SXMachine.currentState <> PACK_ML.State.Execute OR HMIData.ackAllFaults OR NOT HMIData.autoModeEnable THEN\n\tautoModeKeepCycling := FALSE;\nEND_IF\n\n// Only faults execute automatically to handle acking and clearing without being run in each FB that contains them\nIF firstScanDone THEN\n\tGlobalObjects.CollectionOfExecutable.ExecuteAll();\nEND_IF\n\n// Power up all motors\npowerUpFrontJawMotor(Enable := TRUE, Axis := baggerCM.jawFrontMotor);\npowerUpFrontJawMotor.DriveStart := TRUE;\npowerUpFrontJawMotor.RegulatorOn := TRUE;\n\npowerUpRearJawMotor(Enable := TRUE, Axis := baggerCM.jawRearMotor);\npowerUpRearJawMotor.DriveStart := TRUE;\npowerUpRearJawMotor.RegulatorOn := TRUE;\n\npowerUpBothJawMotors(Enable := TRUE, Axis := baggerCM.jawBothMotors);\npowerUpBothJawMotors.DriveStart := TRUE;\npowerUpBothJawMotors.RegulatorOn := TRUE;\n\npowerUpLoadPlateMotor(Enable := HMIData.loadPlateInstalled, Axis := baggerCM.loadPlateMotor);\npowerUpLoadPlateMotor.DriveStart := HMIData.loadPlateInstalled;\npowerUpLoadPlateMotor.RegulatorOn := HMIData.loadPlateInstalled;\n\npowerUpBagDeliveryMotor(Enable := TRUE, Axis := baggerCM.bagDeliveryFrontMotor);\npowerUpBagDeliveryMotor.DriveStart := TRUE;\npowerUpBagDeliveryMotor.RegulatorOn := TRUE;\n\npowerUpIBDMotor(Enable := HMIData.IBDInstalled, Axis := baggerCM.IBDMotor);\npowerUpIBDMotor.DriveStart := HMIData.IBDInstalled;\npowerUpIBDMotor.RegulatorOn := HMIData.IBDInstalled;\n\n// Disable Modbus device tree objects if option not installed\nIF NOT HMIData.loadPlateInstalled THEN\n\tLoad_Plate_Motor.Enable := FALSE;\nELSE\n\tLoad_Plate_Motor.Enable := TRUE;\nEND_IF\n\nIF NOT HMIData.IBDInstalled THEN\n\tIBD_Motor.Enable := FALSE;\nELSE\n\tIBD_Motor.Enable := TRUE;\nEND_IF\n\n// Barcode Verifier manual trigger\nIF HMIData.barcodeVerifierTrigger THEN\n\tbaggerCM.barcodeVerifier.TriggerImmediate();\n\tHMIData.barcodeVerifierTrigger := FALSE;\nEND_IF\n\n// Printer sample label sending\nIF HMIData.sendSampleLabels AND NOT printerLabel.xExecute THEN\n\tprinterLabel.xExecute := TRUE;\n\tprinterLabel.sendSampleLabel := TRUE;\n\tprinterLabel.sendClearLabel := FALSE;\n\tHMIData.sendSampleLabels := FALSE;\nELSIF HMIData.clearAllLabels AND NOT printerLabel.xExecute THEN\n\tprinterLabel.xExecute := TRUE;\n\tprinterLabel.sendSampleLabel := FALSE;\n\tprinterLabel.sendClearLabel := TRUE;\n\tHMIData.clearAllLabels := FALSE;\nEND_IF\n\nIF printerLabel.xDone THEN\n\tprinterLabel.xExecute := FALSE;\nEND_IF\nprinterLabel();\n\n// Run collection of bagger control modules\nbaggerCM();\n\n// Set bagger head control modules\nEM01_SXBaggerHead(\n\tbagOpenFingers:= baggerCM.dummyBOF, \n\tsealFlatteners:= baggerCM.dummySealFlatteners, \n\tsealer:= baggerCM.sealWire, \n\tpressureBar:= baggerCM.dualMotorPassthrough, \n\tprinter:= baggerCM.labelPrinter, \n\tbagDelivery:= baggercm.bagDelivery, \n\tvacuumBagOpen:= baggerCM.dummyVacuumCups, \n\tIBD:= baggerCM.IBD, \n\tloadPlate:= baggerCM.loadPlate, \n\tbarcodeVerifier:= baggerCM.barcodeVerifier, \n\tbagOpenAssistEnabled:= FALSE, \n\tbagOpenSensorEnabled:= FALSE, \n\tcancelPrint := HMIData.printerCancelRequest,\n\tseparateBeforeSealEnabled:= HMIData.separateBeforeSeal, \n\tbagOpenRetrySetting:= , \n\tnewJobLoaded:= , \n\tvacuumDwell:= , \n\tbagOpenRetryCount=> , \n\tfailedToOpenBag=> );\n\t\n\nEM02_SXDischarge();\n\n// Machine unit\nUN00_SXMachine(faultActive:= HMIData.faultActive, resetMachine := HMIData.ackAllFaults, homeMachine := HMIData.homeMachine, currentState=> , baggerHead:= EM01_SXBaggerHead, discharge:= EM02_SXDischarge);\n\n// Trigger fault if top cover lifted during cycle\nIF HMIData.inCycle AND NOT iTopCoverClosed THEN\n\ttopCoverLiftedFault.Trigger();\nEND_IF\n\n\n// Banner palm button has 4 states - off, solid green, 50/50 green/white rotating, and flashing red\npalmButton(\n\tbaggerReady:= UN00_SXMachine.currentState = PACK_ML.State.Execute, \n\tbaggerFaulted:= HMIData.faultActive, \n\tbaggerInCycle:= HMIData.inCycle, \n\tpalmState0Output=> oPalmButton0, \n\tpalmState1Output=> oPalmButton1);\n\t\n//\n// HMI Mapping\n//\n\n// Send the list of active fault strings to HMI for viewing\nHMIData.activeFaults := GlobalObjects.CollectionOfActiveFaults.ObjNames;\n\nHMIData.inCycle := UN00_SXMachine.baggerManager.BaggerAutoMode.baggerCycleActive;\n// PackML state to string for HMI\nHMIData.currentPackMLState := UN00_SXMachine.baggerManager.BaggerAutoMode.currentBaggerState;\n\n\n// Banner manager takes care of the Multistate lamp used as a banner on the proface \nbannerManager(\n\tbaggerNotReady:= NOT UN00_SXMachine.currentState = PACK_ML.State.Execute, \n\tbaggerReady:= UN00_SXMachine.currentState = PACK_ML.State.Execute AND NOT HMIData.inCycle, \n\tbaggerInCycle:= HMIData.inCycle, \n\tnoBagCoveringEye:= baggerCM.bagDelivery.noBagOverEye.Active, \n\tbagFailedToSeperate:= baggerCM.bagDelivery.bagFailedToSeparate.Active, \n\tpbarObstruction:= baggerCM.dualMotorPassthrough.pressureBarObstructed.Active, \n\tlightCurtainViolation:= , \n\tprintHeadFTR:= baggerCM.labelPrinter.printHeadFailToRaise.Active, \n\tprintHeadFTL:= baggerCM.labelPrinter.printHeadFailToLower.Active, \n\tbarcodeFault:= EM01_SXBaggerHead.barcodeVerificationFailed.Active, \n\ttooManyPartsCounted:= , \n\tjawFailedToClose:= baggerCM.dualMotorPassthrough.failedToClose.Active, \n\tjawFailedToHome:= baggerCM.dualMotorPassthrough.failedToHome.Active, \n\tfilmFeedMotionFault:= , \n\tjawMotionFault:= baggerCM.dualMotorPassthrough.bothMotorsFault.Active, \n\twaitingOnPrinter:= UN00_SXMachine.baggerManager.BaggerAutoMode.releaseAndFeedSubState = RELEASE_FEED_STATES.WaitForPrinter,\n\twaitingOnFiller:= , \n\tbatchCounterDone:= , \n\tjawNotHomed:= NOT baggerCM.dualMotorPassthrough.IsHomed AND NOT HMIData.inCycle, \n\tcycleBaggerTForFiller:= , \n\tmachineNotTested:=  HMIData.bagsMade < 1000, \n\tloadPlateMotorNotHomed:= NOT baggerCM.loadPlate.IsHomed AND baggerCM.loadPlate.OptionActive, \n\tloadPlateMotorFaulted:= baggerCM.loadPlate.motorFault.Active, \n\tloadPlateMotorCommF:= baggerCM.loadPlate.motorCommFault.Active, \n\ttopCoverLiftedFault:= topCoverLiftedFault.Active, \n\ttopCoverLiftedWarning:= NOT iTopCoverClosed AND NOT HMIData.inCycle, \n\tIBDMotorNotHomed:= NOT baggerCM.IBD.IsHomed AND baggerCM.IBD.OptionActive AND NOT HMIData.inCycle, \n\tIBDMotorFaulted:= baggerCM.IBD.IBDMotorFault.Active, \n\tIBDMotorCommF:= baggerCM.IBD.IBDMotorCommFault.Active, \n\tprinterRibbonFault := baggerCM.labelPrinter.ribbonFault.Active,\n\tprinterServiceRequired := baggerCM.labelPrinter.serviceRequired.Active,\n\tjawFailedToOpen:= baggerCM.dualMotorPassthrough.failedToOpen.Active, \n\tIBDFailedToClose:= , \n\tIBDFailedToOpen:= baggerCM.IBD.failedToOpen.Active, \n\tmessageDisplayIndication=> HMIData.bannerMessageIndication);\n\n// Ready indications for bagger control modules\nHMIData.printerReady := baggerCM.labelPrinter.Ready;\nHMIData.bagDeliveryReady := baggerCM.bagDelivery.Ready;\nHMIData.loadPlateReady := baggerCM.loadPlate.Ready;\nHMIData.jawReady := baggerCM.dualMotorPassthrough.Ready;\nHMIData.bcvReady := baggerCM.barcodeVerifier.Ready;\nHMIData.IBDReady := baggerCM.IBD.Ready;\n\n// Motor data to HMI for troubleshooting\nHMIData.frontJawMotorData.ActPos := baggerCM.jawFrontMotor.ActPos;\nHMIData.frontJawMotorData.CommandedPos := baggerCM.jawFrontMotor.TargetPosDist;\nHMIData.frontJawMotorData.CurrentAlarmCode := baggerCM.jawFrontMotor.alarmCode;\n\nHMIData.rearJawMotorData.ActPos := baggerCM.jawRearMotor.ActPos;\nHMIData.rearJawMotorData.CommandedPos := baggerCM.jawRearMotor.TargetPosDist;\nHMIData.rearJawMotorData.CurrentAlarmCode := baggerCM.jawRearMotor.alarmCode;\n\nHMIData.IBDMotorData.ActPos := baggerCM.IBDMotor.ActPos;\nHMIData.IBDMotorData.CommandedPos := baggerCM.IBDMotor.TargetPosDist;\nHMIData.IBDMotorData.CurrentAlarmCode := baggerCM.IBDMotor.alarmCode;\n\nHMIData.loadPlateMotorData.ActPos := baggerCM.loadPlateMotor.ActPos;\nHMIData.loadPlateMotorData.CommandedPos := baggerCM.loadPlateMotor.TargetPosDist;\nHMIData.loadPlateMotorData.CurrentAlarmCode := baggerCM.loadPlateMotor.alarmCode;\n\nHMIData.bagDeliveryMotorData.alarmCode := baggerCM.bagDeliveryFrontMotor.alarmCode;\nHMIData.bagDeliveryMotorData.statusCode := baggerCM.bagDeliveryFrontMotor.statusCode;\n\n\n\n// Cycle time and bags made counters\nHMIData.cycleTime := UN00_SXMachine.baggerManager.BaggerAutoMode.cycleTime;\nHMIData.inCycle := UN00_SXMachine.baggerManager.BaggerAutoMode.cycleTimer.IN;\ncycleComplete(CLK := UN00_SXMachine.baggerManager.BaggerAutoMode.cycleComplete);\nIF cycleComplete.OSR THEN\n\tHMIData.bagsMade := HMIData.bagsMade + 1;\nEND_IF\n\n// Printer and Barcode Verifier combination enable/disable\nHMIData.printerAndVerifierEnableIndication := HMIData.printerInUse AND HMIData.barcodeVerifierInUse;\nIF HMIData.printerAndVerifierEnablePB THEN\n\tIF HMIData.printerAndVerifierEnableIndication THEN\n\t\tHMIData.printerInUse := FALSE;\n\t\tHMIData.barcodeVerifierInUse := FALSE;\n\tELSE\n\t\tHMIData.printerInstalled := TRUE;\n\t\tHMIData.barcodeVerifierInstalled := TRUE;\n\t\tHMIData.printerInUse := TRUE;\n\t\tHMIData.barcodeVerifierInUse := TRUE;\n\tEND_IF\n\tHMIData.printerAndVerifierEnablePB := FALSE;\nEND_IF\n\n// Position Indications for service commands\nHMIData.jawService.extendedFeedback := baggerCM.dualMotorPassthrough.IsFullyOpen;\nHMIData.jawService.retractedFeedback := baggerCM.dualMotorPassthrough.IsFullyClosed;\n\nHMIData.IBDService.extendedFeedback := baggerCM.IBD._isFullyOpen;\nHMIData.IBDService.retractedFeedback := NOT baggerCM.IBD._isFullyOpen;\n\nHMIData.printHeadService.extendedFeedback := iPrintHeadLowered;\nHMIData.printHeadService.retractedFeedback := NOT iPrintHeadLowered;\n\n// Amazon Bags per minute throughput calculator\namazonBPM(\n\tinCycle:= HMIData.inCycle, \n\truntimeTimeout:= , \n\treset:= HMIData.BPMReset, \n\tBPM=> HMIData.BPMBagsPerMinute, \n\tBPMCycles=> HMIData.BPMBagsMade, \n\tBPMSeconds=> , \n\tBPMIndication=> HMIData.BPMActiveTime);\n","LineInfoPersistence":"(string)68b3f4e9-82ef-4c2e-844d-64ea00d786a7_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)PROGRAM PLC_PRG\nVAR\n\t\n\tfirstScanDone: BOOL;\n\tcycleStartONS : FB_ONS;\n\tpowerUpFrontJawMotor : MC_Power;\n\tpowerUpRearJawMotor : MC_Power;\n\tpowerUpBothJawMotors : MC_Power;\n\tpowerUpLoadPlateMotor : MC_Power;\n\tpowerUpBagDeliveryMotor : MC_Power;\n\tpowerUpIBDMotor : MC_Power;\n\tUN00_SXMachine : FB_UN00_SharpMachine(name := 'UN00 - Sharp SX');\n\tEM01_SXBaggerHead : EM01_BaggerHead(name := 'EM01 - SX Bagger Head');\n\tEM02_SXDischarge : EM02_Discharge(name := 'EM02 - SX Discharge');\n\tbaggerCM : EM01_Bagger_Control_Modules;\n\tbannerManager : FB_BannerManager;\n\tpalmButton : FB_BannerPalmButton;\n\ttopCoverLiftedFault : FB_Fault(name := 'Top Cover Lifeted During Cycle');\n\tamazonBPM : FB_AmazonThroughput();\n\tprinterLabel : FB_PrinterSerial();\n\tautoModeTimer : Standard.TON;\n\tautoModeKeepCycling : BOOL;\n\tautoModeInitiateCycleONS : FB_ONS;\n\tcycleComplete : FB_ONS;\n\thIecTask : RTS_IEC_HANDLE;//Declaration of the variable hIecTask\n\tteachPhotoeyeTimer : Standard.TOF() := (PT := T#3S);\nEND_VAR","LineInfoPersistence":"(string)68b3f4e9-82ef-4c2e-844d-64ea00d786a7_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)1058","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}