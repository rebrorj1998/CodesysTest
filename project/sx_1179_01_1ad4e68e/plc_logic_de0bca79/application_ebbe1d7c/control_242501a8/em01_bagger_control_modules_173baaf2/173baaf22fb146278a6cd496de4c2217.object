{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)173baaf2-2fb1-4627-8a6c-d496de4c2217","ParentGuid":"(Guid)ebbe1d7c-dc4c-48cc-803f-785ef2dd37d1","Name":"(string)EM01_Bagger_Control_Modules","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)242501a8-4129-4caa-993d-af856d057b6f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\n\nsimExitConveyor(_optionActive=> );\n\n\njawFrontMotor(\n\tAxisState:= , \n\tSetOpMode:= , \n\tPowerOn:= , \n\tDriveEnable:= , \n\tAckError:= , \n\tStartHoming:= , \n\tHalt:= , \n\tNewSetPoint:= , \n\tMoveAbs:= , \n\tMoveAbsTorque:= , \n\tMoveRel:= , \n\tMoveVelo:= , \n\tTargetPosDist:= , \n\tTargetVelocity:= , \n\tProfileVelocity:= , \n\tProfileAcceleration:= ,\n\tProfileDeceleration:= , \n\tProfileCurrentLimit:= , \n\tQuickStopDeceleration:= , \n\tDefaultCurrent:= , \n\tActOpMode=> , \n\tCommStatus=> , \n\tPowerState=> , \n\tEnableState=> , \n\tError=> , \n\tActPos=> , \n\tActVelocity=> , \n\tSetPointAck=> , \n\tTargetReached=> , \n\tInVelocity=> , \n\tHomingDone=> , \n\tisGroup:= , \n\tstepsPerInchSP:= Globals.STEPS_PER_INCH_JAW, \n\tzeroOffset:= HMIData.jawZeroOffset, \n\tjogForwardCMD:= , \n\tjogReverseCMD:= , \n\tpositionPresetRequest := HMIData.frontJawMotorData.setPreset,\n\tfreeMotorRequest := HMIData.frontJawMotorData.freeMotor,\n\tgroupMotor0:= , \n\tgroupMotor1:= , \n\tMBChannel:= Front_Jaw_Motor, \n\tmodbusDataFromDrive:= frontJawMotorInputs, \n\tmodbusDirectDataToDrive:= frontJawMotorDDOutputs, \n\tmodbusRIODataToDrive:= frontJawMotorRIOOutputs,\n\ttriggerDDWriteNow => frontJawMotorDDTrigger,\n\ttriggerRIOWriteNow => frontJawMotorRIOTrigger);\n\njawRearMotor(\n\tAxisState:= , \n\tSetOpMode:= , \n\tPowerOn:= , \n\tDriveEnable:= , \n\tAckError:= , \n\tStartHoming:= , \n\tHalt:= , \n\tNewSetPoint:= , \n\tMoveAbs:= , \n\tMoveAbsTorque:= , \n\tMoveRel:= , \n\tMoveVelo:= , \n\tTargetPosDist:= , \n\tTargetVelocity:= , \n\tProfileVelocity:= , \n\tProfileAcceleration:= , \n\tProfileDeceleration:= , \n\tProfileCurrentLimit:= , \n\tQuickStopDeceleration:= , \n\tDefaultCurrent:= , \n\tActOpMode=> , \n\tCommStatus=> , \n\tPowerState=> , \n\tEnableState=> , \n\tError=> , \n\tActPos=> , \n\tActVelocity=> , \n\tSetPointAck=> , \n\tTargetReached=> , \n\tInVelocity=> , \n\tHomingDone=> , \n\tisGroup:= , \n\tstepsPerInchSP:= Globals.STEPS_PER_INCH_JAW, \n\tzeroOffset:= HMIData.jawZeroOffset, \n\tjogForwardCMD:= , \n\tjogReverseCMD:= , \n\tpositionPresetRequest := HMIData.rearJawMotorData.setPreset,\n\tfreeMotorRequest := HMIData.rearJawMotorData.freeMotor,\n\tgroupMotor0:= , \n\tgroupMotor1:= , \n\tMBChannel:= Rear_Jaw_Motor, \n\tmodbusDataFromDrive:= rearJawMotorInputs, \n\tmodbusDirectDataToDrive:= rearJawMotorDDOutputs, \n\tmodbusRIODataToDrive:= rearJawMotorRIOOutputs,\n\ttriggerDDWriteNow => rearJawMotorDDTrigger,\n\ttriggerRIOWriteNow => rearJowMotorRIOTrigger);\n\njawBothMotors(\n\tAxisState:= , \n\tSetOpMode:= , \n\tPowerOn:= , \n\tDriveEnable:= , \n\tAckError:= , \n\tStartHoming:= , \n\tHalt:= , \n\tNewSetPoint:= , \n\tMoveAbs:= , \n\tMoveAbsTorque:= , \n\tMoveRel:= , \n\tMoveVelo:= , \n\tTargetPosDist:= , \n\tTargetVelocity:= , \n\tProfileVelocity:= , \n\tProfileAcceleration:= , \n\tProfileDeceleration:= , \n\tProfileCurrentLimit:= , \n\tQuickStopDeceleration:= , \n\tDefaultCurrent:= 100, \n\tActOpMode=> , \n\tCommStatus=> , \n\tPowerState=> , \n\tEnableState=> , \n\tError=> , \n\tActPos=> , \n\tActVelocity=> , \n\tSetPointAck=> , \n\tTargetReached=> , \n\tInVelocity=> , \n\tHomingDone=> , \n\tisGroup:= TRUE, \n\tstepsPerInchSP:= Globals.STEPS_PER_INCH_JAW, \n\tzeroOffset:= HMIData.jawZeroOffset, \n\tjogForwardCMD:= HMIData.jawjobClosed, \n\tjogReverseCMD:= HMIData.jawJogOpen, \n\tgroupMotor0:= jawFrontMotor, \n\tgroupMotor1:= jawRearMotor, \n\tMBChannel:= Both_Jaw_Motors, \n\tmodbusDataFromDrive:= bothJawMotorInputs, \n\tmodbusDirectDataToDrive:= bothJawMotorDDOutputs, \n\tmodbusRIODataToDrive:= bothJawMotorRIOOutputs,\n\ttriggerDDWriteNow => bothJawMotorDDTrigger,\n\ttriggerRIOWriteNow => bothJawMotorRIOTrigger);\n\ndualMotorPassthrough(\n\tsimulateIO:= , \n\tfrontMotor:= jawFrontMotor, \n\trearMotor:= jawRearMotor, \n\tbothMotors:= jawBothMotors, \n\tcloseVelo:= HMIData.jawCloseMotionProfile.velo, \n\tcloseAccel:= HMIData.jawCloseMotionProfile.accel, \n\tcloseDecel:= HMIData.jawCloseMotionProfile.decel, \n\topenVelo:= HMIData.jawOpenMotionProfile.velo, \n\topenAccel:= HMIData.jawOpenMotionProfile.accel, \n\topenDecel:= HMIData.jawOpenMotionProfile.decel, \n\thomeTimeoutSetting:= , \n\tmoveInDelaySetting := TO_TIME(HMIData.jawCloseDelay * 1000),\n\tpassthroughSetting:= HMIData.passthroughSetting, \n\tjawClosedSetting:= HMIData.jawClosePositionSetting, \n\tpressureBarClosedSensor:= iJawClosed, \n\tpressureBarNearClosedSensor:= iJawNearClosed, \n\tobstructionSensor:= iJawNotObstructed, \n\topenJawPB:= HMIData.jawService.extendCommand, \n\tcloseJawPB:= HMIData.jawService.retractCommand, \n\tbeginJawTestMode := HMIData.startJawCycleTest,\n\tstopJawTestMode := HMIData.stopJawCycleTest,\n\tfailedToClose=> , \n\tfailedToOpen=> , \n\tfailedToHome=> , \n\tpressureBarObstructed=> , \n\tfrontMotorFault=> , \n\tfrontMotorCommFault=> , \n\trearMotorFault=> , \n\trearMotorCommFault=> , \n\tactualPosition=> HMIData.passthroughActual,\n\tcurrentTestCycles => HMIData.jawCycleTestCycles,\n\tjawTestModeActive => HMIData.jawCycleTestActive);\n\n\n\t\nlabelPrinter(\n\tsimulateIO:= , \n\tdryCycleEnable := HMIData.dryCycleEnable,\n\tprintSpeed:= HMIData.printSpeed, \n\tprintLength:= HMIData.printLength, \n\tprintHeadDebounceSetting:= , \n\tdataReadyInput:= iPrinterDataReady, \n\tserviceRequiredInput:= iPrinterServiceRequired AND iTopCoverClosed, \n\tribbonLowInput:= , \n\tendOfPrintInput:= iPrinterBusy,\n\tprintHeadDownInput := iPrintHeadLowered, \n\tribbonEncoderPulseInput:= iPrinterRibbonEncoder, \n\teStopOK := iTopCoverClosed,\n\tcancelPrint := HMIData.printerCancelRequest,\n\tserviceRaisePrintHead:= HMIData.printHeadService.retractCommand, \n\tserviceLowerPrintHead:= HMIData.printHeadService.extendCommand, \n\tserviceRequired=> , \n\tribbonFault=> ,\n\tprintHeadFailToLower=> ,\n\tprintHeadDebounced=> , \n\tstartPrintOutput=> oRequestPrint, \n\tribbonUnwindRunOutput=> oPrinterRibbonUnwind,\n\tlowerPrintHeadOutput=> oLowerPrintHead);\n\t\n\nsealWire(simulateIO:= HMIData.simulateAllIO, sealDwell:= HMIData.sealBarDwell, sealCool := HMIData.sealBarCool , sealWireOutput=> oSealWire);\t\n\nstandardBagOpenFingersWithSensors(\n\tdelayToGrabSetting:= , \n\tdelayToCheckBagPresentSetting:= , \n\tdelayToClearSetting:= , \n\tgrabCounter=> , \n\treleaseCounter=> , \n\tmissedCounter=> );\n\n\nsealFlattenerVertAxisActuator();\ndummySealFlatteners();\n\n\t\nIBDMotor(\n\tAxisState:= , \n\tSetOpMode:= , \n\tPowerOn:= , \n\tDriveEnable:= , \n\tAckError:= , \n\tStartHoming:= , \n\tHalt:= , \n\tNewSetPoint:= , \n\tMoveAbs:= , \n\tMoveAbsTorque:= , \n\tMoveRel:= , \n\tMoveVelo:= , \n\tTargetPosDist:= , \n\tTargetVelocity:= , \n\tProfileVelocity:= , \n\tProfileAcceleration:= , \n\tProfileDeceleration:= , \n\tProfileCurrentLimit:= , \n\tQuickStopDeceleration:= , \n\tDefaultCurrent:= 100, \n\tActOpMode=> , \n\tCommStatus=> , \n\tPowerState=> , \n\tEnableState=> , \n\tError=> , \n\tActPos=> , \n\tActVelocity=> , \n\tSetPointAck=> , \n\tTargetReached=> , \n\tInVelocity=> , \n\tHomingDone=> , \n\tisGroup:= , \n\tstepsPerInchSP:= Globals.STEPS_PER_INCH_IBD, \n\tzeroOffset:= HMIData.IBDZeroOffset, \n\tjogForwardCMD:= HMIData.IBDJogClosed, \n\tjogReverseCMD:= HMIData.IBDJogOpen, \n\tgroupMotor0:= , \n\tgroupMotor1:= , \n\tpositionPresetRequest := HMIData.IBDMotorData.setPreset,\n\tfreeMotorRequest := HMIData.IBDMotorData.freeMotor,\n\tMBChannel:= IBD_Motor, \n\tmodbusDataFromDrive:= IBDMotorInputs, \n\tmodbusDirectDataToDrive:= IBDMotorDDOutputs, \n\tmodbusRIODataToDrive:= IBDMotorRIOOutputs,\n\ttriggerDDWriteNow => IBDMotorDDTRigger,\n\ttriggerRIOWriteNow => IBDMotorRIOTRigger);\nIBD(\n\tcloseVelo:= HMIData.IBDCloseMotionProfile.velo, \n\tcloseAccel:= HMIData.IBDCloseMotionProfile.accel, \n\tcloseDecel:= HMIData.IBDCloseMotionProfile.decel, \n\tcloseCurrent:= HMIData.IBDCloseMotionProfile.current, \n\topenVelo:= HMIData.IBDOpenMotionProfile.velo, \n\topenAccel:= HMIData.IBDOpenMotionProfile.accel, \n\topenDecel:= HMIData.IBDOpenMotionProfile.decel, \n\thomeTimeoutSetting:= , \n\tpassthroughSetting:= HMIData.passthroughSetting, \n\tjawClosedSetting:= , \n\topenIBDPB:= HMIData.IBDService.extendCommand, \n\tcloseIBDPB:= HMIData.IBDService.retractCommand, \n\tfailedToOpen=> , \n\tfailedToHome=> , \n\tIBDMotorFault=> , \n\tIBDMotorCommFault=> , \n\tactualPosition=> , \n\tIBDMotor:= IBDMotor);\n\nloadPlateMotor(\n\tAxisState:= , \n\tSetOpMode:= , \n\tPowerOn:= , \n\tDriveEnable:= , \n\tAckError:= , \n\tStartHoming:= , \n\tHalt:= , \n\tNewSetPoint:= , \n\tMoveAbs:= , \n\tMoveAbsTorque:= , \n\tMoveRel:= , \n\tMoveVelo:= , \n\tTargetPosDist:= , \n\tTargetVelocity:= , \n\tProfileVelocity:= , \n\tProfileAcceleration:= , \n\tProfileDeceleration:= , \n\tProfileCurrentLimit:= , \n\tQuickStopDeceleration:= , \n\tDefaultCurrent:= , \n\tActOpMode=> , \n\tCommStatus=> , \n\tPowerState=> , \n\tEnableState=> , \n\tError=> , \n\tActPos=> , \n\tActVelocity=> , \n\tSetPointAck=> , \n\tTargetReached=> , \n\tInVelocity=> , \n\tHomingDone=> , \n\tisGroup:= , \n\tstepsPerInchSP:= Globals.STEPS_PER_INCH_LOAD_PLATE, \n\tzeroOffset:= , \n\tjogForwardCMD:= , \n\tjogReverseCMD:= , \n\tpositionPresetRequest := HMIData.loadPlateMotorData.setPreset,\n\tfreeMotorRequest := HMIData.loadPlateMotorData.freeMotor,\n\tgroupMotor0:= , \n\tgroupMotor1:= , \n\tMBChannel:= Load_Plate_Motor, \n\tmodbusDataFromDrive:= loadPlateMotorInputs, \n\tmodbusDirectDataToDrive:= loadPlateMotorDDOutputs, \n\tmodbusRIODataToDrive:= loadPlateMotorRIOOutputs,\n\ttriggerDDWriteNow => loadPlateMotorDDTrigger,\n\ttriggerRIOWriteNow => loadPlateMotorRIOTrigger);\n\t\nloadPlate(\n\tlowerVelo:= HMIData.loadPlateLowerProfile.velo, \n\tlowerAccel:= HMIData.loadPlateLowerProfile.accel, \n\tlowerDecel:= HMIData.loadPlateLowerProfile.decel, \n\traiseVelo:= HMIData.loadPlateRaiseProfile.velo, \n\traiseAccel:= HMIData.loadPlateRaiseProfile.accel, \n\traiseDecel:= HMIData.loadPlateRaiseProfile.decel,\n\thomeTimeoutSetting:= , \n\traisedSetting:= HMIData.loadPlateRaisedPositionSetting, \n\tloweredSetting:= HMIData.loadPlateLoweredPositionSetting, \n\tdwellSetting:= HMIData.loadPlateDwell, \n\traiseShelfPB:= HMIData.loadPlateService.extendCommand, \n\tlowerShelfPB:= HMIData.loadPlateService.retractCommand, \n\tfailedToHome=> , \n\tmotorFault=> , \n\tmotorCommFault=> , \n\tactualPosition=> , \n\tloadPlateMotor:= loadPlateMotor);\n\nbarcodeVerifier(\n\tdryCycleEnable := HMIData.dryCycleEnable,\n\tfeedSpeed:= HMIData.printSpeed, \n\tpositionOffset:= HMIData.barcodeStartPosition, \n\tdistanceToScan:= HMIData.barcodeScanDistance, \n\treadGoodInput:= iBarcodeOK, \n\tbadReadInput:= iBarcodeNG, \n\tbadReadFaultCountSetting:= HMIData.barcodeBadReadFaultSetting, \n\ttriggerScannerOutput=> oTriggerBCV, \n\txBusy=> , \n\txDone=> , \n\tcurrentGoodReadCount=> HMIData.barcodeGoodReadCount, \n\tcurrentBadReadCount=> HMIData.barcodeBadReadCount, \n\tbarcodeFault=> );\t\n\nbagDeliveryFrontMotor(\n\tAxisState:= , \n\tSetOpMode:= , \n\tPowerOn:= , \n\tDriveEnable:= , \n\tAckError:= , \n\tStartHoming:= , \n\tHalt:= , \n\tNewSetPoint:= , \n\tMoveAbs:= , \n\tMoveAbsTorque:= , \n\tMoveRel:= , \n\tMoveVelo:= , \n\tTargetPosDist:= , \n\tTargetVelocity:= , \n\tProfileVelocity:= , \n\tProfileAcceleration:= , \n\tProfileDeceleration:= , \n\tProfileCurrentLimit:= , \n\tQuickStopDeceleration:= , \n\tDefaultCurrent:= , \n\tActOpMode=> , \n\tCommStatus=> , \n\tPowerState=> , \n\tEnableState=> , \n\tError=> , \n\tActPos=> , \n\tActVelocity=> , \n\tSetPointAck=> , \n\tTargetReached=> , \n\tInVelocity=> , \n\tHomingDone=> , \n\tstepsPerInchSP:= Globals.STEPS_PER_INCH_FILM, \n\tzeroOffset:= , \n\tjogForwardCMD:= HMIData.jogFilmForward, \n\tjogReverseCMD:= HMIData.jogFilmReverse, \n\tasciiHandler:= SerialComms.serial);\n\t\nbagDelivery(\n\tsimulateIO := HMIData.simulateAllIO,\n\tdryCycleEnable := HMIData.dryCycleEnable,\n\t_optionActive=> , \n\tprinter:= PLC_PRG.baggerCM.labelPrinter, \n\tbagLength:= HMIData.bagLength, \n\tfeedSpeed:= TO_REAL(HMIData.bagForwardSpeed), \n\treverseSpeed:= TO_REAL(HMIData.bagReverseSpeed), \n\tprintSpeed:= TO_REAL(HMIData.printSpeed), \n\tprintOffset:= HMIData.printOffset, \n\tprintLength:= HMIData.printLength, \n\tmaxReverseSetpoint:= 4.0, \n\tsealOffset:= HMIData.bagSkirtLength, \n\tdistanceFromSealBarToBagEdge:= Globals.SEAL_TO_PHOTOEYE_DISTANCE, \n\tdistanceFromNipToBagEdge:= , \n\tbagPresent:= iBagEdgePhotoeye, \n\ttrapezoidalPercent:= , \n\treverseFault=> , \n\tbagFailedToSeparate=> , \n\tbagDeliveryMotor:= bagDeliveryFrontMotor);\t\n\t\nIBD.OptionInstalled := HMIData.IBDInstalled;\nIBD.OptionEnabled := HMIData.IBDInUse;\n\nlabelPrinter.OptionInstalled := HMIData.printerInstalled;\nlabelPrinter.OptionEnabled := HMIData.printerInUse;\n\nloadPlate.OptionInstalled := HMIData.loadPlateInstalled;\nloadPlate.OptionEnabled := HMIData.loadPlateInUse;\n\nbarcodeVerifier.OptionInstalled := HMIData.barcodeVerifierInstalled;\nbarcodeVerifier.OptionEnabled := HMIData.barcodeVerifierInUse;\n","LineInfoPersistence":"(string)173baaf2-2fb1-4627-8a6c-d496de4c2217_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK EM01_Bagger_Control_Modules\nVAR_INPUT\nEND_VAR\nVAR_OUTPUT\n\t\n\tdummyVacuumCups : FB_BaseVacuum(name := 'Pneumatic Vacuum Cups') := (_optionEnabled := FALSE, _optionInstalled := FALSE);\n\tsimExitConveyor : FB_SimBasicExitConveyor(name := 'Sim Exit Conveyor') := (_optionEnabled := FALSE, _optionInstalled := FALSE);\n\tstandardBagOpenFingersWithSensors : FB_BaseBagOpenFingers(name := 'Standard Bag Open Fingers') := (_optionEnabled := FALSE, _optionInstalled := FALSE);\n\tsealWire : FB_SealWire(name := 'Seal Wire') := (_optionEnabled := TRUE, _optionInstalled := TRUE);\n\tdummyBOF : FB_BaseBagOpenFingers(name := 'Dummy BOF');\n\n\tdualMotorPassthrough : FB_DualMotorPBar(name := 'Dual Motor Jaw') := (_optionEnabled := TRUE, _optionInstalled := TRUE);\n\tdummySealFlatteners : FB_BaseSealFlatteners(name := 'Dummy Seal Flatteners') := (_optionEnabled := FALSE, _optionInstalled := FALSE); \n\t\n\tjawFrontMotor : FB_OrientalAZMotorTriggerPositionTest := (DefaultCurrent := 100);\n\tjawRearMotor : FB_OrientalAZMotorTriggerPositionTest := (DefaultCurrent := 100);\n\tjawBothMotors : FB_OrientalAZMotorTriggerPositionTest := (DefaultCurrent := 100);\n\tbagOpenFingersActuator : FB_PneumaticVerticalActuator(name := 'Bag Open Fingers Actuator');\n\tsealFlattenerVertAxisActuator : FB_DummyUpDown;\n\t\n\tlabelPrinter : FB_ZebraPrinter(name := 'Zebra Label Printer') := (_optionEnabled := FALSE, _optionInstalled := TRUE);\n\tprintHeadActuator : FB_ElectricSolenoid(name := 'Print Head Actuator');\n\t\n\tIBDMotor : FB_OrientalAZMotorTriggerPositionTest() := (DefaultCurrent := 100);\n\tIBD : FB_MotorizedIBD(name := 'Motorized IBD');\n\t\n\tloadPlateMotor : FB_OrientalAZMotorTriggerPositionTest() := (DefaultCurrent := 100);\n\n\tloadPlate : FB_MotorizedLoadPlate(name := 'Motorized Load Plate');\n\t\n\tbarcodeVerifier : FB_BaseBCV(name := 'Barcode Verifier');\n\t\n\tbagDelivery : FB_SXBagDelivery(name := 'Bag Delivery') := (_optionEnabled := TRUE, _optionInstalled := TRUE);\n\tbagDeliveryFrontMotor : FB_AppliedMotionMotorASCII;\n\t\nEND_VAR\nVAR\nEND_VAR\n","LineInfoPersistence":"(string)173baaf2-2fb1-4627-8a6c-d496de4c2217_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)1653","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}