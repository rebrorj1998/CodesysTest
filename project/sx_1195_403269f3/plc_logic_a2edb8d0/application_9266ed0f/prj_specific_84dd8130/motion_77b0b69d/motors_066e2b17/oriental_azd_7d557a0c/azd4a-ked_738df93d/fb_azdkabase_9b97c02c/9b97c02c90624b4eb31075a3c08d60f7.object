{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)9b97c02c-9062-4b4e-b310-75a3c08d60f7","ParentGuid":"(Guid)9266ed0f-7f1e-4370-8ffa-55b419b1a46d","Name":"(string)FB_AZDKABase","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)738df93d-52a4-428c-9cb0-1690d6a0b10e"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\n//  FB_AZDOrientalMotor\n//  FB/FB_AZDOrientalMotor\n//\n//  Created by Evan Ische on 6/13/2022.\n//  Copyright (C) 2022 Sharp Packaging Systems By Pregis. All rights reserved.\n//\n\n//\noperational := EnableAxisOps();\n\t\n//\n_resetSignalPulseTON.IN := ackError;\n_resetONS(CLK := ackError);\n_controlword.FaultReset := _statusword.fault AND ackError AND NOT _resetSignalPulseTON.Q;\n\n//diagnostic code - delete me\nIF _statusword.fault AND ackError AND NOT _resetSignalPulseTON.Q THEN\n\t_codetemp := _codetemp;\nEND_IF\n\n// Status bits read from the AZD4A drive\n_statusword(\n\tmode := modeOfOperation,\n\tdata := iStatusword);\n\n// Control bits written to the AZD4A drive\n_controlword(\n\tmode := modeOfOperation,\n\tdata => oControlword\n);\n\n// Active Alarm\nalarmCode := OSCAT_BASIC.BYTE_OF_DWORD(iErrorCode,0);\nisHomed := _statusword.homingAttained;\nIF alarmCode <> 0 THEN\n\t_codetemp := alarmCode;\nEND_IF\n_errorONS(CLK := _statusword.fault);\n\nerror := _statusword.fault;\n// IF _errorONS.OSR THEN\n// \terror := TRUE;\n// END_IF\n// Convert Distance setpoint to steps.  Reverse polarity for display purposes if needed. \nactualPositonInInches := (actPos / TO_REAL(axisData.config.stepsPerInch));\nIF axisData.config.reversePolarity THEN\n    actualPositonInInches := actualPositonInInches * -1; \nEND_IF\n\n// Perform move on rising edge\n_haltONS(CLK := Halt);\n_relativeONS(CLK := MoveRel);\n_absoluteONS(CLK := MoveAbs);\n_absoluteTorqueONS(CLK := moveAbsTorque);\n_homeONS(CLK := startHoming);\nIF _homeONS.OSR THEN\n\t_controlword.HomingOperationStart:=TRUE;\nEND_IF\n// Write data from drive to local variables\nactPos := TO_REAL(iActualPosition) + zeroOffset * axisData.config.stepsPerInch;\nactVel := TO_REAL(iActualVelocity);\n\n// Write data to drive from local variables\noTargetPosition := TO_DINT(TargetPositionInSteps);\noProfileVelocity := TO_UDINT(ProfileVelocityInEngUnits);\noProfileAcceleration := TO_UDINT(EngUnitsToHz(ProfileAcceleration));\noProfileDeceleration := TO_UDINT(EngUnitsToHz(ProfileDeceleration));\noProfilePushCurrent := TO_INT(profilePushCurrentLimit * 10.0);\nIF push THEN\n\toProfileOperationalCurrent := TO_INT(defaultCurrent * 10.0);\nELSE\n\toProfileOperationalCurrent := TO_INT(profileCurrentLimit * 10.0);\t\n\tIF oProfileOperationalCurrent = 0 THEN\n\t\toProfileOperationalCurrent := TO_INT(defaultCurrent * 10.0);\n\tEND_IF\nEND_IF\n\noModeOfOperation := modeOfOperation;\n\n// On rising edge start moving, on falling edge halt \n_jogForwardONS(CLK := jogForwardCMD);\n_jogReverseONS(CLK := jogReverseCMD);\nIF _jogForwardONS.OSR OR _jogReverseONS.OSR THEN\n\tCASE axisData.jogType OF\n\t\teDiscreteMotionType.Relative:\n\t\t\tprofileAcceleration := jogProfile.acceleration;\n\t\t\tprofileDeceleration := jogProfile.deceleration;\n\t\t\tprofileVelocity := jogProfile.velocity;\n\t\t\ttargetPosDist := jogProfile.position;\n\t\t\tprofileCurrentLimit := jogProfile.current;\n\t\t\tIF _jogReverseONS.OSR THEN\n\t\t\t\ttargetPosDist := targetPosDist * -1;\n\t\t\tEND_IF\n\t\t\t_controlword.PPMode := eDiscreteMotionType.Relative;\n\t\teDiscreteMotionType.Absolute:\n\t\t\tprofileAcceleration := jogProfile.acceleration;\n\t\t\tprofileDeceleration := jogProfile.deceleration;\n\t\t\tprofileVelocity := jogProfile.velocity;\n\t\t\ttargetPosDist := jogProfile.maxPosition;\n\t\t\tprofileCurrentLimit := jogProfile.current;\n\t\t\tIF _jogReverseONS.OSR THEN\n\t\t\t\ttargetPosDist := jogProfile.minPosition;\n\t\t\tEND_IF\n\t\t\t_controlword.PPMode := eDiscreteMotionType.Absolute;\n\tEND_CASE\n\t_state := eAxisREFMotionState.Jog;\nELSIF _jogForwardONS.OSF OR _jogReverseONS.OSF OR _haltONS.Q THEN\n\t_state := eAxisREFMotionState.Halt;\nEND_IF\n","LineInfoPersistence":"(string)9b97c02c-9062-4b4e-b310-75a3c08d60f7_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_AZDKABase EXTENDS Axis_REF\nVAR_INPUT\n\tjogForwardCMD : BOOL;\n\tjogReverseCMD : BOOL;\n\tiErrorCode : UINT;\n\tiModeOfOperation : SINT;\n\tiStatusword : UINT;\n\tiActualVelocity : DINT;\n\tiActualPosition : DINT;\nEND_VAR\nVAR_OUTPUT\n\toControlword : UINT;\n\toModeOfOperation : eAZDProfileMode;\n\toTargetPosition : DINT;\n\toProfileVelocity : UDINT;\n\toProfileAcceleration : UDINT;\n\toProfileDeceleration : UDINT;\n\toProfilePushCurrent : INT;\n\toProfileOperationalCurrent : INT;\n\talarmCode : eOrientalAZDriveFaults;\n\tactualPositonInInches : REAL;\nEND_VAR\nVAR\n\t_resetONS : FB_ONS;\n\t_jogForwardONS : FB_ONS;\n\t_jogReverseONS : FB_ONS;\n\t_relativeONS : FB_ONS;\n\t_zHomeONS : FB_ONS;\n\t_absoluteONS : FB_ONS;\n\t_absoluteTorqueONS : FB_ONS;\n\t_homeONS : FB_ONS;\n\t_errorONS : FB_ONS;\n\t_haltONS : Standard.R_TRIG;\n\t_statusword : FB_AZDStatus;\n\t_controlword : FB_AZDControl;\n\t_state : eAxisREFMotionState;\n\t_startupState : eAZDPowerupState;\n\t_motorExcitationDelayTimer : Standard.TON := (PT := T#250MS);\n\t_resetSignalPulseTON : Standard.TON := (PT := T#50MS);\n\t_codetemp : DWORD;\nEND_VAR\n","LineInfoPersistence":"(string)9b97c02c-9062-4b4e-b310-75a3c08d60f7_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)3239","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}