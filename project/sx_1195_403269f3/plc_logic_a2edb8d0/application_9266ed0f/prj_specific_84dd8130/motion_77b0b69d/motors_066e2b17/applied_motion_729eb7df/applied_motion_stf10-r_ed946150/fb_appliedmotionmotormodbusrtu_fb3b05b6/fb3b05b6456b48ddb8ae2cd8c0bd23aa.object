{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)fb3b05b6-456b-48dd-b8ae-2cd8c0bd23aa","ParentGuid":"(Guid)9266ed0f-7f1e-4370-8ffa-55b419b1a46d","Name":"(string)FB_AppliedMotionMotorModbusRTU","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)ed946150-8c99-4ff5-87c8-73aa9cd7e3b7"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_OrientalAZMotor()\n//\tDescription: A PLCOpen Motion compliant library for a Oriental AZ Series drive/motor\n//\t\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: Tuesday, June 2nd 2020\n\n// Outputs for Motion Lib\noperational := PowerOn;\nEnableState := DriveEnable;\n\n// Exit if drive isn't enabled.\nIF NOT DriveEnable THEN\n\tError := FALSE;\n\tRETURN;\nEND_IF\n\n// Only set comm error status after x modbus errors\ncommErrorONS(CLK := MBChannel.xError);\nIF commErrorONS.OSR THEN\n\tcommErrorCount := commErrorCount + 1;\nEND_IF\ncommErrorFaultONS(CLK := commErrorCount = commErrorFaultSetting);\nIF commErrorFaultONS.OSR THEN\n\tstate := eAppliedMotionDriveStatesASCII.Faulting;\n\tCommStatus := FALSE;\nEND_IF\n\nhaltONS(CLK := Halt);\nIF haltONS.OSR THEN\n\tstate := eAppliedMotionDriveStatesASCII.Halt;\nEND_IF\nwaitForHaltTimer(IN := state = eAppliedMotionDriveStatesASCII.Halting);\n\nalarms(alarmCode:= modbusDataFromDrive[0]);\t\n// Get drive data directly from master axis\nstatus(statusCode:= modbusDataFromDrive[1]);\nIF status.moving THEN \n\tactVel := ProfileVelocity;\nELSE\n\tactVel := 0;\nEND_IF\n\nalarmONS(CLK := status.driveFaulted);\nIF alarmONS.OSR THEN\n\tError := TRUE;\n\tstate := eAppliedMotionDriveStatesASCII.Faulting;\nEND_IF\n\nCASE state OF\n\teAppliedMotionDriveStatesASCII.Idle:\n\t\t\t\t// \tIdle state, wait for command\n\t\t\t\tmClearStatus();\n\t\t\t\tmSetAccelDecel();\n\t\t\t\tIF MoveAbs THEN\n\t\t\t\t\tAxisState := eAxisState.DiscreteMotion;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.MoveABS;\n\t\t\t\tELSIF MoveRel THEN\n\t\t\t\t\tmodbusRIODataToDrive[2] := TO_WORD(mVeloAccDecCalc(ProfileVelocity)); // modbusRIODataToDrive[2] = Velocity\n\t\t\t\t\tmodbusRIODataTrigger := TRUE;\n\t\t\t\t\tIF modbusDataFromDrive[29] = modbusRIODataToDrive[2] THEN // after writing new velocity, check to make sure it made it to the register\n\t\t\t\t\t\tmodbusRIODataTrigger := FALSE;\n\t\t\t\t\t\tAxisState := eAxisState.DiscreteMotion;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.MoveInc;\n\t\t\t\t\tEND_IF\t\t\n\t\t\t\tELSIF MoveAbsTorque THEN\n\t\t\t\t\tAxisState := eAxisState.DiscreteMotion;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.MoveABS;\n\t\t\t\tELSIF jogForwardCMD OR jogReverseCMD THEN\n\t\t\t\t\tmodbusRIODataToDrive[2] := TO_WORD(mVeloAccDecCalc(1)); // modbusRIODataToDrive[2] = Velocity\n\t\t\t\t\tmodbusRIODataTrigger := TRUE;\n\t\t\t\t\tIF modbusDataFromDrive[29] = modbusRIODataToDrive[2] THEN // after writing new velocity, check to make sure it made it to the register\n\t\t\t\t\t\tmodbusRIODataTrigger := FALSE;\n\t\t\t\t\t\tAxisState := eAxisState.DiscreteMotion;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.StartJogging;\n\t\t\t\t\tEND_IF\t\t\t\t\t\n\t\t\t\tELSIF StartHoming THEN\n\t\t\t\t\t//AxisState := AXIS_STATE.AS_Homing;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Home;\n\t\t\t\tEND_IF\n\t\t\t\tIF MBChannel.xDone THEN\n\t\t\t\t\tcommStatus := TRUE;\n\t\t\t\t\tcommErrorCount := 0;\n\t\t\t\tEND_IF\n\t\n\t\teAppliedMotionDriveStatesASCII.MoveInc:\n\t\t\t\t// Move to incremental position\n\t\t\t\tmSetFeedToLength(mDistanceCalc(targetPosDist));\n\t\t\t\tIF modbusDataFromDrive[31] = modbusRIODataToDrive[4] THEN // after writing new feed to distance, check to make sure it made it to the register\n\t\t\t\t\tmodbusRIODataTrigger := FALSE;\n\t\t\t\t\tmodbusOPCodeToDrive := TO_WORD(eAppliedMotionOpcodes.FEED_TO_LENGTH);\n\t\t\t\t\tmodbusOPCodeTrigger := TRUE;\n\t\t\t\t\tIF status.moving THEN\n\t\t\t\t\t\tmodbusOPCodeTrigger := FALSE;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Moving;\n\t\t\t\t\tEND_IF\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Homing:\t\t\n\t\t\t\t//\n\t\t\t\tIF status.inPosition THEN\n\t\t\t\t\tzHome := FALSE;\n\t\t\t\t\tisHomed := TRUE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.DoneMoving;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.StartJogging:\n\t\t\t\t// Begin jog move \n\t\t\t\tIF jogForwardCMD THEN\n\t\t\t\t\tmSetFeedToLength(mDistanceCalc(30));\n\t\t\t\t\tIF modbusDataFromDrive[31] = modbusRIODataToDrive[4] THEN\n\t\t\t\t\t\tmodbusRIODataTrigger := FALSE;\n\t\t\t\t\t\tmodbusOPCodeToDrive := TO_WORD(eAppliedMotionOpcodes.FEED_TO_LENGTH);\n\t\t\t\t\t\tmodbusOPCodeTrigger := TRUE;\n\t\t\t\t\tEND_IF\n\t\t\t\tELSIF jogReverseCMD THEN\n\t\t\t\t\tmSetFeedToLength(mDistanceCalc(-30));\n\t\t\t\t\tIF modbusDataFromDrive[31] = modbusRIODataToDrive[4] THEN\n\t\t\t\t\t\tmodbusRIODataTrigger := FALSE;\n\t\t\t\t\t\tmodbusOPCodeToDrive := TO_WORD(eAppliedMotionOpcodes.FEED_TO_LENGTH);\n\t\t\t\t\t\tmodbusOPCodeTrigger := TRUE;\n\t\t\t\t\tEND_IF\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\t\tIF status.moving THEN\n\t\t\t\t\tmodbusOPCodeTrigger := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Jogging;\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.Jogging:\n\t\t\t\t// Jog forward/reverse\n\t\t\t\tIF NOT jogForwardCMD AND NOT jogReverseCMD THEN\n\t\t\t\t\tmodbusOPCodeToDrive := TO_WORD(eAppliedMotionOpcodes.STOP_MOVE_KILL_BUFFER);\n\t\t\t\t\tmodbusOPCodeTrigger := TRUE;\n\t\t\t\t\tIF NOT status.moving THEN\n\t\t\t\t\t\tmodbusOPCodeTrigger := FALSE;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\t\tEND_IF\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.Moving:\n\t\t\t\t// After sending data, we are moving\n\t\t\t\tactVel := ProfileVelocity;\n\t\t\t\tIF status.inPosition AND NOT status.moving THEN\n\t\t\t\t\tTargetReached := TRUE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.DoneMoving;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.DoneMoving:\n\t\t\t\t// Wait for status to clear\n\t\t\t\tIF NOT MoveAbs AND NOT MoveAbsTorque AND NOT MoveRel AND NOT StartHoming THEN\n\t\t\t\t\tAxisState := eAxisState.Standstill;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\tEND_IF \n\n\t\teAppliedMotionDriveStatesASCII.Halt:\n\t\t\t\t//\n\t\t\t\tmodbusOPCodeToDrive := TO_WORD(eAppliedMotionOpcodes.STOP_MOVE_KILL_BUFFER);\n\t\t\t\tmodbusOPCodeTrigger := TRUE;\n\t\t\t\tstate := eAppliedMotionDriveStatesASCII.HaltSending;\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.HaltSending:\n\t\t\t\t//\n\t\t\t\tIF NOT status.moving THEN\n\t\t\t\t\tmodbusOPCodeTrigger := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Halting;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Halting:\n\t\t\t\t//\t\t\n\t\t\t\tIF waitForHaltTimer.Q THEN\n\t\t\t\t\tactVel := 0;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Faulting:\n\t\t\t\t// Faulting - stop drive\n\t\t\t\tIF Error THEN\n\t\t\t\t\tmClearStatus();\n\t\t\t\t\tError := TRUE;\n\t\t\t\tELSE\n\t\t\t\t\tmClearStatus();\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\t\tAxisState := eAxisState.ErrorStop;\n\t\t\t\tfreeMotor := TRUE;\n\t\t\t\t\n\t\t\t\tmodbusOPCodeToDrive := TO_WORD(eAppliedMotionOpcodes.STOP_MOVE_KILL_BUFFER);\n\t\t\t\tmodbusOPCodeTrigger := TRUE;\n\t\t\t\tIF NOT status.moving THEN\n\t\t\t\t\tmodbusOPCodeTrigger := FALSE;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Faulted;\n\t\t\t\tEND_IF\n\t\t\n\t\teAppliedMotionDriveStatesASCII.Faulted:\n\t\t\t\t// Faulted - wait for clear\n\t\t\t\tIF status.driveFaulted THEN\n\t\t\t\t\tmodbusOPCodeToDrive := TO_WORD(eAppliedMotionOpcodes.ALARM_OUTPUT);\n\t\t\t\t\tmodbusOPCodeTrigger := TRUE;\n\t\t\t\t\tIF alarms.alarmCode = 0 THEN\n\t\t\t\t\t\tmodbusOPCodeTrigger := FALSE;\n\t\t\t\t\t\tIF AckError THEN\n\t\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.EnableMotor;\n\t\t\t\t\t\tEND_IF\n\t\t\t\t\tEND_IF\n\t\t\t\tELSE\n\t\t\t\t\tIF AckError THEN\n\t\t\t\t\t\tError := FALSE;\n\t\t\t\t\t\tCommStatus := TRUE;\n\t\t\t\t\t\tcommErrorCount := 0;\n\t\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\t\tEND_IF\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\teAppliedMotionDriveStatesASCII.EnableMotor:\n\t\t\t\t//\n\t\t\t\tmodbusOPCodeToDrive := TO_WORD(eAppliedMotionOpcodes.MOTOR_ENABLE);\n\t\t\t\tmodbusOPCodeTrigger := TRUE;\n\t\t\t\tIF status.motorEnabled THEN\n\t\t\t\t\tmodbusOPCodeTrigger := FALSE;\n\t\t\t\t\tError := FALSE;\n\t\t\t\t\tCommStatus := TRUE;\n\t\t\t\t\tcommErrorCount := 0;\n\t\t\t\t\tstate := eAppliedMotionDriveStatesASCII.Idle;\n\t\t\t\tEND_IF\nEND_CASE\n\nalarmCode := alarms.alarmCode;\nstatusCode := status.statusCode;\n","LineInfoPersistence":"(string)fb3b05b6-456b-48dd-b8ae-2cd8c0bd23aa_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_AppliedMotionMotorModbusRTU EXTENDS Axis_REF\nVAR_INPUT\n\tstepsPerInchSP : DINT := 3999;\n\tzeroOffset : REAL;\n\tjogForwardCMD : BOOL;\n\tjogReverseCMD : BOOL;\nEND_VAR\nVAR_OUTPUT\n\tstatusCode : WORD;\n\talarmCode : WORD;\n\tmodbusRIODataTrigger : BOOL;\n\tmodbusOPCodeTrigger : BOOL;\nEND_VAR\nVAR\n\txFirstScan:BOOL := TRUE;\n\twaitForHaltTimer : Standard.TON := (PT := T#20MS);\n\tmodbusDwordBuffer : uModbusDWORD;\n\tstatus : FB_AppliedMotionStatus;\n\talarms : FB_AppliedMotionAlarms;\n\tstate : eAppliedMotionDriveStatesASCII;\n\tcommErrorONS : FB_ONS;\n\tcommErrorFaultONS : FB_ONS;\n\tcommErrorCount : DINT;\n\tcommErrorFaultSetting : DINT := 3;\n\talarmONS : FB_ONS;\n\thaltONS : FB_ONS;\n\tfreeMotor : BOOL;\n\tzHome: BOOL;\n\treset: BOOL;\nEND_VAR\nVAR_IN_OUT\n\tMBChannel : IoDrvModbus.ModbusSlaveComPort;\n\tmodbusDataFromDrive : ARRAY[0..31] OF WORD;\n\tmodbusRIODataToDrive : ARRAY[0..4] OF WORD;\n\tmodbusOPCodeToDrive : WORD;\nEND_VAR\nVAR CONSTANT\n\tUNITS_PER_ROTATION : REAL := 4; // 1 unit = .25 RPM\n\tRPS_TO_RPM : REAL := 60; // Convert Revolution Per Seconds to Revolution Per Minute\n\tREVS_PER_INCH_OF_FEED : REAL := 0.489;\n\tACCEL_DECEL_RATE_IN_RPM : WORD := 600; // 1 unit = 10 RPM/S, 600 equals 100 RPS/S which is the default Accel/Decel in SCL\nEND_VAR","LineInfoPersistence":"(string)fb3b05b6-456b-48dd-b8ae-2cd8c0bd23aa_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)5532","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}