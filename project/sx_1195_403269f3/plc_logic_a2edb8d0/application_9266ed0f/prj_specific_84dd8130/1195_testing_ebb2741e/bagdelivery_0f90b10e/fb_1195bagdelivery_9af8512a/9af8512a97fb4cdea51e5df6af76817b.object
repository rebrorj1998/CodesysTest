{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)9af8512a-97fb-4cde-a51e-5df6af76817b","ParentGuid":"(Guid)9266ed0f-7f1e-4370-8ffa-55b419b1a46d","Name":"(string)FB_1195BagDelivery","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)0f90b10e-6a10-41d4-bf19-6d05d7ba810f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)SUPER^();\n{region \"Axis Setup\"}\n// Setup of Motion Commands for Bag Delivery motor axis\nMC_BagDeliveryRelativeMove(Axis := bagDeliveryMotor);\nMC_BagDeliveryHalt(Axis := bagDeliveryMotor);\nMC_ResetBagDelivery(Axis := bagDeliveryMotor);\nMC_PowerBagDelivery(Axis := bagDeliveryMotor, enable :=  F_EtherCatSlaveCommsRunning(state := AZD4A_KED.wState) AND NOT (state = eBagDeliveryStates.Resetting));\n{endregion}\n\t \n\n\t \n// IF _resetONS.Q THEN\n// \tClearStatus();\n// \tstate := eBagDeliveryStates.Cleanup;\n// \tIF bagDeliveryMotor.Error OR NOT bagDeliveryMotor.CommStatus THEN\n// \t\tMC_ResetBagDelivery.Execute := TRUE;\n// \tEND_IF\n// END_IF\n\nIF bagDeliveryMotor.Error THEN\n\tmotorFault.faultTrigger := TRUE;\nELSE \n\tmotorFault.faultTrigger := FALSE;\nEND_IF\n\n// IF NOT bagDeliveryMotor.CommStatus THEN\n// \tmotorCommFault.faultTrigger := TRUE;\n// ELSE\n// \tmotorCommFault.faultTrigger := FALSE;\n// END_IF\n\nIF trapezoidalPercent <= 0 THEN\n\ttrapezoidalPercent := 0.1;\nEND_IF\n\n_resetTimer(IN := state = eBagDeliveryStates.Resetting);\n\nCASE state OF\n\teBagDeliveryStates.Idle:\t\t\n\t\t_ready := NOT motorCommFault.active \n\t\tAND NOT reverseFault.active\n\t\tAND NOT noBagOverEye.active\n\t\tAND NOT motorFault.active\n        AND NOT bagFailedToSeparate.active; \n\n\teBagDeliveryStates.FeedBagOut:\t\t\n\t\tRelativeMove(distance := remainingLength,\n\t\t\t\t\t velocity := feedSpeed,\n\t\t\t\t\t  timeOut := MoveTimeoutCalc(remainingLength, feedSpeed, 1000),\n\t\t\t\t  description := 'Feed Bag Out',\n                        state := eBagDeliveryStates.FeedingBagOut);\n\t\t\t\t\t\t\n\teBagDeliveryStates.FeedToPrintOffset:\t\t\n\t\tRelativeMove(distance := printOffset,\n\t\t\t\t\t velocity := feedSpeed,\n\t\t\t\t\t  timeOut := MoveTimeoutCalc(remainingLength, feedSpeed, 1000),\n\t\t\t\t  description := 'Feed Bag to Print Offset',\n                        state := eBagDeliveryStates.FeedingToPrintOffset);\n\t\tremainingLength := remainingLength - printOffset;\n\n\teBagDeliveryStates.FeedAtPrintSpeed:\n\t\tRelativeMove(distance := printLength,\n\t\t\t\t\t velocity := printSpeed,\n\t\t\t\t\t  timeOut := MoveTimeoutCalc(printLength, printSpeed, 1000),\n\t\t\t\t  description := 'Feed At Print Speed',\n                        state := eBagDeliveryStates.FeedingAtPrintSpeed);\n\t\tremainingLength := remainingLength - printLength;\n\t\tprintingNow := TRUE;\n\n\teBagDeliveryStates.FeedingBagOut,\n\teBagDeliveryStates.FeedingToPrintOffset,\n\teBagDeliveryStates.FeedingAtPrintSpeed:\n\t\t// Wait for Move to complete or fault\n\t\tIF MC_BagDeliveryRelativeMove.Error OR moveBagDeliveryTimeout.Q THEN\n\t\t\tMC_BagDeliveryHalt.Execute := TRUE;\n\t\t\tIF MC_BagDeliveryHalt.Done THEN\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\tEND_IF\n\t\tEND_IF\n\n\t\tIF MC_BagDeliveryRelativeMove.Done THEN\n\t\t\tIF state = eBagDeliveryStates.FeedingBagOut THEN\n\t\t\t\t_bagFeedDone := TRUE;\n\t\t\tEND_IF\n\t\t\tIF state = eBagDeliveryStates.FeedingToPrintOffset THEN\n\t\t\t\t_readyForPrint := TRUE;\n\t\t\tEND_IF\n\t\t\tIF printingNow THEN\n\t\t\t\tprinter.StopPrinting();\n\t\t\t\tIF printer.PrintDone THEN\n\t\t\t\t\tprintingNow := FALSE;\n\t\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\t\tEND_IF\n\t\t\tELSE\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\tEND_IF\n\t\tEND_IF\t\t\n\t\n\teBagDeliveryStates.FeedToPhotoEye: \t\n\t\t// Feed bag if not over photoeye\n\t\tRelativeMove(distance := maxReverseSetpoint,\n\t\t\t\t\t velocity := reverseSpeed,\n\t\t\t\t\t  timeOut := MoveTimeoutCalc(maxReverseSetpoint, reverseSpeed, 1000),\n\t\t\t\t  description := 'Feeding to Photoeye',\n\t\t\t\t\t\tstate := eBagDeliveryStates.FeedingToPhotoEye);\n\t\t\n\t\t\t\n\t\teBagDeliveryStates.FeedingToPhotoEye:\n\t\t// If move completed, fault\n\t\tIF MC_BagDeliveryRelativeMove.Done THEN\n\t\t\tnoBagOverEye.Trigger();\n\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\n\t\tIF MC_BagDeliveryRelativeMove.Error OR moveBagDeliveryTimeout.Q THEN\n\t\t\tMC_BagDeliveryHalt.Execute := TRUE;\n\t\t\tIF MC_BagDeliveryHalt.Done THEN\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\tEND_IF\n\t\t\tnoBagOverEye.Trigger();\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\n\t\tIF bagPresent THEN\n\t\t\tMC_BagDeliveryHalt.Execute := TRUE;\n\t\t\tIF MC_BagDeliveryHalt.Done THEN\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\tEND_IF\n\t\tEND_IF\n\t\t\t\n\teBagDeliveryStates.ReverseToSeperate:\n\t\tRelativeMove(distance := maxReverseSetpoint * -1,\n\t\t\t\t     velocity := reverseSpeed,\n\t\t\t\t\t  timeOut := MoveTimeoutCalc(maxReverseSetpoint, reverseSpeed, 1000),\n\t\t\t\t  description := 'Reverse to Photoeye',\n\t\t\t\t\t    state := eBagDeliveryStates.ReversingToSeperate);\n\t\n\teBagDeliveryStates.ReversingToSeperate:\n\t\t// Wait for Move to complete or fault\n\t\tIF MC_BagDeliveryRelativeMove.Done THEN\n\t\t\tIF dryCycle THEN\n\t\t\t\t_bagSeparated := TRUE;\n\t\t\t\tremainingLength := bagLength - sealOffset + distanceFromSealBarToBagEdge;\n\t\t\tELSE\n\t\t\t\tbagFailedToSeparate.Trigger(); \n\t\t\tEND_IF\n\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\tEND_IF\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\tIF MC_BagDeliveryRelativeMove.Error OR moveBagDeliveryTimeout.Q THEN\n\t\t\tMC_BagDeliveryHalt.Execute := TRUE;\n\t\t\tIF MC_BagDeliveryHalt.Done THEN\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\tEND_IF\n\t\t\treverseFault.Trigger();\n\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\n\t\tIF NOT bagPresent AND NOT dryCycle THEN\n\t\t\tMC_BagDeliveryHalt.Execute := TRUE;\n\t\t\tIF MC_BagDeliveryHalt.Done THEN\n\t\t\t\t_bagSeparated := TRUE;\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\t\tremainingLength := bagLength - sealOffset + distanceFromSealBarToBagEdge;\n\t\t\tEND_IF\n\t\tEND_IF\n\t\n\teBagDeliveryStates.Cleanup:\t// Cleanup\n\t\tMC_BagDeliveryRelativeMove.Execute := FALSE;\n\t\tMC_BagDeliveryHalt.Execute := FALSE;\n\t\tmoveBagDeliveryTimeout.IN := FALSE;\n\t\tstate := eBagDeliveryStates.Idle;\n\t\t\n\teBagDeliveryStates.Reset:\t\n\t\tMC_ResetBagDelivery.execute := TRUE;\n\t\tstate := eBagDeliveryStates.Resetting;\n\t\n\teBagDeliveryStates.Resetting:\t\n\t\tIF _resetTimer.Q THEN\n\t\t\tMC_ResetBagDelivery.execute := FALSE;\n\t\t\tstate := eBagDeliveryStates.ResetDone;\n\t\tEND_IF\n\t\n\teBagDeliveryStates.ResetDone:\t\n\t\tIF bagDeliveryMotor.operational THEN\n\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\tEND_IF\n\t\t\n\t\nEND_CASE","LineInfoPersistence":"(string)9af8512a-97fb-4cde-a51e-5df6af76817b_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FINAL FB_1195BagDelivery EXTENDS FB_BaseComponent IMPLEMENTS IBagDelivery\nVAR_INPUT\n\tsimulateIO : BOOL;\n\tbagPresent : BOOL;\n\tdryCycle : BOOL;\n\tprinter : IPrinter;\n\tbagLength : REAL := 24.0;\n\tfeedSpeed : REAL := 30.0;\n\treverseSpeed : REAL := 3.0;\n\tprintSpeed : REAL := 6.0;\n\tprintOffset : REAL := 4.5;\n\tprintLength : REAL := 6.0;\n\tmaxReverseSetpoint : REAL := 3.0;\n\tsealOffset : REAL := 1.5;\n\tdistanceFromSealBarToBagEdge : REAL := 3;\n\tdistanceFromNipToBagEdge : REAL := 1.25;\n\ttrapezoidalPercent : REAL := 0.1;\nEND_VAR\nVAR_OUTPUT\n\treverseFault : FB_Fault(name := Standard.CONCAT(_prefix,'Reverse Fault'));\n\tbagFailedToSeparate : FB_Fault(name := Standard.CONCAT(_prefix,'Failed To Separate'));\n\tnoBagOverEye : FB_Fault(name := Standard.CONCAT(_prefix,'No Bag Over Photoeye'));\n\tmotorFault : FB_Fault(name := CONCAT(_prefix, 'Film Feed Motor Fault'));\n\tmotorCommFault : FB_Fault(name := CONCAT(_prefix, 'Film Feed Motor Comm Fault'));\nEND_VAR\nVAR\n\t\n\t_bagFeedDone : BOOL;\n\t_bagSeparated : BOOL;\n\t_readyForPrint : BOOL;\n\tstate : eBagDeliveryStates;\n\tmoveBagDeliveryTimeout : Standard.TON;\n\t_resetTimer : TON := (PT := T#2S);\n\tMC_BagDeliveryRelativeMove : MC_MoveRelative;\n\tMC_BagDeliveryHalt : MC_Halt;\n\tMC_ResetBagDelivery : MC_Reset;\n\tMC_PowerBagDelivery  : MC_Power;\n\tremainingLength : REAL;\n\tbagEdgePhotoeyeSim : FB_SimulatedFeedbackPhysicalInput(name := 'Bag Edge Photoeye Sim');\n\tprintingNow : BOOL;\nEND_VAR\nVAR_IN_OUT\n\tbagDeliveryMotor : Axis_REF;\nEND_VAR","LineInfoPersistence":"(string)9af8512a-97fb-4cde-a51e-5df6af76817b_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)2835","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}