{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)d585d444-6487-4bc0-ab97-1928a8635fd9","ParentGuid":"(Guid)9266ed0f-7f1e-4370-8ffa-55b419b1a46d","Name":"(string)FB_DualMotorPressureBar_Async","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)cb5d20e0-fad9-44bf-8dc7-bab470a451ea"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_DualMotorPressureBar_Async()\n//\tDescription: Dual motor passthough, using a low torque positionable motor for most movements and a high torque brushless motor for clamping force to seal and \n//\t\t\t\t reverse bag\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: 4/11/2023\n\nSUPER^();\nstepTON1(PT:=T#10000MS,IN:=stepChange AND NOT _reset AND NOT (state = eDualMotorPressureBar_AsyncStates.Idle OR state = eDualMotorPressureBar_AsyncStates.Faulted ));\nstepTON2(PT:=stepTON1.PT,in:=NOT stepChange  AND NOT _reset AND NOT (state = eDualMotorPressureBar_AsyncStates.Idle OR state = eDualMotorPressureBar_AsyncStates.Faulted ));\nsetZeroONS(CLK:=setZero);\nzeroNowTON(PT:=T#10S,IN:=zeroNow);\nstepChangeONS(clk:= NOT (priorstate = state));\nIF stepChangeONS.OSR THEN\n\tstepChange:=NOT stepChange;\nEND_IF\n_isHomed := _isFullyOpen;\nIF setZeroONS.OSR THEN\n\tzeroNow := TRUE;\nEND_IF\ntest:= IsReadyForFeed;\n_busy:= frontMotor.axisState <> eAxisState.Standstill;\n// Setup of Motion Commands for passthrough motor axis\nMC_HomeFrontMotor(axis := frontMotor);\nMC_MoveFrontMotorABS(axis := frontMotor);\nMC_MoveFrontMotorPush(axis := frontMotor);\nMC_ResetFrontMotor(axis := frontMotor);\nMC_HaltFrontMotor(axis := frontMotor);\nMC_PowerUpFrontJawMotor(\n\t//enable := F_EtherCatSlaveCommsRunning(state := AZD4A_KED.wState) AND NOT ((state = eDualMotorPressureBar_AsyncStates.Faulting) OR pressureBarObstructed.Active) , \n\tenable := F_EtherCatSlaveCommsRunning(state := AZD4A_KED.wState) AND NOT ((state = eDualMotorPressureBar_AsyncStates.Resetting) OR pressureBarObstructed.Active) ,\n\taxis := frontMotor\n);\n// If reset of motors fails state machine must move on\n_resetTimer(IN := state = eDualMotorPressureBar_AsyncStates.Resetting);\n\n// Jaw move in delay\t \n_moveInDelay(IN := _closeNow, PT := moveInDelaySetting);\t\n  \n// Jaw test delay timer\n_jawTestDelayTimer();\n\n// Jaw move out delay\n_moveOutDelay (IN :=  (state = eDualMotorPressureBar_AsyncStates.Open) AND clampingMechanism.Cleared);\n_moveOutTimeOut(IN := state = eDualMotorPressureBar_AsyncStates.Opening AND _jawOpenPositionDelta < 0.1);\n_haltWaitTimer(IN :=  state = eDualMotorPressureBar_AsyncStates.HaltDelay);\n\t \n// Passthrough position is based on reported motor position\n\nactualPositionInInches := frontMotor.actualPositonInInches;\n\t \n//_isFullyClosed := actualPositionInInches < -0.1;\n//_isFullyClosed := state = eDualMotorPressureBar_AsyncStates.Clamping;\n_isReadyForFeed :=actualPositionInInches > feedOpeningInches;\n_isFullyOpen := ABS(actualPositionInInches - passthroughSetting) < 0.1;\n\n// Failed to reach sensor timers\n_failedToCloseTimer(\n\tIN := state = eDualMotorPressureBar_AsyncStates.ClosingToFaceplate AND NOT _isFullyClosed AND NOT closeJawPB,\n\tPT := _jawCloseMotionFaultTimeOffset,\n\tQ => failedToClose.faultTrigger);\n\t\n_failedToOpenTimer(\n\tIN := state = eDualMotorPressureBar_AsyncStates.Opening AND NOT _isFullyOpen,\n\tPT := _jawOpenMotionFaultTimeOffset,\n\tQ => failedToOpen.faultTrigger);\n  \n// Trigger motor faults from drive\t\t\t\nfrontMotorFault.faultTrigger := frontMotor.error;\nfrontMotorCommFault.faultTrigger := NOT frontMotor.commStatus;\npressureBarObstructed.faultTrigger := NOT zeroNow AND \n\t\t\t\t\t\t\t\t\t\tNOT obstructionSensor AND ((actualPositionInInches > 0.13) AND NOT _isFullyOpen);\npressurebarTimeOut.faultTrigger:= stepTON1.Q OR stepTON2.Q;\n_activeFault := pressurebarTimeOut.Active OR pressureBarObstructed.Active OR failedToClose.Active OR frontMotorFault.Active OR failedToOpen.Active OR failedToHome.Active OR lightCurtainViolations.Active;\n//\t \n_faultONS(CLK := _activeFault);\n\n_startClampingONS(CLK := (actualPositionInInches < _startClampingPosition) AND state = eDualMotorPressureBar_AsyncStates.ClosingToFaceplate AND clampingMechanism.Cleared);\n\nIF _faultONS.OSR THEN\n\t_faultedState := state;\n\tfaultedPos := actualPositionInInches;\n\tstate := eDualMotorPressureBar_AsyncStates.Faulting;\nEND_IF\n\n//code to add timer to track duration in states\nstateTimer(PT:=T#10000S);\nIF clr THEN\n\tspeedTracking:=speedTracking_mt;\n\tclr:=FALSE;\nEND_IF\nIF state  = laststate THEN\n\tstateTimer.IN := TRUE;\nELSIF state  <> laststate THEN\n\tstateTimer.IN := FALSE;\n\tIF state =0 THEN\n\t\tcount_index := count_index +1;\n\tEND_IF\n\tlaststate:=state;\nEND_IF\nspeedTracking[state_index][count_index] := stateTimer.ET;\n\nIF count_index >=20 THEN\n\tcount_index :=0;\nEND_IF\n//End modded code\n_ready := state = eDualMotorPressureBar_AsyncStates.Idle AND _isFullyOpen;\n//\n\nIF NOT iLightCurtainStart AND HMIData.lightCurtainInstalled AND NOT _ready THEN\n\tlightCurtainViolations.Trigger();\nEND_IF\n\nIF stopJawTestMode THEN\n\tjawTestModeActive := FALSE;\nEND_IF\nIF motionInhibit THEN\n\tstate:= eDualMotorPressureBar_AsyncStates.Idle;\nEND_IF\ncleanup_ons(CLK:=state = eDualMotorPressureBar_AsyncStates.Idle);\n_stateString := TO_STRING(state);\n\nCASE state OF\n\t\n\teDualMotorPressureBar_AsyncStates.Idle:\n\t\tstate_index:=0;\n\t\t//\t  \n\t\t_maintenanceMove := closeJawPB OR openJawPB;\n\t\tIF cleanup_ons.OSR THEN\n\t\t\tSterilizeVariables();\n\t\tEND_IF \n\t\t_ready := _isHomed AND NOT _faultONS.CLK AND InPosition;\n\t\t_isFullyClosed := FALSE;\n\t\t //\n\t\t _timeoutTimer.IN := FALSE;\n\t\t_jawTestDelayTimer.IN := FALSE;\n\t\tMC_ResetfrontMotor.execute := FALSE;\n\t\t\n\t\t//\t\n\t\tIF NOT motionInhibit THEN\n\t\t\tIF beginJawTestMode THEN\n\t\t\t\tjawTestModeActive := TRUE;\n\t\t\t\tcurrentTestCycles := 0;\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.CloseToFaceplate;\n\t\t\tEND_IF\n\t\t\n\t\t//\n\n\t\t\tIF _homeNow THEN\n\t\t\t\t_homeNow := FALSE;\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Home;\n\t\t\tELSIF \tzeroNow THEN\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Home;\n\t\t\tELSIF _movePassthroughNow THEN\n\t\t\t\t_movePassthroughNow := FALSE;\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Open;\n\t\t\tELSIF _openNow OR openJawPB OR _makeReady THEN\n\t\t\t\t_openNow := _makeReady :=  openJawPB := FALSE;\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Open;\n\t\t\tELSIF (_closeNow AND _moveInDelay.Q) OR closeJawPB THEN\n\t\t\t\t_closeNow := FALSE;\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.CloseToFaceplate;\n\t\t\tEND_IF\n\t\tEND_IF\n\t\n\teDualMotorPressureBar_AsyncStates.Home:\n\t\tstate_index:=8;\t \t\n//\n\t\tIF clampingMechanism.IsHomed  THEN\n\t\t\tIF NOT zeroNow THEN\n\t\t\tAbsoluteMove(\n\t\t\t\tmotionProfile := openProfile,\n\t\t\t\tnextState := eDualMotorPressureBar_AsyncStates.Homing\n\t\t\t);\n\t\t\tELSIF zeroNow THEN\n\t\t\t\tState := eDualMotorPressureBar_AsyncStates.Homing;\n\t\t\tEND_IF\n\t\tELSE\n\t\t\tclampingMechanism.HomeNow();\n\t\tEND_IF\n\t\t\t\t\t\n\teDualMotorPressureBar_AsyncStates.Homing:\n\t\tstate_index:=10;\n\t\t// Once Homed, Open\n\t\tIF NOT zeroNow THEN\n\t\t\tIF MC_MoveFrontMotorABS.done THEN\n\t\t\t\t_homeloc := TRUE;\n\t\t\t\t_timeoutTimer.IN := FALSE;\n\t\t\t\tMC_MoveFrontMotorABS.execute := FALSE;\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Open;\n\t\t\tELSIF MC_MoveFrontMotorABS.Error OR _timeoutTimer.Q THEN\n\t\t\t\tfailedToHome.Trigger();\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Faulting;\n\t\t\tEND_IF\n\t\tELSIF zeroNow THEN\n\t\t\tMC_HomeFrontMotor.execute:= TRUE;\n\t\t\tIF MC_HomeFrontMotor.homeSuccess THEN\n\t\t\t\tzeroNow:=FALSE;\n\t\t\t\tMC_HomeFrontMotor.execute:= FALSE;\n\t\t\t\tfactoryHomeJaw := TRUE;\n\t\t\tELSIF factoryHomeJaw THEN\n\t\t\t\tstate:=eDualMotorPressureBar_AsyncStates.Home;\n\t\t\tELSIF zeroNowTON.Q THEN \n\t\t\t\tfailedToHome.Trigger();\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Faulting;\n\t\t\tEND_IF\n\t\tEND_IF\n\n\t\n\teDualMotorPressureBar_AsyncStates.Open:\t\n\t\tstate_index:=1;\n\t\t// Move jaw out to passthrough\n\t\t_isFullyClosed := FALSE;\n\t\tclampingMechanism.StopClamping();\n\t\tIF  clampingMechanism.Cleared AND NOT _busy THEN\n\t\tIF _moveOutDelay.Q THEN\n\t\t\tAbsoluteMove(\n\t\t\t\tmotionProfile := openProfile,\n\t\t\t\tnextState := eDualMotorPressureBar_AsyncStates.Opening\n\t\t\t);\n\t\tEND_IF\n\t\tEND_IF\n\t\t\n\teDualMotorPressureBar_AsyncStates.Opening:\n\t\t_isFullyClosed := FALSE;\n\t\tstate_index:=2;\n\t\t_jawOpenPositionDelta := ABS(HMIData.passthroughSetting - MC_MoveFrontMotorABS.position);\n\t\n\t\t// wait for jaw to report open\n\t\tIF MC_MoveFrontMotorABS.Done AND _jawOpenPositionDelta <0.1  THEN\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Opened;\n\t\tELSIF MC_MoveFrontMotorABS.Error OR _timeoutTimer.Q THEN\n\t\t\tfailedToOpen.Trigger();\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Faulting;\n\t\t// moveOutTimeOut to fix oriental motor getting stuck in out position\n\t\tELSIF _moveOutTimeOut.Q  THEN\n\t\t\tMC_HaltFrontMotor.execute := TRUE;\n\t\t\t_moveOutStuckCount := _moveOutStuckCount + 1;\t\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.HaltDelay;\t\t\n\t\tEND_IF\n\n\t\teDualMotorPressureBar_AsyncStates.Opened:\n\t\t\t_isFullyClosed := FALSE;\n\t\t\tstate_index:=11;\n\t\t\t//\n\t\t\topenJawPB :=_openNow := _makeReady :=  FALSE;\n\t\t\t_timeoutTimer.IN := FALSE;\n\t\t\tMC_MoveFrontMotorABS.execute := FALSE;\n\t\t\tIF jawTestModeActive THEN\n\t\t\t\t_jawTestDelayTimer.IN := TRUE;\n\t\t\t\tIF _jawTestDelayTimer.Q THEN\n\t\t\t\t\t_jawTestDelayTimer.IN := FALSE;\n\t\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.CloseToFaceplate;\n\t\t\t\t\tcurrentTestCycles := currentTestCycles + 1;\n\t\t\t\tEND_IF\n\t\t\tELSE\n\t\t\t\t_homeloc := TRUE;\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Idle;\n\t\t\tEND_IF\n\t\t\t\n\teDualMotorPressureBar_AsyncStates.HaltDelay:\t\n\t\tstate_index:=6;\n\t\t//Wait for communication interval per datasheet to turn off then close jaw\n\t\tIF _haltWaitTimer.Q THEN\n\t\t\tMC_HaltFrontMotor.execute := FALSE;\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Opened;\n\t\tEND_IF\n\t\t\t\t\n\teDualMotorPressureBar_AsyncStates.CloseToFaceplate:\n\t\t_isFullyClosed := FALSE;\n\t\tstate_index:=7;\t\n\t\t// Start Moving jaw to closed position\n\t\tIF clampingMechanism.Cleared OR (clampingMechanism.Moving AND NOT clampingMechanism.Forward) THEN\n\t\t\tAbsoluteMove(\n\t\t\t\tmotionProfile := closeProfile,\n\t\t\t\tnextState := eDualMotorPressureBar_AsyncStates.ClosingToFaceplate\n\t\t\t);\t\n\t\tELSE\n\t\t\tclampingMechanism.HomeNow();\n\t\tEND_IF\n\t\t\n\teDualMotorPressureBar_AsyncStates.ClosingToFaceplate:\n\t\t_isFullyClosed := FALSE;\n\t\tstate_index:=3;\n\t\t// Wait for jaw closed indication\n\t\tIF _startClampingONS.OSR AND NOT clampBypass AND NOT _maintenanceMove THEN\n\t\t\tclampingMechanism.StartClamping();\n\t\tEND_IF\n\t\tIF  (clampingMechanism.Moving AND clampingMechanism.Forward) OR clampBypass OR _maintenanceMove THEN\n\t\tIF MC_MoveFrontMotorABS.Done THEN\n\t\t\t//\n\t\t\tMC_MoveFrontMotorABS.execute := FALSE;\n\t\t\t_timeoutTimer.IN := FALSE;\n\t\t\tIF jawTestModeActive THEN\n\t\t\t\t_jawTestDelayTimer.IN := TRUE;\n\t\t\t\tIF _jawTestDelayTimer.Q THEN\n\t\t\t\t\t_jawTestDelayTimer.IN := FALSE;\n\t\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.Open;\n\t\t\t\tEND_IF\n\t\t\tELSE\n\t\t\t\tstate := eDualMotorPressureBar_AsyncStates.ClosedToFaceplate;\n\t\t\tEND_IF\n\t\t\tEND_IF\n\t\tELSIF MC_MoveFrontMotorABS.Error OR _timeoutTimer.Q THEN\n\t\t\tfailedToClose.Trigger();\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Faulting;\n\t\tEND_IF\n\t\t\n\teDualMotorPressureBar_AsyncStates.ClosedToFaceplate:\n\t\t_isFullyClosed := FALSE;\n\t\tstate_index:=9;\n\t\t// Push in and wait for clamping\n\t\tIF _maintenanceMove THEN\n\t\t\tMC_MoveFrontMotorPush.execute := FALSE;\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Idle;\n\t\tELSE\n\t\t\tIF NOT clampingMechanism.Cleared OR clampBypass THEN\n\t\t\tAbsoluteMovePush(\n\t\t\t\tmotionProfile := pushProfile,\n\t\t\t\tnextState := eDualMotorPressureBar_AsyncStates.Clamp\n\t\t\t);\n\t\t\tEND_IF\n\t\t\tclampingState := TRUE;\n\t\t\tclamp_pos := 0.0;\n\t\t\tpeak_velo := 0;\n\t\t\tmin_velo := 10000;\n\t\t\tclampPushed:=FALSE;\n\t\tEND_IF\n\t\n\teDualMotorPressureBar_AsyncStates.Clamp:\n\t\t_isFullyClosed := FALSE;\n\t\tstate_index:=4;\n\t\t// Wait for clamp signal\n\n\t\tIF NOT clampBypass THEN\n\t\t\tIF NOT obstructionSensor AND FrontMotor.actVel<800 AND actualPositionInInches< adjClampedPos AND clampingState THEN\n\t\t\t\tclampingState := FALSE;\n\t\t\t\tIF clamp_pos< ABS(actualPositionInInches) THEN\n\t\t\t\t\tclamp_pos := actualPositionInInches;\n\t\t\t\tEND_IF\n\t\t\tEND_IF\n\t\t\tIF NOT clampingState THEN\n\t\t\t\tIF ABS(frontMotor.actVel) > peak_velo  THEN\n\t\t\t\t\tpeak_velo := ABS(frontMotor.actVel);\n\t\t\t\tEND_IF\n\t\t\t\tIF ABS(frontMotor.actVel) < min_velo AND frontMotor.actVel <>0 THEN\n\t\t\t\t\tmin_velo := ABS(frontMotor.actVel);\n\t\t\t\tEND_IF\n\t\t\t\tIF ABS(frontMotor.actVel) > 1000.0 THEN\n\t\t\t\t\tclampPushed:=TRUE;\n\t\t\t\tEND_IF\n\t\t\t\tIF clamp_pos< ABS(actualPositionInInches) THEN\n\t\t\t\tclamp_pos := actualPositionInInches;\n\t\t\t\tEND_IF\n\t\t\tEND_IF\n\t\tELSE\n\t\t\tclampingState:= FALSE;\n\t\tEND_IF\n\t\tIF (NOT clampingState AND clampPushed) OR clampBypass THEN\n\t\t\t\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Clamping;\n\t\tEND_IF\n\t\t\n\teDualMotorPressureBar_AsyncStates.Clamping:\n\t\tstate_index:=5;\n\t\t_isFullyClosed:= TRUE;\n\t\t// Wait for clamp complete\n\t\tIF _openNow THEN\n\t\t\tclampingMechanism.StopClamping();\n\n\t\t\t//MC_HaltFrontMotor.execute := FALSE;\n\t\t\t_openNow := FALSE;\n\t\t\t\n\t\tEND_IF\n\t\t//IF NOT clampingMechanism.Clamping AND ((clampingMechanism.Moving AND NOT clampingMechanism.Forward) OR clampingMechanism.Cleared)  THEN\n\t\tIF NOT clampingMechanism.Clamping AND clampingMechanism.Cleared THEN\n\t\t\tMC_MoveFrontMotorPush.execute := FALSE;\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Open;\n\t\tEND_IF\n\t\n\teDualMotorPressureBar_AsyncStates.Clamped:\n\t\tstate_index:=12;\n\t\t\n\teDualMotorPressureBar_AsyncStates.Halting:\n\t\tstate_index:=18;\n\t\t// Free up motors on a Halt\n\t\t_timeoutTimer.IN := FALSE;\n\t\tMC_HomeFrontMotor.execute := FALSE;\n\t\tMC_MoveFrontMotorABS.execute := FALSE;\n\t\tMC_MoveFrontMotorPush.execute := FALSE;\n\t\tMC_ResetFrontMotor.execute := FALSE;\n\t\t//7-17-2023 CT Removed comments on MC_HaltFrontMotor.execute:=TRUE;  No reason could be found for this bypass.\n \t\tMC_HaltFrontMotor.execute := TRUE;\n\t\tIF _activeFault THEN\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Faulted;\n\t\tELSE\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Idle;\n\t\tEND_IF\n\teDualMotorPressureBar_AsyncStates.Faulting:\n\t\tstate_index:=13;\n\t\t// Free up motors on a fault\n// \t\t_timeoutTimer.IN := FALSE;\n \t\tMC_HomeFrontMotor.execute := FALSE;\n \t\tMC_MoveFrontMotorABS.execute := FALSE;\n \t\tMC_MoveFrontMotorPush.execute := FALSE;\n \t\tMC_ResetFrontMotor.execute := FALSE;\n\t\tclampingMechanism.StopClamping();\n\t\t//7-17-2023 CT Removed comments on MC_HaltFrontMotor.execute:=TRUE;  No reason could be found for this bypass.\n \t\tMC_HaltFrontMotor.execute := FALSE;\n\t\tstate := eDualMotorPressureBar_AsyncStates.halting;\n\t\t\n\teDualMotorPressureBar_AsyncStates.Faulted:\n\t\tstate_index:=14;\t\t\n//\n\t\tMC_HomeFrontMotor.execute := FALSE;\n \t\tMC_MoveFrontMotorABS.execute := FALSE;\n \t\tMC_MoveFrontMotorPush.execute := FALSE;\n\t\tIF MC_HaltFrontMotor.Done OR\n\t\t   MC_HaltFrontMotor.Error  THEN\n\t\t\tMC_HaltFrontMotor.execute := FALSE;\n\t\tEND_IF\n\t\tIF \tzeroNow THEN\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Reset;\n\t\tEND_IF\n\teDualMotorPressureBar_AsyncStates.Reset:\n\t\tstate_index:=15;\n\t\t//\n\t\t_homeNow := FALSE;\n\t\t_openNow := FALSE;\n\t\t_closeNow := FALSE;\n\t\t_timeoutTimer.IN := FALSE;\n\t\tjawTestModeActive := FALSE;\n\t\tMC_HomeFrontMotor.execute := FALSE;\n\t\tMC_MoveFrontMotorABS.execute := FALSE;\n\t\tMC_MoveFrontMotorPush.execute := FALSE;\n\t\t//MC_ResetFrontMotor.execute := TRUE;\n\t\tMC_ResetFrontMotor.execute := FALSE;\n\t\tMC_HaltFrontMotor.execute := FALSE;\n\t\t//zeroNow:= FALSE;\n\t\tIF MC_PowerUpFrontJawMotor.enable = TRUE THEN\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Resetting;\n\t\tEND_IF\n\t\t\n\n\teDualMotorPressureBar_AsyncStates.Resetting:\n\t\tstate_index:=16;\n\t\t//\n\t\tMC_ResetFrontMotor.execute := TRUE;\n\t\tIF  _resetTimer.Q THEN\n\t\t\tMC_ResetFrontMotor.Execute := FALSE;\t\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.ResetDone;\n\t\tEND_IF\n\t\n\teDualMotorPressureBar_AsyncStates.ResetDone:\n\t\tstate_index:=17;\n\t\tIF frontMotor.operational THEN\n\t\t\tstate := eDualMotorPressureBar_AsyncStates.Idle;\n\t\tEND_IF\nEND_CASE","LineInfoPersistence":"(string)d585d444-6487-4bc0-ab97-1928a8635fd9_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_DualMotorPressureBar_Async EXTENDS FB_BaseComponent IMPLEMENTS IPressureBar, IHomable\nVAR_INPUT\n\tsimulateIO : BOOL;\t\t\t\t\t\t\t\t// Simulate all I/O for testing\n\tfrontMotor : REFERENCE TO FB_AZDKAxis;\t\t\t\t// The motor axis for the front (low torque) passthrough\n\tclampingMechanism : IClampingMechanism;\t\t\t// Clamping Mechanism\n\tcloseProfile : sctMotionProfile;\t\t\t\t// Passthrough Close Profile\n\topenProfile : sctMotionProfile;\t\t\t\t\t// Passthrough Open Profile\n\tpushProfile : sctMotionProfile;\n\tpassthroughSetting : REAL := 5.5;\n\tjawClosedSetting : REAL := -0.2;\n\tjawTorqueSetting : REAL := 100.0;\n\tmoveInDelaySetting : TIME;\n\tpressureBarClosedSensor : BOOL;\n\tpressureBarNearClosedSensor : BOOL;\n\tobstructionSensor : BOOL;\n\topenJawPB : BOOL;\n\tcloseJawPB : BOOL;\n\tbeginJawTestMode : BOOL;\n\tstopJawTestMode : BOOL;\t\n\tsetZero : BOOL := FALSE;\n\tadjClampedPos : REAL := 0.3;\n\tclampBypass: BOOL:=FALSE;\n\tmotionInhibit: BOOL :=FALSE;\n\tcleanup_ons : FB_ONS;\nEND_VAR\nVAR_OUTPUT\n\tpressureBarObstructed : FB_Fault(name := CONCAT(_prefix, 'Obstructed'), faultID := faultMessageList.JAW_OBSTRUCTED);\n\tfrontMotorFault : FB_Fault(name := CONCAT(_prefix, 'Front Motor Fault'), faultID := faultMessageList.JAW_FRONT_MOTOR_FAULT);\n\tfrontMotorCommFault : FB_Fault(name := CONCAT(_prefix, 'Front Motor Comm Fault'), faultID := faultMessageList.JAW_FRONT_MOTOR_COM_FAULT);\n\tfailedToClose : FB_Fault(name := CONCAT(_prefix, 'Failed to Close'), faultID := faultMessageList.JAW_FAILED_TO_CLOSE);\n\tfailedToOpen : FB_Fault(name := CONCAT(_prefix, 'Failed to Open'), faultID := faultMessageList.JAW_FAILED_TO_OPEN);\n\tfailedToHome : FB_Fault(name := CONCAT(_prefix, 'Failed to Home '), faultID := faultMessageList.JAW_FAILED_TO_HOME);\n\tpressurebarTimeOut : FB_Fault(name := CONCAT(_prefix, 'Time Out'), faultID := faultMessageList.JAW_TIMEOUT);\n\tlightCurtainViolations : FB_Fault(name :=CONCAT(_PREFIX, 'Light Curtain Violation'), faultID := faultMessageList.JAW_LIGHT_CURTAIN_VIOLATION);\n\tactualPositionInInches : REAL;\n\tjawTestModeActive : BOOL;\n\tcurrentTestCycles : DINT;\n\tstate : eDualMotorPressureBar_AsyncStates;\nEND_VAR\nVAR\n// \tsimClose : FB_SimulatedFeedbackPhysicalInput(name := CONCAT(_prefix,'Move In')) := (minDelay := 20, maxDelay := 60);\n// \tsimOpen : FB_SimulatedFeedbackPhysicalInput(name := CONCAT(_prefix,'Move Out')) := (minDelay := 20, maxDelay := 60);\n\tMC_HomeFrontMotor : MC_Home;\n\tMC_PowerUpFrontJawMotor : MC_Power;\n\tMC_MoveFrontMotorABS : MC_MoveAbsolute;\n\tMC_MoveFrontMotorPush : MC_MoveAbsolutePush;\n\tMC_ResetFrontMotor : MC_Reset;\n\tMC_HaltFrontMotor : MC_Halt;\n\tfeedOpeningInches: REAL:= 2.0;\n\t_isReadyForFeed: BOOL:= FALSE;\n\t_movePassthroughNow : BOOL;\n\t_homeNow : BOOL;\n\t_openNow : BOOL;\n\t_closeNow : BOOL;\n\t_isHomed : BOOL;\n\t_isFullyOpen : BOOL;\n\t_isFullyClosed : BOOL;\n\t_failedToCloseTimer : Standard.TON;\n\t_failedToOpenTimer : Standard.TON;\n\t_moveInDelay : Standard.TON;\n\t_jawOpenMotionFaultTimeOffset : TIME := T#3S;\n\t_jawCloseMotionFaultTimeOffset : TIME := T#3S;\n\t_resetTimer: Standard.TON := (PT := T#250MS);\n\t_timeoutTimer : Standard.TON := (PT := T#6S);\n\t_jawTestDelayTimer : Standard.TON := (PT := T#250MS);\n\t_faultONS : FB_ONS;\n\t_startClampingONS : FB_ONS;\n\t_startClampingPosition : REAL := 1.0;\n\t_moveOutDelay : Standard.TON := (PT := T#100MS);//T#100MS);\n\t_moveOutTimeOut : Standard.TON := (PT := T#1250MS);\n\t_jawOpenPositionDelta : REAL;\n\t_moveOutStuckCount : INT := 0;\n\t_haltWaitTimer : TON := (PT := T#50MS);\n\t_lastState : eDualMotorPressureBar_AsyncStates;\n\tsetZeroONS : FB_ONS;\n\tzeroNow : BOOL := FALSE;\n\t_faultedState : eDualMotorPressureBar_AsyncStates;\n\tfaultedPos : REAL;\n\t//\n\tTest:BOOL;\n\tclampingReleaseDebounce: TON:= (PT := T#100MS);\n\t\n\t\t//variables for the state timer\n\tstateTimer:TON;\n\tlaststate: INT;\n\tcount_index :INT :=0;\n\tclr:BOOL:=FALSE;\n\tspeedTracking : ARRAY[0..20] OF ARRAY[0..20] OF TIME;\n\tspeedTracking_mt : ARRAY[0..20] OF ARRAY[0..20] OF TIME:=[21([21(T#0S)])]; \n\tstate_index : INT:=0;\n\tzeroNowTON: Ton;\n\t_activeFault: BOOL;\n\t_homeloc: BOOL;\n\tclamp_pos: REAL;\n\tposONS: FB_ONS;\n\tstepTON1:TON;\n\tstepTON2:TON;\n\tstepChange: BOOL;\n\tstepChangeONS: FB_ONS;\n\tpriorstate: eDualMotorPressureBar_AsyncStates;\n\tclampingState: BOOL;\n\tpeak_velo: REAL;\n\tmin_velo: REAL;\n\tclampPushed: BOOL;\n\t_busy: BOOL;\n\tlightCurtainInstalled : BOOL;\n\tinit_vars: BOOL;\n\t_maintenanceMove: BOOL;\nEND_VAR\nVAR PERSISTENT\n\tfactoryHomeJaw: BOOL;\nEND_VAR","LineInfoPersistence":"(string)d585d444-6487-4bc0-ab97-1928a8635fd9_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)14338","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}