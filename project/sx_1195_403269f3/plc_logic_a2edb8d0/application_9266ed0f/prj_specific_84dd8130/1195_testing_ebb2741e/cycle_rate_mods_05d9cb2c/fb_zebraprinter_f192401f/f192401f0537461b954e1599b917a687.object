{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)f192401f-0537-461b-954e-1599b917a687","ParentGuid":"(Guid)9266ed0f-7f1e-4370-8ffa-55b419b1a46d","Name":"(string)FB_ZebraPrinter","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)05d9cb2c-8471-499f-ab7d-d2b7178f1a1f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: FB_ZebraPrinter\n//    Description: This program manages the aspects of a (Zebra) printer\n//    Created by: Ben Hess\n//    Created Date: April 2nd, 2018\nSUPER^();\n\n_hasLabel := dataReadyInput OR simulateIO OR dryCycleEnable;\n_stateString := TO_STRING(state);\nendOfPrintONS(CLK := endOfPrintInput);\n//Report as ready if mode is auto and we're not faulted\n_ready := NOT (state = eZebraPrinterStates.Fault);\n\nprinterRibbonMovingTimer1(PT := printerRibbonMovingSettleTime);\nprinterRibbonMovingTimer2(PT := printerRibbonMovingSettleTime);\n\n\nprintHeadDebounce(PT:= printHeadDebounceSetting, Q=> printHeadDebounced);\nraisePrintHeadDelay();\n\nwaitingForPrinter := state = eZebraPrinterStates.WaitingForData;\n// printHeadLowerFaultTimer(IN := lowerPrintHeadOutput AND NOT printHeadDownInput);\n// printHeadRaiseFaultTimer(IN := NOT lowerPrintHeadOutput AND printHeadDownInput);\n// \n// IF printHeadLowerFaultTimer.Q AND THIS^.OptionActive THEN\n// \tprintHeadFailToLower.Trigger();\n// END_IF\n// \n// IF printHeadRaiseFaultTimer.Q AND THIS^.OptionActive THEN\n// \tprintHeadFailToRaise.Trigger();\n// END_IF\n\nIF NOT serviceRequiredInput AND eStopOK AND THIS^.OptionActive THEN\n\tserviceRequired.Trigger();\nEND_IF\n\nresetONS(CLK := _reset);\nIF enableONS.Q OR resetONS.Q THEN\n    state := eZebraPrinterStates.Idle;\n\t_reset := FALSE;\n\t_beginPrinting := FALSE;\n\t_stopPrinting := FALSE;\n\tprintHeadDebounced := FALSE;\n\tribbonUnwindRunOutput := FALSE;\n\tlowerPrintHeadOutput := FALSE;\n\tprinterRibbonMovingTimer1.IN := FALSE;\n\tprinterRibbonMovingTimer2.IN := FALSE;\nEND_IF\n\nIF NOT THIS^.OptionEnabled THEN\n    state := eZebraPrinterStates.Fault;\n\tribbonUnwindRunOutput := FALSE;\n\tlowerPrintHeadOutput := FALSE;\nEND_IF\n//code to add timer to track duration in states\nstateTimer(PT:=T#10000S);\nIF clr THEN\n\tspeedTracking:=speedTracking_mt;\n\tclr:=FALSE;\nEND_IF\nIF state  = laststate THEN\n\tstateTimer.IN := TRUE;\nELSIF state  <> laststate THEN\n\tstateTimer.IN := FALSE;\n\tIF state =0 THEN\n\t\tcount_index := count_index +1;\n\tEND_IF\n\tlaststate:=state;\nEND_IF\nspeedTracking[state_index][count_index] := stateTimer.ET;\n\nIF count_index >=20 THEN\n\tcount_index :=0;\nEND_IF\n//End modded code\n//State machine for the printer\nCASE state OF\n    eZebraPrinterStates.Idle :    \n\t\tstate_index:=0;                        \n\t\t// Go to waiting for data if printer is ready\n        ribbonUnwindRunOutput := FALSE;\n\t\tstartPrintOutput := FALSE;\n\t\tprintHeadDebounce.IN := FALSE;\n\t\tprintHeadDebounced := FALSE;\n\t\traisePrintHeadDelay.IN := FALSE;\n\t\tprinterRibbonMovingTimer1.IN := FALSE;\n\t\tprinterRibbonMovingTimer2.IN := FALSE;\n\t\t_printing := FALSE;\n\t\t_stopPrinting := FALSE;\n\t\t_printDone := FALSE;\n\t\tIF _beginPrinting AND THIS^.OptionEnabled THEN\n\t\t\t\n\t\t\tIF NOT dataReadyInput THEN\n\t\t\t\tstate := eZebraPrinterStates.WaitingForData;\n\t\t\tELSE\n\t\t\t\tstate := eZebraPrinterStates.DataReady;\n\t\t\tEND_IF\n\t\tEND_IF\n\t\t\n        IF serviceRaisePrintHead THEN\n\t\t\tlowerPrintHeadOutput := FALSE;\n\t\tELSIF serviceLowerPrintHead THEN\n\t\t\tlowerPrintHeadOutput := TRUE;\n\t\tEND_IF\n                                        \n    eZebraPrinterStates.WaitingForData:   \n\t\tstate_index:=1;         \n\t\t// If printerDataReady drops out the label data was received\n        IF dataReadyInput OR dryCycleEnable THEN\n            state := eZebraPrinterStates.DataReady;    \n        END_IF\n\t\tIF cancelPrint THEN\n\t\t\tstate := eZebraPrinterStates.Idle;  \n\t\tEND_IF\n                                                \n    eZebraPrinterStates.DataReady:     \n\t\tstate_index:=2;                   \n\t\t// Wait for command to begin printing\n         IF (NOT dataReadyInput AND NOT dryCycleEnable) OR cancelPrint THEN\n\t\t\tstate := eZebraPrinterStates.Idle;\n\t\tEND_IF\n\t\tIF _beginPrinting THEN\n\t\t\t _printing := TRUE;\n             _beginPrinting := FALSE;\n\t\t\t printHeadDebounce.IN := TRUE;\n             lowerPrintHeadOutput :=  NOT dryCycleEnable;\n             ribbonUnwindRunOutput := NOT dryCycleEnable;\n\t\t\t state := eZebraPrinterStates.BeginPrintCycle;\n         END_IF                                    \n            \n    eZebraPrinterStates.BeginPrintCycle:        \n\t\tstate_index:=3;   \n\t\t// Start printing\n        IF printHeadDebounced THEN\n            startPrintOutput := NOT dryCycleEnable;\n            state := eZebraPrinterStates.Printing;\n            printHeadDebounce.IN := FALSE;\n        END_IF                                                    \n                                                              \n    eZebraPrinterStates.Printing:  \n\t\tstate_index:=4;                      \n\t\t// While printing, wait for End of Print signal\t\n\t\tprinterRibbonMovingTimer1.IN := ribbonEncoderPulseInput;\n\t\tprinterRibbonMovingTimer2.IN := NOT ribbonEncoderPulseInput;\n        IF endOfPrintONS.q OR printerRibbonMovingTimer1.Q OR printerRibbonMovingTimer2.Q OR dryCycleEnable OR _stopPrinting THEN\n            startPrintOutput := FALSE;\n\t\t\t_stopPrinting := FALSE;\n\t\t\tribbonUnwindRunOutput := FALSE;\n\t\t\tIF (printerRibbonMovingTimer1.Q OR printerRibbonMovingTimer2.Q) AND NOT dryCycleEnable THEN\n\t\t\t\tribbonFault.Trigger();\n\t\t\tEND_IF\n\t\t\tprinterRibbonMovingTimer1.IN := FALSE;\n\t\t\tprinterRibbonMovingTimer2.IN := FALSE;\n\t\t\traisePrintHeadDelay.IN := TRUE;\n            state := eZebraPrinterStates.DonePrinting;    \n        END_IF\n                                        \n    eZebraPrinterStates.DonePrinting: \n\t\tstate_index:=5;             \n\t\t// Done printing, feed a little more through\n\t\tIF raisePrintHeadDelay.Q THEN\n\t\t\traisePrintHeadDelay.IN := FALSE;\n\t\t\tlowerPrintHeadOutput := FALSE;\n\t\t\t_printing := FALSE;\n\t\t\t_printDone := TRUE;\n\t\t\tstate := eZebraPrinterStates.Idle;\n\t\tEND_IF                       \n                                        \n    eZebraPrinterStates.Fault:\n\t\tstate_index:=6;              \t\t\n\t\t// Clear status on fault\n\t\t_printing := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t          \n                                        \nEND_CASE","LineInfoPersistence":"(string)f192401f-0537-461b-954e-1599b917a687_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_ZebraPrinter EXTENDS FB_BasicPrinter\nVAR_INPUT\n\tprintHeadDebounceSetting : TIME := T#0MS;\n\tprintHeadDownInput : BOOL;\n\tdataReadyInput : BOOL;\n\tserviceRequiredInput : BOOL;\n\teStopOK : BOOL;\n\tribbonLowInput : BOOL;\n\tendOfPrintInput : BOOL;\n\tribbonEncoderPulseInput : BOOL;\n\tserviceRaisePrintHead : BOOL;\n\tserviceLowerPrintHead : BOOL;\n\tcancelPrint : BOOL;\n\tdryCycleEnable : BOOL;\nEND_VAR\nVAR_OUTPUT\n\tserviceRequired : FB_Fault(name := Standard.CONCAT(_prefix,'Service Required'), faultID := faultMessageList.PRINTER_SERVICE_REQUIRED);\n\tribbonFault : FB_Fault(name := 'Printer Ribbon Fault', faultID := faultMessageList.PRINTER_RIBBON_FAULT);\n\tprintHeadFailToLower : FB_Fault(name := 'Printhead Failed to Lower', faultID := faultMessageList.PRINT_HEAD_FAILED_LOWER);\n\tprintHeadFailToRaise : FB_Fault(name := 'Printhead Failed to Raise', faultID := faultMessageList.PRINT_HEAD_FAILED_RAISE);\n\tprintHeadDebounced : BOOL;\n\tstartPrintOutput : BOOL;\n\tribbonUnwindRunOutput : BOOL;\n\tlowerPrintHeadOutput : BOOL;\n\twaitingForPrinter : BOOL;\nEND_VAR\nVAR\n\tprintHeadDebounce : TON;\n\tprintHeadLowerFaultTimer : Standard.TON := (PT := T#1S);\n\tprintHeadRaiseFaultTimer : Standard.TON := (PT := T#1S);\n\traisePrintHeadDelay  : Standard.TON := (PT := T#75MS);\n\tendOfPrintONS : Standard.F_TRIG();\n\tprinterRibbonMovingTimer1 : Standard.TON;\n\tprinterRibbonMovingTimer2 : Standard.TON;\n\tprinterRibbonMovingSettleTime : TIME := T#450MS;\n\t\n\t//variables for the state timer\n\tstateTimer:TON;\n\tlaststate: INT;\n\tcount_index :INT :=0;\n\tclr:BOOL:=FALSE;\n\tspeedTracking : ARRAY[0..20] OF ARRAY[0..20] OF TIME;\n\tspeedTracking_mt : ARRAY[0..20] OF ARRAY[0..20] OF TIME:=[21([21(T#0S)])]; \n\tstate_index : INT:=0;\n\t\nEND_VAR\n","LineInfoPersistence":"(string)f192401f-0537-461b-954e-1599b917a687_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)309","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}