{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)bae1a769-858e-4bb0-8827-79f812f92bb0","ParentGuid":"(Guid)9266ed0f-7f1e-4370-8ffa-55b419b1a46d","Name":"(string)FB_MotorizedLoadPlate","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)05d9cb2c-8471-499f-ab7d-d2b7178f1a1f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_MotorizedIBD()\n//\tDescription: Motorized Independent Bag Deflator\n//\t\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: Tuesday, June 2nd 2020\n\nSUPER^();\n\n{region \"Axis Setup\"}\n// Setup of Motion Commands for passthrough motor axis\nMC_HomeMotor(Axis := loadPlateMotor);\nMC_MoveMotorABS(Axis := loadPlateMotor);\nMC_MoveMotorTorque(Axis := loadPlateMotor);\nMC_MoveMotorINC(Axis := loadPlateMotor);\nMC_ResetMotor(Axis := loadPlateMotor);\nMC_HaltMotor(Axis := loadPlateMotor);\n{endregion}\n\n_readyToLoad := TO_DINT(loadPlateMotor.ActualPosition * 1000) < TO_DINT(raisedSetting * 1000) + 10 AND TO_DINT(loadPlateMotor.ActualPosition * 1000) > TO_DINT(raisedSetting * 1000) - 10;\n_ready := _readyToLoad AND state = eMotorizedLoadPlateStates.Idle;\n_isHomed := loadPlateMotor.isHomed;\n{region \"Timers\"}\n// If homing not complete within reasonable time, error out\nhomeTimeout(PT := homeTimeoutSetting);\n// If reset of motors fails state machine must move on\nresetTimer(IN := state = eMotorizedLoadPlateStates.Resetting);\n// Dwell timer for load shelf\ndwellTimer(PT := TO_TIME(dwellSetting * 1000.0));\n{endregion}\n_stateString := TO_STRING(state);\n// Trigger motor faults from drive\t\t\t\t\t\nIF loadPlateMotor.error AND THIS^.OptionActive THEN\n\tmotorFault.faultTrigger := TRUE;\nELSE \n\tmotorFault.faultTrigger := FALSE;\nEND_IF\n\nIF NOT loadPlateMotor.commStatus AND THIS^.OptionActive THEN\n\tmotorCommFault.faultTrigger := TRUE;\nELSE\n\tmotorCommFault.faultTrigger := FALSE;\nEND_IF\n\nIF _reset THEN\n\tstate := eMotorizedLoadPlateStates.Reset;\n\t_reset := FALSE;\nEND_IF\n\n//code to add timer to track duration in states\nstateTimer(PT:=T#10000S);\nIF clr THEN\n\tspeedTracking:=speedTracking_mt;\n\tclr:=FALSE;\nEND_IF\nIF state  = laststate THEN\n\tstateTimer.IN := TRUE;\nELSIF state  <> laststate THEN\n\tstateTimer.IN := FALSE;\n\tIF state =0 THEN\n\t\tcount_index := count_index +1;\n\tEND_IF\n\tlaststate:=state;\nEND_IF\nspeedTracking[state_index][count_index] := stateTimer.ET;\n\nIF count_index >=20 THEN\n\tcount_index :=0;\nEND_IF\n//End modded code\n\nCASE state OF\n\t\n\teMotorizedLoadPlateStates.Idle:\n\t\tstate_index:=0;\n\t \t// Idle State.\n\t\tIF _homeNow THEN\n\t\t\t_homeNow := FALSE;\n\t\t\tIF THIS^.OptionActive THEN\n\t\t\t   state := eMotorizedLoadPlateStates.Home;\n\t\t  \tEND_IF\n\t\tEND_IF\n\t\t\n\t\tIF raiseShelfPB OR _makeReady THEN\n\t\t\t_makeReady := FALSE;\n\t\t\tIF THIS^.OptionActive THEN\n\t\t\t   state := eMotorizedLoadPlateStates.Raise;\n\t\t  \tEND_IF\n\t\tELSIF _beginDischarge OR lowerShelfPB THEN\n\t\t\tIF THIS^.OptionActive THEN\n\t\t\t   state := eMotorizedLoadPlateStates.Lower;\n\t\t  \tEND_IF\n\t\tEND_IF\n\t\t\t\t\t\t\n\t\tMC_ResetMotor.Execute := FALSE;\n\t\tIF loadPlateMotor.isHomed\n\t\t\tAND NOT failedToHome.active\n\t\t\tAND NOT motorFault.active\n\t\t\tAND NOT motorCommFault.active\n\t\t\tAND _readyToLoad\n\t\tTHEN\n\t\t\t_ready := TRUE;\n\t\tELSE\n\t\t\t_ready := FALSE;\n\t\tEND_IF\n\t\t\t\t\t\n\teMotorizedLoadPlateStates.Home:\t\n\t\tstate_index:=1;\n\t\t// Normal Homing - not factory homing.\n\t\thomeTimeout.IN := TRUE;\n\t\t// Move the IBD to zero\n\t\tMC_HomeMotor.Execute := TRUE;\n\t\tstate := eMotorizedLoadPlateStates.Homing;\n\t\t\t\t\t\t\t\n\teMotorizedLoadPlateStates.Homing:\n\t\tstate_index:=2;\t\t\n\t\t// When ZHomed, Move out to Open s\n\t\tIF MC_HomeMotor.Done THEN\t\t\t\t\n\t\t\tMC_HomeMotor.Execute := FALSE;\n\t\t\tstate := eMotorizedLoadPlateStates.Raise;\n\t\tELSIF MC_HomeMotor.Error OR homeTimeout.Q THEN\n\t\t\tMC_HomeMotor.Execute := FALSE;\n\t\t\tfailedToHome.Trigger();\n\t\t\tstate := eMotorizedLoadPlateStates.Faulting;\n\t\tEND_IF\n\t\t\t\n\teMotorizedLoadPlateStates.Raise:\n\t\tstate_index:=3;\t\n\t\t// Move jaw out to passthrough\n\t\tMC_MoveMotorABS.Position := raisedSetting;\n\t\tMC_MoveMotorABS.Velocity := raiseVelo;\n\t\tMC_MoveMotorABS.Acceleration := raiseAccel;\n\t\tMC_MoveMotorABS.Deceleration := raiseDecel;\n\t\tMC_MoveMotorABS.Execute := TRUE;\n\t\tstate := eMotorizedLoadPlateStates.Raising;\n\t\t\n\teMotorizedLoadPlateStates.Raising:\n\t\tstate_index:=4;\n\t\t// wait for jaw to report open\n\t\tIF MC_MoveMotorABS.Done THEN\n\t\t\tMC_MoveMotorABS.Execute := FALSE;\n\t\t\tstate := eMotorizedLoadPlateStates.Idle;\n\t\tELSIF MC_MoveMotorABS.Error THEN\n\t\t\tMC_MoveMotorABS.Execute := FALSE;\n\t\t\t//failedToOpen.Trigger();\n\t\t\tstate := eMotorizedLoadPlateStates.Faulting;\n\t\tEND_IF\n\n\teMotorizedLoadPlateStates.Lower:\t\n\t\tstate_index:=5;\n\t\t// Start Moving jaw to closed position\n\t\tIF interlocks = 0 THEN\n\t\t\tMC_MoveMotorABS.Position := loweredSetting;\n\t\t\tMC_MoveMotorABS.Velocity := lowerVelo;\n\t\t\tMC_MoveMotorABS.Acceleration := lowerAccel;\n\t\t\tMC_MoveMotorABS.Deceleration := lowerDecel;\n\t\t\tMC_MoveMotorABS.Execute := TRUE;\n\t\t\tstate := eMotorizedLoadPlateStates.Lowering;\n\t\tEND_IF\n\teMotorizedLoadPlateStates.Lowering:\n\t\tstate_index:=6;\n\t\t// Wait for jaw closed indication\n\t\tIF MC_MoveMotorABS.Done THEN\n\t\t\tMC_MoveMotorABS.Execute := FALSE;\n\t   \t\tIF NOT _beginDischarge THEN\n\t\t   \t\tstate := eMotorizedLoadPlateStates.Idle;\n\t\t   \tELSE\n\t\t   \t\tdwellTimer.IN := TRUE;\n\t\t   \t\tstate := eMotorizedLoadPlateStates.Lowered;\n\t \t \tEND_IF\n\t\t\t\n\t\tELSIF MC_MoveMotorABS.Error THEN\n\t\t\tMC_MoveMotorABS.Execute := FALSE;\n\t\t\tstate := eMotorizedLoadPlateStates.Faulting;\n\t\tEND_IF\n   \n\teMotorizedLoadPlateStates.Lowered:\n\t\tstate_index:=7;\n\t\t// Stay lowered for dwell time then move shelf back up\n   \t\tIF dwellTimer.Q THEN\n\t\t\tdwellTimer.IN := FALSE;\n\t  \t\t_beginDischarge := FALSE;\n\t\t\tstate := eMotorizedLoadPlateStates.Raise;\t   \n\t\tEND_IF\t\t\t\n\t\t\n\teMotorizedLoadPlateStates.Faulting:\n\t\tstate_index:=8;\n\t\t// Free up motors on a fault\n\t\tMC_HaltMotor.Execute := TRUE;\n\t\tIF MC_HaltMotor.Done OR  MC_HaltMotor.Error THEN\n\t\t\tstate := eMotorizedLoadPlateStates.Faulted;\n\t\tEND_IF\n\t\t\n\teMotorizedLoadPlateStates.Reset:\n\t\tstate_index:=9;\n\t\t//  Send reset to motors if they're faulted\n\t\t\n\t\tMC_ResetMotor.Execute := TRUE;\n\t\tMC_HomeMotor.Execute := FALSE;\n\t\t// resetPassthoughMotor.Execute := FALSE;\n\t\tMC_MoveMotorABS.Execute := FALSE;\n\t\tMC_MoveMotorINC.Execute := FALSE;\n\t\tMC_HaltMotor.Execute := FALSE;\n\t\tMC_MoveMotorTorque.Execute := FALSE;\n\t\thomeTimeout.IN := FALSE;\n   \t\tdwellTimer.IN := FALSE;\n\t\t_homeNow := FALSE;\n\t\t_beginDischarge := FALSE;\n\t\tstate := eMotorizedLoadPlateStates.Resetting;\n\n\teMotorizedLoadPlateStates.Resetting:\n\t\tstate_index:=10;\n\t\t//\n\t\tIF NOT loadPlateMotor.Error OR resetTimer.Q THEN\n\t\t\tMC_ResetMotor.Execute := FALSE;\n\t\t\tstate := eMotorizedLoadPlateStates.Idle;\n\t\tEND_IF\nEND_CASE","LineInfoPersistence":"(string)bae1a769-858e-4bb0-8827-79f812f92bb0_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FINAL FB_MotorizedLoadPlate EXTENDS FB_BaseComponent IMPLEMENTS IHomable, IRetractingLoadPlate\nVAR_INPUT\n\tlowerVelo : REAL := 10;\t\t\t\t\t\t\t\t\t\t\t// Motor Velocity\n\tlowerAccel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t// Motor Acceleration\n\tlowerDecel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t// Motor Deceleration\n\traiseVelo : REAL := 10;\t\t\t\t\t\t\t\t\t\t\t// Motor Velocity\n\traiseAccel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t// Motor Acceleration\n\traiseDecel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t// Motor Deceleration\n\thomeTimeoutSetting : TIME := T#20S;\t\t\t\t\t\t\t\t// Timeout for homing attempt\n\traisedSetting : REAL := 3.0;\n\tloweredSetting : REAL := 0;\n\tdwellSetting : REAL := 1.0;\n\traiseShelfPB : BOOL;\n\tlowerShelfPB : BOOL;\n\tinterlocks : DINT :=0;\nEND_VAR\nVAR_OUTPUT\n\tfailedToHome : FB_Fault(name := CONCAT(_prefix, 'Failed to Home'), faultID := faultMessageList.LOAD_PLATE_FAILED_HOME);\n\tmotorFault : FB_Fault(name := CONCAT(_prefix, 'Motor Fault'), faultID := faultMessageList.LOAD_PLATE_MOTOR_FAULT);\n\tmotorCommFault : FB_Fault(name := CONCAT(_prefix, 'Motor Comm Fault'), faultID := faultMessageList.LOAD_PLATE_MOTOR_COM_FAULT);\n\tactualPosition : REAL;\nEND_VAR\nVAR\n\t_homeNow : BOOL;\n\t_readyToLoad : BOOL;\n\t_beginDischarge : BOOL;\n\t_isHomed : BOOL;\n\tMC_HomeMotor : MC_Home;\n\tMC_MoveMotorABS : MC_MoveAbsolute;\n\tMC_MoveMotorTorque : MC_MoveAbsolutePush;\n\tMC_MoveMotorINC : MC_MoveRelative;\n\tMC_ResetMotor : MC_Reset;\n\tMC_HaltMotor : MC_Halt;\n\thomeTimeout : Standard.TON;\n\tfailedToOpenTimer : Standard.TON;\n\tdwellTimer : Standard.TON;\n\tmotionFaultTimeOffset : TIME := T#200MS;\n\tresetTimer: TON := (PT := T#2S);\n\tstate : eMotorizedLoadPlateStates;\n\t\t//variables for the state timer\n\tstateTimer:TON;\n\tlaststate: INT;\n\tcount_index :INT :=0;\n\tclr:BOOL:=FALSE;\n\tspeedTracking : ARRAY[0..20] OF ARRAY[0..20] OF TIME;\n\tspeedTracking_mt : ARRAY[0..20] OF ARRAY[0..20] OF TIME:=[21([21(T#0S)])]; \n\tstate_index : INT:=0;\nEND_VAR\nVAR_IN_OUT\n\tloadPlateMotor : Axis_REF;\nEND_VAR\n","LineInfoPersistence":"(string)bae1a769-858e-4bb0-8827-79f812f92bb0_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)4711","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}