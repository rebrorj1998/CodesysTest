{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)1506e032-04fd-4989-b1c4-0a9a93cee431","ParentGuid":"(Guid)9266ed0f-7f1e-4370-8ffa-55b419b1a46d","Name":"(string)FB_1195_Test_BagDelivery","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)05d9cb2c-8471-499f-ab7d-d2b7178f1a1f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)SUPER^();\n\n{region \"Axis Setup\"}\n// Setup of Motion Commands for Bag Delivery motor axis\nMC_MoveBagDelivery(Axis := bagDeliveryMotor);\nMC_HaltBagDelivery(Axis := bagDeliveryMotor);\nMC_ResetBagDelivery(Axis := bagDeliveryMotor);\nMC_PowerUpBagDelivery(\n\tenable := F_EtherCatSlaveCommsRunning(state := AZD4A_KED.wState) AND NOT (state = eBagDeliveryStates.Resetting), \n\taxis := bagDeliveryMotor\n);\n{endregion}\nmoveBagDeliveryTimeout();\n// If reset of motors fails state machine must move on\n_resetTimer(IN := state = eBagDeliveryStates.Resetting);\n//moveBagDeliveryTimeout();\n\t \nIF _reset THEN\n\tstate := eBagDeliveryStates.Reset;\n\tnextState := eBagDeliveryStates.Idle;\n\tClearStatus();\n\tMC_ResetBagDelivery.Execute := FALSE;\n\t_reset := FALSE;\nEND_IF\nstateWatch(state:= state, trackingEnable := TRUE,cntUp := BagFeedDone);\n//code to add timer to track duration in states\n// stateTimer(PT:=T#10000S);\n// IF clr THEN\n// \tspeedTracking:=speedTracking_mt;\n// \tclr:=FALSE;\n// END_IF\n// IF state  = laststate THEN\n// \tstateTimer.IN := TRUE;\n// ELSIF state  <> laststate THEN\n// \tstateTimer.IN := FALSE;\n// \tIF state =0 THEN\n// \t\tcount_index := count_index +1;\n// \tEND_IF\n// \tlaststate:=state;\n// END_IF\n// speedTracking[state_index][count_index] := stateTimer.ET;\n// \n// IF count_index >=20 THEN\n// \tcount_index :=0;\n// END_IF\n//End modded code\n_stateString := TO_STRING(state);\n_ready := state = 0 AND bagDeliveryMotor.CommStatus AND NOT bagDeliveryMotor.Error;\nIF bagDeliveryMotor.Error THEN\n\tmotorFault.faultTrigger := TRUE;\nELSE \n\tmotorFault.faultTrigger := FALSE;\nEND_IF\n\nIF NOT bagDeliveryMotor.CommStatus THEN\n\tmotorCommFault.faultTrigger := TRUE;\nELSE\n\tmotorCommFault.faultTrigger := FALSE;\nEND_IF\n\nIF trapezoidalPercent <= 0 THEN\n\ttrapezoidalPercent := 0.1;\nEND_IF\nCASE state OF\n\t\n\teBagDeliveryStates.Idle:\t\t\n\t\t\tstate_index := 0;\n\t\t\tMC_ResetBagDelivery.Execute := FALSE;\n\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n\t\t\t// Idle\n\t\t\tIF _feedBagOut THEN\n\t\t\t\tstate := eBagDeliveryStates.FeedBagOut;//10\n\t\t\t\t_feedBagOut := FALSE;\n\t\t\t\tClearStatus();\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _feedToReverseOffset THEN\n\t\t\t\tstate := eBagDeliveryStates.FeedToReverseOffset;\n\t\t\t\t_feedToReverseOffset := FALSE;\n\t\t\t\tClearStatus();\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _feedToPrintOffset THEN\n\t\t\t\tstate := eBagDeliveryStates.FeedToPrintOffset;//20;\n\t\t\t\t_feedToPrintOffset := FALSE;\n\t\t\t\tClearStatus();\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _reverseToSeparate THEN\n\t\t\t\t_bagSeparated := FALSE;\n\t\t\t\tstate := eBagDeliveryStates.FeedToPhotoEye;//50;\n\t\t\t\t_reverseToSeparate := FALSE;\n\t\t\t\tClearStatus();\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _feedAtPrintSpeed THEN\n\t\t\t\tstate := eBagDeliveryStates.FeedAtPrintSpeed;//40;\n\t\t\t\t_feedAtPrintSpeed := FALSE;\n\t\t\t\tClearStatus();\n\t\t\tEND_IF\n\t\t\tIF _makeReady THEN \n\t\t\t\tIF (NOT bagPresent AND NOT HMIData.dryCycleEnable)THEN\n\t\t\t\t\tstate:= eBagDeliveryStates.Cleanup;//100;\n\t\t\t\tEND_IF\n\t\t\t\t_makeReady := FALSE;\n\t\t\tEND_IF\n\n\teBagDeliveryStates.FeedBagOut:\t\t// Feed bag out state was 10\n\t\t\tstate_index := 5;\n\t\t\tMC_MoveBagDelivery.Acceleration := AxisData.FilmFeedForwardMotionProfile.acceleration;\n\t\t\tMC_MoveBagDelivery.Deceleration := AxisData.FilmFeedForwardMotionProfile.deceleration;\n\t\t\tMC_MoveBagDelivery.Velocity := feedSpeed;\n\t\t\tMC_MoveBagDelivery.currentLimit := 100;\n\t\t\tMC_MoveBagDelivery.Distance := remainingLength;\n\t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(remainingLength, feedSpeed, 2000);\n\t\t\t//moveBagDeliveryTimeout.IN := TRUE;\n\t\t\tMC_MoveBagDelivery.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feeding Bag Out'));\n\t\t\tstate := eBagDeliveryStates.WaitingForMoveCompletion;\n\t\t\tnextState := eBagDeliveryStates.FeedingBagOut;\n\t\t\t\n\teBagDeliveryStates.FeedingBagOut:\t\t// Set Bag Feed Done\n\t\t\tstate_index := 6;\n\t\t\t_bagFeedDone := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Bag Feed Done'));\n\t\t\tstate := eBagDeliveryStates.Idle;\n\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\t\t\n\teBagDeliveryStates.FeedToReverseOffset:\t\t\n\t\t\tstate_index := 17;\n\t\t\tMC_MoveBagDelivery.Acceleration := AxisData.FilmFeedForwardMotionProfile.acceleration;\n\t\t\tMC_MoveBagDelivery.Deceleration := AxisData.FilmFeedForwardMotionProfile.deceleration;\n\t\t\tMC_MoveBagDelivery.Velocity := feedSpeed;\n\t\t\tMC_MoveBagDelivery.currentLimit := 100;\n\t\t\tMC_MoveBagDelivery.Distance := -1 * reverseOffset;\n\t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(reverseOffset, feedSpeed, 2000);\n\t\t\t//moveBagDeliveryTimeout.IN := TRUE;\n\t\t\tMC_MoveBagDelivery.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feeding To Reverse Offset Position'));\n\t\t\tstate := eBagDeliveryStates.WaitingForMoveCompletion;\n\t\t\tnextState := eBagDeliveryStates.FeedingToReverseOffset;\n\t\t\t\n\teBagDeliveryStates.FeedingToReverseOffset:\t\t// Set bag at Reverse Offset\n\t\t\tstate_index := 18;\n\t\t\t_bagAtReverseOffset := TRUE;\n\t\t\tremainingLength := remainingLength + reverseOffset;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feed to Reverse Offset Done'));\n\t\t\tstate := eBagDeliveryStates.Idle;\n\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\n\teBagDeliveryStates.FeedToPrintOffset:\t\t// Feed bag to print offset.  If already at print offset from reversing, continue\n\t\t\tstate_index := 7;\n\t\t\tIF bagReversedToPrintOffset or printOffset = 0 THEN\n\t\t\t\tstate := eBagDeliveryStates.FeedingToPrintOffset;\n\t\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\t\t\tbagReversedToPrintOffset := FALSE;\n\t\t\tELSE\n\t\t\t\tMC_MoveBagDelivery.Acceleration := AxisData.FilmFeedPrintOffsetMotionProfile.acceleration;\n\t\t\t\tMC_MoveBagDelivery.Deceleration := AxisData.FilmFeedPrintOffsetMotionProfile.deceleration;\n\t\t\t\tMC_MoveBagDelivery.Velocity := feedSpeed;\n\t\t\t\tMC_MoveBagDelivery.currentLimit := 100;\n\t\t\t\tMC_MoveBagDelivery.Distance := printOffset;\n\t\t\t\tremainingLength := remainingLength - printOffset;\n\t\t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(printOffset, feedSpeed, 2000);\n\t\t\t\t//moveBagDeliveryTimeout.IN := TRUE;\n\t\t\t\tMC_MoveBagDelivery.Execute := TRUE;\n\t\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feeding Bag to Print Offset'));\n\t\t\t\tstate := eBagDeliveryStates.WaitingForMoveCompletion;\n\t\t\t\tnextState := eBagDeliveryStates.FeedingToPrintOffset;\t\n\t\t\tEND_IF\n\t\n\teBagDeliveryStates.FeedingToPrintOffset: \t// Set Ready For Print\n\t\t\tstate_index := 8;\n\t\t\t_readyForPrint := TRUE;\n\t\t\tstate := eBagDeliveryStates.Idle;\n\t\t\tnextState := eBagDeliveryStates.Idle;\t\n\t\n\teBagDeliveryStates.FeedToPhotoEye: \t// Feed bag if not over photoeye\n\t\t\tstate_index := 9;\n\t\t\tIF NOT bagPresent AND NOT dryCycleEnable THEN\n\t\t\t\tMC_MoveBagDelivery.Acceleration := MC_MoveBagDelivery.Deceleration := (reverseSpeed / trapezoidalPercent);\n\t\t\t\tMC_MoveBagDelivery.Velocity := reverseSpeed;\n\t\t\t\tMC_MoveBagDelivery.currentLimit := 100;\n\t\t\t\tMC_MoveBagDelivery.Distance := maxReverseSetpoint;\n\t\t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(maxReverseSetpoint, reverseSpeed, 2000);\n\t\t\t\t//moveBagDeliveryTimeout.IN := TRUE;\n\t\t\t\tMC_MoveBagDelivery.Execute := TRUE;\n\t\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feed to Photoeye'));\n\t\t\t\tstate := eBagDeliveryStates.FeedingToPhotoEye;\n\t\t\tELSE\n\t\t\t\tstate := eBagDeliveryStates.ReverseToSeperate;\n\t\t\tEND_IF\n\t\t\t\n\teBagDeliveryStates.FeedingToPhotoEye: \t// If move completed then fault, otherwise stop at photoeye\n\t\t\tstate_index := 10;\n\t\t\tIF MC_MoveBagDelivery.Done THEN\n\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\tnoBagOverEye.Trigger();\n\t\t\t\tClearStatus();\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF MC_MoveBagDelivery.Error OR moveBagDeliveryTimeout.Q THEN\n\t\t\t\treverseFault.Trigger();\n\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n\t\t\t\tClearStatus();\n\t\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF bagPresent THEN\n\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n\t\t\t\tbagEdgePhotoeyeSim.in := FALSE;\n\t\t\t\tstate := eBagDeliveryStates.FeedToPhotoEyeDone;\n\t\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n\t\t\t\t\n\t\t\tEND_IF\n\t\t\n\teBagDeliveryStates.FeedToPhotoEyeDone:\t\t// Wait for bag to stop\n\t\t\tstate_index := 11;\n\t\t\tIF MC_HaltBagDelivery.Done THEN\n\t\t\t\tMC_HaltBagDelivery.Execute := FALSE;\n\t\t\t\tstate := eBagDeliveryStates.ReverseToSeperate;\n\t\t\tEND_IF\n\t\n\teBagDeliveryStates.ReverseToSeperate:\t\t// Reverse to Separate\n\t\t\tstate_index := 1;\n\t\t\tMC_MoveBagDelivery.Acceleration := MC_MoveBagDelivery.Deceleration := AxisData.FilmFeedReverseMotionProfile.acceleration;\n\t\t\tMC_MoveBagDelivery.Velocity := reverseSpeed;\n\t\t\tMC_MoveBagDelivery.currentLimit := 100;\n\t\t\tMC_MoveBagDelivery.Distance := maxReverseSetpoint * -1;\n\t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(maxReverseSetpoint, reverseSpeed, 2000);\n\t\t\t//moveBagDeliveryTimeout.IN := TRUE;\n\t\t\tMC_MoveBagDelivery.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Reversing to Photoeye'));\n\t\t\tbagEdgePhotoeyeSim.in := TRUE;\n\t\t\tstate := eBagDeliveryStates.ReversingToSeperate;\n\t\t\t//nextState := eBagDeliveryStates.ReversingToSeperate;\n\t\n\teBagDeliveryStates.ReversingToSeperate:\t\t// Stop bag once edge clears photoeye. If move command finishes that means the bag didn't separate \n\t\t\tstate_index := 2;\n\t\t\tIF MC_MoveBagDelivery.Done AND NOT dryCycleEnable THEN\n\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\tbagFailedToSeparate.Trigger();\n\t\t\t\tClearStatus();\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF MC_MoveBagDelivery.Done AND dryCycleEnable THEN\n\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\tMC_HaltBagDelivery.Execute := FALSE;\n\t\t\t\tbagEdgePhotoeyeSim.in := FALSE;\n\t\t\t\tstate := eBagDeliveryStates.ReversingToSeperateDone;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF MC_MoveBagDelivery.Error OR moveBagDeliveryTimeout.Q THEN\n\t\t\t\treverseFault.Trigger();\n\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n\t\t\t\tClearStatus();\n\t\t\t\tnextState := eBagDeliveryStates.ReversingToSeperateDone;\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF NOT bagPresent AND NOT dryCycleEnable THEN\n\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n\t\t\t\tbagEdgePhotoeyeSim.in := FALSE;\n\t\t\t\tstate := eBagDeliveryStates.ReversingToSeperateDone;\n\t\t\tEND_IF\n\t\t\n\teBagDeliveryStates.ReversingToSeperateDone: \t// Set Bag Reversed\n\t\t\tstate_index := 3;\n\t\t\tIF MC_HaltBagDelivery.Done OR dryCycleEnable THEN\n\t\t\t\tMC_HaltBagDelivery.Execute := FALSE;\n\t\t\t\tremainingLength := bagLength - sealOffset + distanceFromSealBarToBagEdge;\n\t\t\t\t_bagSeparated := TRUE;\n\t\t\t\tstate := eBagDeliveryStates.Idle;\n\t\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\t\tEND_IF\n\t\t\t\n\teBagDeliveryStates.FeedAtPrintSpeed:\t\t// Feed at Print Speed\n\t\t\tstate_index := 12;\n\t\t\tMC_MoveBagDelivery.Acceleration := AxisData.FilmFeedPrintMotionProfile.acceleration;\n\t\t\tMC_MoveBagDelivery.Deceleration := AxisData.FilmFeedPrintMotionProfile.deceleration;\n\t\t\tMC_MoveBagDelivery.Velocity := printSpeed;\n\t\t\tMC_MoveBagDelivery.currentLimit := 100;\n\t\t\tMC_MoveBagDelivery.Distance := printLength + _printerExtraFeedLength;\n\t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(distanceFromNipToBagEdge, reverseSpeed, 2000);\n\t\t\t//moveBagDeliveryTimeout.IN := TRUE;\n\t\t\tMC_MoveBagDelivery.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feeding At Print Speed'));\n\t\t\tremainingLength := remainingLength - printLength - _printerExtraFeedLength;\n\t\t\t_feedBagOut := FALSE;\n\t\t\tprintingNow := TRUE;\n\t\t\tstate := eBagDeliveryStates.WaitingForMoveCompletion;\n\t\t\tnextState := eBagDeliveryStates.FeedBagOut;\n\t\n\teBagDeliveryStates.Cleanup:\t// Cleanup\n\t\t\tstate_index := 5;\n\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\tMC_HaltBagDelivery.Execute := FALSE;\n\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n\t\t\tbagEdgePhotoeyeSim.in := FALSE;\n\t\t\tstate := nextState;\t\t\t\t\n\t\t\t\n\n\t\n\teBagDeliveryStates.WaitingForMoveCompletion: \t// Wait for Move to complete\n\t\t\tstate_index := 4;\n\t\t\tIF MC_MoveBagDelivery.Error OR moveBagDeliveryTimeout.Q THEN\n\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n\t\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n\t\t\t\tClearStatus();\n\t\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF MC_MoveBagDelivery.Done THEN\n\t\t\t\tIF printingNow THEN\n\t\t\t\t\tprinter.StopPrinting();\n\t\t\t\t\tIF printer.PrintDone OR dryCycleEnable THEN\n\t\t\t\t\t\tprintingNow := FALSE;\n\t\t\t\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n\t\t\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\t\t\tstate := nextState;\n\t\t\t\t\tEND_IF\n\t\t\t\tELSE\n\t\t\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n\t\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n\t\t\t\t\tstate := nextState;\n\t\t\t\tEND_IF\n\t\t\tEND_IF\n\t\t\t\n\teBagDeliveryStates.MoveComplete:\t// Set In Position and go back to idle\n\t\t\tstate_index := 13;\n\t\t\tnextState := eBagDeliveryStates.Idle;\n\t\t\tstate := eBagDeliveryStates.Cleanup;\n\t\t\t\n\teBagDeliveryStates.Reset:\t\t//Reset:\n\t\tstate_index := 14;\n\t\t_feedAtPrintSpeed := FALSE;\n\t\t_feedBagOut := FALSE;\n\t\t_feedToPrintOffset := FALSE;\n\t\t_reverseToSeparate := FALSE;\n\t\t\n\t\t//_timeoutTimer.IN := FALSE;\n\t\t//jawTestModeActive := FALSE;\n\t\t\n\t\tMC_MoveBagDelivery.execute := FALSE;\n\t\tMC_HaltBagDelivery.execute := FALSE;\n\t\tMC_ResetBagDelivery.execute := TRUE;\n\t\t//MC_PowerUpBagDelivery.execute := FALSE;\n\t\t\t\t\n\t\t\n\t\tstate := eBagDeliveryStates.Resetting;\n\n\teBagDeliveryStates.Resetting:\t\t//Resetting:\n\t\tstate_index := 15;\n\t\tIF  _resetTimer.Q THEN\n\t\t\tMC_ResetBagDelivery.Execute := FALSE;\t\n\t\t\tstate := eBagDeliveryStates.ResetDone;\n\t\tEND_IF\n\t\t\n\teBagDeliveryStates.ResetDone:\t\t//ResetDone:\n\t\tstate_index := 16;\n \t\tIF bagDeliveryMotor.operational THEN\n \t\t\tstate := eBagDeliveryStates.Cleanup;\n \t\tEND_IF\n\nEND_CASE\n// CASE state OF\n// \t\n// \t0:\t\t\n// \t\t\tstate_index := 0;\n// \t\t\tMC_ResetBagDelivery.Execute := FALSE;\n// \t\t\t// Idle\n// \t\t\tIF _feedBagOut THEN\n// \t\t\t\tstate := 10;\n// \t\t\t\t_feedBagOut := FALSE;\n// \t\t\t\tClearStatus();\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF _feedToPrintOffset THEN\n// \t\t\t\tstate := 20;\n// \t\t\t\t_feedToPrintOffset := FALSE;\n// \t\t\t\tClearStatus();\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF _reverseToSeparate THEN\n// \t\t\t\t_bagSeparated := FALSE;\n// \t\t\t\tstate := 50;\n// \t\t\t\t_reverseToSeparate := FALSE;\n// \t\t\t\tClearStatus();\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF _feedAtPrintSpeed THEN\n// \t\t\t\tstate := 40;\n// \t\t\t\t_feedAtPrintSpeed := FALSE;\n// \t\t\t\tClearStatus();\n// \t\t\tEND_IF\n// \t\t\tIF _makeReady THEN \n// \t\t\t\tIF (NOT bagPresent AND NOT HMIData.dryCycleEnable)THEN\n// \t\t\t\t\tstate:= 100;\n// \t\t\t\tEND_IF\n// \t\t\t\t_makeReady := FALSE;\n// \t\t\tEND_IF\n// \n// \t10:\t\t// Feed bag out\n// \t\t\tstate_index := 5;\n// \t\t\tMC_MoveBagDelivery.Acceleration := MC_MoveBagDelivery.Deceleration := (feedSpeed / trapezoidalPercent);\n// \t\t\tMC_MoveBagDelivery.Velocity := feedSpeed;\n// \t\t\tMC_MoveBagDelivery.currentLimit := 100;\n// \t\t\tMC_MoveBagDelivery.Distance := remainingLength;\n// \t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(remainingLength, feedSpeed, 1000);\n// \t\t\tmoveBagDeliveryTimeout.IN := TRUE;\n// \t\t\tMC_MoveBagDelivery.Execute := TRUE;\n// \t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feeding Bag Out'));\n// \t\t\tstate := 101;\n// \t\t\tnextState := 11;\n// \t\t\t\n// \t11:\t\t// Set Bag Feed Done\n// \t\t\tstate_index := 6;\n// \t\t\t_bagFeedDone := TRUE;\n// \t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Bag Feed Done'));\n// \t\t\tstate := 0;\n// \t\t\tnextState := 0;\n// \t\n// \t20:\t\t// Feed bag to print offset.  If already at print offset from reversing, continue\n// \t\t\tstate_index := 7;\n// \t\t\tIF bagReversedToPrintOffset or printOffset = 0 THEN\n// \t\t\t\tstate := 21;\n// \t\t\t\tnextState := 0;\n// \t\t\t\tbagReversedToPrintOffset := FALSE;\n// \t\t\tELSE\n// \t\t\t\tMC_MoveBagDelivery.Acceleration := MC_MoveBagDelivery.Deceleration := (feedSpeed / trapezoidalPercent);\n// \t\t\t\tMC_MoveBagDelivery.Velocity := feedSpeed;\n// \t\t\t\tMC_MoveBagDelivery.currentLimit := 100;\n// \t\t\t\tMC_MoveBagDelivery.Distance := printOffset;\n// \t\t\t\tremainingLength := remainingLength - printOffset;\n// \t\t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(printOffset, feedSpeed, 1000);\n// \t\t\t\tmoveBagDeliveryTimeout.IN := TRUE;\n// \t\t\t\tMC_MoveBagDelivery.Execute := TRUE;\n// \t\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feeding Bag to Print Offset'));\n// \t\t\t\tstate := 101;\n// \t\t\t\tnextState := 21;\t\n// \t\t\tEND_IF\n// \t\n// \t21: \t// Set Ready For Print\n// \t\t\tstate_index := 8;\n// \t\t\t_readyForPrint := TRUE;\n// \t\t\tstate := 0;\n// \t\t\tnextState := 0;\t\n// \t\n// \t50: \t// Feed bag if not over photoeye\n// \t\t\tstate_index := 9;\n// \t\t\tIF NOT bagPresent AND NOT dryCycleEnable THEN\n// \t\t\t\tMC_MoveBagDelivery.Acceleration := MC_MoveBagDelivery.Deceleration := (reverseSpeed / trapezoidalPercent);\n// \t\t\t\tMC_MoveBagDelivery.Velocity := reverseSpeed;\n// \t\t\t\tMC_MoveBagDelivery.currentLimit := 100;\n// \t\t\t\tMC_MoveBagDelivery.Distance := maxReverseSetpoint;\n// \t\t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(maxReverseSetpoint, reverseSpeed, 1000);\n// \t\t\t\tmoveBagDeliveryTimeout.IN := TRUE;\n// \t\t\t\tMC_MoveBagDelivery.Execute := TRUE;\n// \t\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feed to Photoeye'));\n// \t\t\t\tstate := 51;\n// \t\t\tELSE\n// \t\t\t\tstate := 30;\n// \t\t\tEND_IF\n// \t\t\t\n// \t51: \t// If move completed then fault, otherwise stop at photoeye\n// \t\t\tstate_index := 10;\n// \t\t\tIF MC_MoveBagDelivery.Done THEN\n// \t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\tnoBagOverEye.Trigger();\n// \t\t\t\tClearStatus();\n// \t\t\t\tstate := 100;\n// \t\t\t\tnextState := 0;\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF MC_MoveBagDelivery.Error OR moveBagDeliveryTimeout.Q THEN\n// \t\t\t\treverseFault.Trigger();\n// \t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n// \t\t\t\tClearStatus();\n// \t\t\t\tnextState := 0;\n// \t\t\t\tstate := 100;\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF bagPresent THEN\n// \t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n// \t\t\t\tbagEdgePhotoeyeSim.in := FALSE;\n// \t\t\t\tstate := 52;\n// \t\t\t\t\n// \t\t\tEND_IF\n// \t\t\n// \t52:\t\t// Wait for bag to stop\n// \t\t\tstate_index := 11;\n// \t\t\tIF MC_HaltBagDelivery.Done THEN\n// \t\t\t\tMC_HaltBagDelivery.Execute := FALSE;\n// \t\t\t\tstate := 30;\n// \t\t\tEND_IF\n// \t\n// \t30:\t\t// Reverse to Separate\n// \t\t\tstate_index := 1;\n// \t\t\tMC_MoveBagDelivery.Acceleration := MC_MoveBagDelivery.Deceleration := (reverseSpeed / trapezoidalPercent);\n// \t\t\tMC_MoveBagDelivery.Velocity := reverseSpeed;\n// \t\t\tMC_MoveBagDelivery.currentLimit := 100;\n// \t\t\tMC_MoveBagDelivery.Distance := maxReverseSetpoint * -1;\n// \t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(maxReverseSetpoint, reverseSpeed, 1000);\n// \t\t\tmoveBagDeliveryTimeout.IN := TRUE;\n// \t\t\tMC_MoveBagDelivery.Execute := TRUE;\n// \t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Reversing to Photoeye'));\n// \t\t\tbagEdgePhotoeyeSim.in := TRUE;\n// \t\t\tstate := 31;\n// \t\t\t//nextState := 31;\n// \t\n// \t31:\t\t// Stop bag once edge clears photoeye. If move command finishes that means the bag didn't separate \n// \t\t\tstate_index := 2;\n// \t\t\tIF MC_MoveBagDelivery.Done AND NOT dryCycleEnable THEN\n// \t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\tbagFailedToSeparate.Trigger();\n// \t\t\t\tClearStatus();\n// \t\t\t\tstate := 100;\n// \t\t\t\tnextState := 0;\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF MC_MoveBagDelivery.Done AND dryCycleEnable THEN\n// \t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\tMC_HaltBagDelivery.Execute := FALSE;\n// \t\t\t\tbagEdgePhotoeyeSim.in := FALSE;\n// \t\t\t\tstate := 32;\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF MC_MoveBagDelivery.Error OR moveBagDeliveryTimeout.Q THEN\n// \t\t\t\treverseFault.Trigger();\n// \t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n// \t\t\t\tClearStatus();\n// \t\t\t\tnextState := 32;\n// \t\t\t\tstate := 100;\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF NOT bagPresent AND NOT dryCycleEnable THEN\n// \t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n// \t\t\t\tbagEdgePhotoeyeSim.in := FALSE;\n// \t\t\t\tstate := 32;\n// \t\t\tEND_IF\n// \t\t\n// \t32: \t// Set Bag Reversed\n// \t\t\tstate_index := 3;\n// \t\t\tIF MC_HaltBagDelivery.Done OR dryCycleEnable THEN\n// \t\t\t\tMC_HaltBagDelivery.Execute := FALSE;\n// \t\t\t\tremainingLength := bagLength - sealOffset + distanceFromSealBarToBagEdge;\n// \t\t\t\t_bagSeparated := TRUE;\n// \t\t\t\tstate := 0;\n// \t\t\t\tnextState := 0;\n// \t\t\tEND_IF\n// \t\t\t\n// \t40:\t\t// Feed at Print Speed\n// \t\t\tstate_index := 12;\n// \t\t\tMC_MoveBagDelivery.Acceleration := MC_MoveBagDelivery.Deceleration := (printSpeed / trapezoidalPercent);\n// \t\t\tMC_MoveBagDelivery.Velocity := printSpeed;\n// \t\t\tMC_MoveBagDelivery.currentLimit := 100;\n// \t\t\tMC_MoveBagDelivery.Distance := printLength + _printerExtraFeedLength;\n// \t\t\tmoveBagDeliveryTimeout.PT := MoveTimeoutCalc(distanceFromNipToBagEdge, reverseSpeed, 1000);\n// \t\t\tmoveBagDeliveryTimeout.IN := TRUE;\n// \t\t\tMC_MoveBagDelivery.Execute := TRUE;\n// \t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Feeding At Print Speed'));\n// \t\t\tremainingLength := remainingLength - printLength - _printerExtraFeedLength;\n// \t\t\t_feedBagOut := FALSE;\n// \t\t\tprintingNow := TRUE;\n// \t\t\tstate := 101;\n// \t\t\tnextState := 10;\n// \t\n// \t100:\t// Cleanup\n// \t\t\tstate_index := 5;\n// \t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\tMC_HaltBagDelivery.Execute := FALSE;\n// \t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n// \t\t\tbagEdgePhotoeyeSim.in := FALSE;\n// \t\t\tstate := nextState;\t\t\t\t\n// \t\t\t\n// \n// \t\n// \t101: \t// Wait for Move to complete\n// \t\t\tstate_index := 4;\n// \t\t\tIF MC_MoveBagDelivery.Error OR moveBagDeliveryTimeout.Q THEN\n// \t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\tMC_HaltBagDelivery.Execute := TRUE;\n// \t\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n// \t\t\t\tClearStatus();\n// \t\t\t\tnextState := 0;\n// \t\t\t\tstate := 100;\n// \t\t\tEND_IF\n// \t\t\t\n// \t\t\tIF MC_MoveBagDelivery.Done THEN\n// \t\t\t\tIF printingNow THEN\n// \t\t\t\t\tprinter.StopPrinting();\n// \t\t\t\t\tIF printer.PrintDone THEN\n// \t\t\t\t\t\tprintingNow := FALSE;\n// \t\t\t\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n// \t\t\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\t\t\tstate := nextState;\n// \t\t\t\t\tEND_IF\n// \t\t\t\tELSE\n// \t\t\t\t\tmoveBagDeliveryTimeout.IN := FALSE;\n// \t\t\t\t\tMC_MoveBagDelivery.Execute := FALSE;\n// \t\t\t\t\tstate := nextState;\n// \t\t\t\tEND_IF\n// \t\t\tEND_IF\n// \t\t\t\n// \t103:\t// Set In Position and go back to idle\n// \t\t\tstate_index := 13;\n// \t\t\tnextState := 0;\n// \t\t\tstate := 100;\n// \t\t\t\n// \t90:\t\t//Reset:\n// \t\tstate_index := 14;\n// \t\t_feedAtPrintSpeed := FALSE;\n// \t\t_feedBagOut := FALSE;\n// \t\t_feedToPrintOffset := FALSE;\n// \t\t_reverseToSeparate := FALSE;\n// \t\t\n// \t\t//_timeoutTimer.IN := FALSE;\n// \t\t//jawTestModeActive := FALSE;\n// \t\t\n// \t\tMC_MoveBagDelivery.execute := FALSE;\n// \t\tMC_HaltBagDelivery.execute := FALSE;\n// \t\tMC_ResetBagDelivery.execute := TRUE;\n// \t\t//MC_PowerUpBagDelivery.execute := FALSE;\n// \t\t\t\t\n// \t\t\n// \t\tstate := 91;\n// \n// \t91:\t\t//Resetting:\n// \t\tstate_index := 15;\n// \t\tIF  _resetTimer.Q THEN\n// \t\t\tMC_ResetBagDelivery.Execute := FALSE;\t\n// \t\t\tstate := 92;\n// \t\tEND_IF\n// \t\t\n// \t92:\t\t//ResetDone:\n// \t\tstate_index := 16;\n//  \t\tIF bagDeliveryMotor.operational THEN\n//  \t\t\tstate := 100;\n//  \t\tEND_IF\n// \n// END_CASE","LineInfoPersistence":"(string)1506e032-04fd-4989-b1c4-0a9a93cee431_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FINAL FB_1195_Test_BagDelivery EXTENDS FB_BaseComponent IMPLEMENTS IBagDelivery\nVAR_INPUT\n\tsimulateIO : BOOL;\n\tdryCycleEnable : BOOL;\n\tbagPresent : BOOL;\n\tprinter : IPrinter;\n\tbagLength : REAL := 24.0;\n\tfeedSpeed : REAL := 30.0;\n\treverseSpeed : REAL := 3.0;\n\tprintSpeed : REAL := 6.0;\n\tprintOffset : REAL := 4.5;\n\treverseOffset : REAL := 1.5;\n\tprintLength : REAL := 6.0;\n\tmaxReverseSetpoint : REAL := 3.0;\n\tsealOffset : REAL := 1.5;\n\tdistanceFromSealBarToBagEdge : REAL := 3;\n\tdistanceFromNipToBagEdge : REAL := 1.25;\n\ttrapezoidalPercent : REAL := 0.1;\n\tstateWatch : FB_StateRateTracking;\n\t//variables for the state timer\n// \tstateTimer:TON;\n// \tlaststate: INT;\n// \tcount_index :INT :=0;\n// \tclr:BOOL:=FALSE;\n// \tspeedTracking : ARRAY[0..20] OF ARRAY[0..20] OF TIME;\n// \tspeedTracking_mt : ARRAY[0..20] OF ARRAY[0..20] OF TIME:=[21([21(T#0S)])]; \n \tstate_index : INT:=0;\nEND_VAR\nVAR_OUTPUT\n\treverseFault : FB_Fault(name := Standard.CONCAT(_prefix,'Reverse Fault'),  faultID := faultMessageList.REVERSE_FAULT);\n\tbagFailedToSeparate : FB_Fault(name := Standard.CONCAT(_prefix,'Failed To Separate'),  faultID := faultMessageList.BAG_FAILED_TO_SEPERATE);\n\tnoBagOverEye : FB_Fault(name := Standard.CONCAT(_prefix,'No Bag Over Photoeye'),  faultID := faultMessageList.NO_BAG_OVER_PHOTOEYE);\n\tmotorFault : FB_Fault(name := CONCAT(_prefix, 'Film Feed Motor Fault'), faultID := faultMessageList.BAG_DELIVERY_MOTOR_FAULT);\n\tmotorCommFault : FB_Fault(name := CONCAT(_prefix, 'Film Feed Motor Comm Fault'),  faultID := faultMessageList.BAG_DELIVERY_MOTOR_COMM_FAULT);\nEND_VAR\nVAR\n\t_feedAtPrintSpeed : BOOL;\n\t_feedBagOut : BOOL;\n\t_feedToReverseOffset : BOOL;\n\t_feedToPrintOffset : BOOL;\n\t_reverseToSeparate : BOOL;\n\t_bagFeedDone : BOOL;\n\t_bagSeparated : BOOL;\n\t_bagAtReverseOffset : BOOL;\n\t_readyForPrint : BOOL;\n\t_printerExtraFeedLength : REAL := 0.5;\n\t//state : INT;\n\tstate : eBagDeliveryStates;\n\t//nextState : INT;\n\tnextState : eBagDeliveryStates;\n\tmoveBagDeliveryTimeout : Standard.TON;\n\tMC_MoveBagDelivery : MC_MoveRelative;\n\tMC_HaltBagDelivery : MC_Halt;\n\tMC_ResetBagDelivery : MC_Reset;\n\tMC_PowerUpBagDelivery : MC_Power;\n\tremainingLength : REAL;\n\tbagReversedToPrintOffset : BOOL;\n\tbagEdgePhotoeyeSim : FB_SimulatedFeedbackPhysicalInput(name := 'Bag Edge Photoeye Sim');\n\tprintingNow : BOOL;\n\t_resetTimer: Standard.TON := (PT := T#250MS);\nEND_VAR\nVAR_IN_OUT\n\tbagDeliveryMotor : Axis_REF;\nEND_VAR","LineInfoPersistence":"(string)1506e032-04fd-4989-b1c4-0a9a93cee431_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)2552","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}