{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)d478bd1b-d55d-49f1-9948-90a75299f4b9","ParentGuid":"(Guid)9266ed0f-7f1e-4370-8ffa-55b419b1a46d","Name":"(string)FB_BaseBCV","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)05d9cb2c-8471-499f-ab7d-d2b7178f1a1f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//    Function Block: BarcodeReaderFB\n//    Description: Trigger the barcode verifier and receive a \"Barcode OK\" signal, or nothing which indicates no read.\n//    Created by: Ben Hess\n//    Created Date: January 29th, 2020\n\n// Setup timers for reading offset and scanning distance\nIF positionOffset > 0 THEN\n\tpositionOffsetDelay(PT := TO_TIME(MILLISECONDS_IN_SECOND / (TO_REAL(feedSpeed) / positionOffset)) + T#120MS);\nELSE\n\tpositionOffsetDelay(PT := T#0S);\nEND_IF\n\n// IF distanceToScan > 0 THEN\n// \twaitForReadTimer(PT := TO_TIME(MILLISECONDS_IN_SECOND / (TO_REAL(feedSpeed) / distanceToScan)));\n// ELSE\n// \twaitForReadTimer(PT := T#0S);\n// END_IF\n\nIF _reset OR NOT THIS^.OptionActive THEN\n\t//\n\t_reset := FALSE;\n\tIF barcodeFault THEN\n\t\tcurrentBadReadCount := 0;\n\tEND_IF\n\tstate := eBaseBCVStates.Idle;\n\tbarcodeFault := FALSE;\nEND_IF\n//code to add timer to track duration in states\nstateTimer(PT:=T#10000S);\nIF clr THEN\n\tspeedTracking:=speedTracking_mt;\n\tclr:=FALSE;\nEND_IF\nIF state  = laststate THEN\n\tstateTimer.IN := TRUE;\nELSIF state  <> laststate THEN\n\tstateTimer.IN := FALSE;\n\tIF state =0 THEN\n\t\tcount_index := count_index +1;\n\tEND_IF\n\tlaststate:=state;\nEND_IF\nspeedTracking[state_index][count_index] := stateTimer.ET;\n\nIF count_index >=20 THEN\n\tcount_index :=0;\nEND_IF\n//End modded code\n_ready := state = eBaseBCVStates.Idle;\n\nwaitForReadTimer();\n_stateString := TO_STRING(state);\nCASE state OF\n\t\n\teBaseBCVStates.Idle:\t\t\t\t// Wait for trigger\n\t\t\t\t\t\t\t\t\tstate_index:= 0;\n\t\t\t\t\t\t\t\t\ttriggerScannerOutput := FALSE;\n\t\t\t\t\t\t\t\t\twaitForReadTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\tpositionOffsetDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\txBusy := FALSE;\n\t\t\t\t\t\t\t\t\tIF _trigger THEN\n\t\t\t\t\t\t\t\t\t\tstate := eBaseBCVStates.WaitForOffset;\n\t\t\t\t\t\t\t\t\t\tpositionOffsetDelay.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\txBusy := TRUE;\n\t\t\t\t\t\t\t\t\t\txDone := FALSE;\n\t\t\t\t\t\t\t\t\t\t_goodRead := FALSE;\n\t\t\t\t\t\t\t\t\t\t_badread := FALSE;\n\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF _triggerImmediate THEN\n\t\t\t\t\t\t\t\t\t\tstate := eBaseBCVStates.TriggerReader;\n\t\t\t\t\t\t\t\t\t\txBusy := TRUE;\n\t\t\t\t\t\t\t\t\t\txDone := FALSE;\n\t\t\t\t\t\t\t\t\t\t_goodRead := FALSE;\n\t\t\t\t\t\t\t\t\t\t_badread := FALSE;\n\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t_trigger := FALSE;\n\t\t\t\t\t\t\t\t\t_triggerImmediate := FALSE;\n\t\t\t\t\t\t\t\t\t\n\teBaseBCVStates.WaitForOffset: \t\t// Wait for offset to trigger read\n\t\t\t\t\t\t\t\t\tstate_index:= 1;\n\t\t\t\t\t\t\t\t\tIF positionOffsetDelay.Q THEN\n\t\t\t\t\t\t\t\t\t\tstate := eBaseBCVStates.TriggerReader;\n\t\t\t\t\t\t\t\t\t\tpositionOffsetDelay.IN := FALSE;\n\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\n\teBaseBCVStates.TriggerReader:\t\t// Trigger the reader and then move to waiting state for result\n\t\t\t\t\t\t\t\t\tstate_index:= 2;\n\t\t\t\t\t\t\t\t\ttriggerScannerOutput := TRUE;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tstate := eBaseBCVStates.WaitingForResult;\n\t\t\t\t\t\t\t\t\t\n\t\n\teBaseBCVStates.WaitingForResult:\t// Wait for delayToCheckReadStatus timer.  If it times out we did not get a good read\n\t\t\t\t\t\t\t\t\tstate_index:= 3;\n\t\t\t\t\t\t\t\t\twaitForReadTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\tIF readGoodInput OR dryCycleEnable THEN\n\t\t\t\t\t\t\t\t\t\t_goodRead := TRUE;\n\t\t\t\t\t\t\t\t\t\t_badread := FALSE;\n\t\t\t\t\t\t\t\t\t\tcurrentGoodReadCount := currentGoodReadCount + 1;\n\t\t\t\t\t\t\t\t\t\tcurrentBadReadCount := 0;\n\t\t\t\t\t\t\t\t\t\twaitForReadTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\txDone := TRUE;\n\t\t\t\t\t\t\t\t\t\tstate := eBaseBCVStates.Idle;\n\t\t\t\t\t\t\t\t\tELSIF waitForReadTimer.Q OR badReadInput THEN\n\t\t\t\t\t\t\t\t\t\t_goodRead := FALSE;\n\t\t\t\t\t\t\t\t\t\t_badread := TRUE;\n\t\t\t\t\t\t\t\t\t\tcurrentGoodReadCount := 0;\n\t\t\t\t\t\t\t\t\t\tcurrentBadReadCount := currentBadReadCount + 1;\n\t\t\t\t\t\t\t\t\t\tIF badReadFaultCountSetting > 0 THEN\n\t\t\t\t\t\t\t\t\t\t\tIF currentBadReadCount >= badReadFaultCountSetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\tbarcodeFault := TRUE;\n\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\twaitForReadTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\txDone := TRUE;\n\t\t\t\t\t\t\t\t\t\tstate := eBaseBCVStates.Idle;\n\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\teBaseBCVStates.Resetting:\t\n\t\t\tstate_index:= 4;\t\t//\n\t\n\t\nEND_CASE\n\nSUPER^();","LineInfoPersistence":"(string)d478bd1b-d55d-49f1-9948-90a75299f4b9_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_BaseBCV EXTENDS FB_BaseComponent IMPLEMENTS IBarcodeVerifier\nVAR_INPUT\n\tfeedSpeed : UDINT;\n\tpositionOffset : REAL;\n\tdistanceToScan : REAL;\n\treadGoodInput : BOOL;\n\tbadReadInput : BOOL;\n\tbadReadFaultCountSetting : UDINT;\n\tdryCycleEnable : BOOL;\nEND_VAR\t\nVAR_OUTPUT\n\ttriggerScannerOutput : BOOL;\n\txBusy : BOOL;\n\txDone : BOOL;\n\tcurrentGoodReadCount : UDINT;\n\tcurrentBadReadCount : UDINT;\n\tbarcodeFault : BOOL;\nEND_VAR\nVAR\n\t_goodRead : BOOL;\n\t_badread : BOOL;\n\t_trigger : BOOL;\n\t_triggerImmediate : BOOL;\n\tstate : eBaseBCVStates;\n\twaitForReadTimer : Standard.TON := (PT := T#2S);\n\tpositionOffsetDelay : Standard.TON;\n\t\n\t\t\t\t//variables for the state timer\n\tstateTimer:TON;\n\tlaststate: INT;\n\tcount_index :INT :=0;\n\tclr:BOOL:=FALSE;\n\tspeedTracking : ARRAY[0..20] OF ARRAY[0..20] OF TIME;\n\tspeedTracking_mt : ARRAY[0..20] OF ARRAY[0..20] OF TIME:=[21([21(T#0S)])]; \n\tstate_index : INT:=0;\nEND_VAR\nVAR CONSTANT\n\tMILLISECONDS_IN_SECOND : INT := 1000;\nEND_VAR\n","LineInfoPersistence":"(string)d478bd1b-d55d-49f1-9948-90a75299f4b9_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)453","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}