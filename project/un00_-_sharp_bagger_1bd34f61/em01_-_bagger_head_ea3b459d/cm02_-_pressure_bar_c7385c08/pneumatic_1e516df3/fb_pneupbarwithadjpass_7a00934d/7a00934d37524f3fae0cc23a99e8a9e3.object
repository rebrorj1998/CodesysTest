{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)7a00934d-3752-4f3f-ae0c-c23a99e8a9e3","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_PneuPBarWithAdjPass","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)1e516df3-9df8-4eb4-b35f-36a7d732677c"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_PneuPBarWithAdjPass()\n//\tDescription: Pneumatic pressure bar with adjustable passthrough - passthrough adjustment is done with motor\n//\t\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: Tuesday, May 14th, 2019\n\nSUPER^();\n\n{region \"Axis Setup\"}\n// Setup of Motion Commands for passthrough motor axis\nMC_HomePassthrough(Axis := passthroughMotor);\nMC_MovePassthrough(Axis := passthroughMotor);\nMC_ResetPassthoughMotor(Axis := passthroughMotor);\nMC_HaltPasstroughMotor(Axis := passthroughMotor);\n{endregion}\n\t \n{region \"Timers\"}\n// If homing not complete within reasonable time, error out\nhomeTimeout(PT := homeTimeoutSetting);\n// If passthrough doesn't reach setpoint in reasonable time, error out\nmovePassthroughTimeout();\n{endregion}\n\n\n{region \"I/O and Fault Setup\"}\n// Passthrough position is based on reported motor position\nactualPassthrough := passthroughMotor.ActPos;\n\n// Setup simulation of I/O and faults for testing\nsimClose(in := cylinder.RetractAsserted, simFeedbackFault := UN00_Globals.simFaults.pressureBarFailedToMoveIn, inputToSimulate := PressureBarClosedSensor);\nsimOpen(in := cylinder.ExtendAsserted, simFeedbackFault := UN00_Globals.simFaults.pressureBarFailedToMoveOut, inputToSimulate := PressureBarOpenSensor);\nObstructionSensor.simulate := PressureBarClosedSensor.simulate := PressureBarOpenSensor.simulate := simulateIO;\nObstructionSensor.simValue := NOT UN00_Globals.simFaults.pressureBarObstucted;\nEnableSimulation(device := cylinder, enableSim := simulateIO);\n\n\n_isFullyClosed := PressureBarClosedSensor.Active;\n_isFullyOpen := PressureBarOpenSensor.Active;\n\n\n// Failed to reach sensor timers\n// Exclusively use Close solonoid for Close fail timer since Open slow/low pressure uses both solenoids\nfailedToCloseTimer(IN := cylinder.RetractAsserted AND NOT _isFullyClosed,\n\t\t\t\t\tPT := faultTime,\n\t\t\t\t\tQ => failedToClose.faultTrigger);\nfailedToOpenTimer(IN := cylinder.ExtendAsserted AND NOT _isFullyOpen,\n\t\t\t\t\tPT := faultTime,\n\t\t\t\t\tQ => failedToOpen.faultTrigger);\n\n// Obstruction fault is normally closed, fail safe.  Fault if collapsable jaw is broken anywhere outside of all the way in or all the way out\npressureBarObstructed.faultTrigger := ObstructionSensor.IsOff AND NOT (_isFullyClosed OR _isFullyOpen)\n\t\t\t\t\t\t\t\t\t\tOR ObstructionSensor.IsOff AND (_isFullyOpen AND cylinder.RetractAsserted);   // Also fault if broken when we try to close from all the way out\nIF passthroughMotor.Error THEN\n\tmotorFault.faultTrigger := TRUE;\n\tadjustablePassthroughState := 0;\nELSE \n\tmotorFault.faultTrigger := FALSE;\nEND_IF\n{endregion}\n\nIF _reset THEN\n\tadjustablePassthroughState := 100;\n\tIF passthroughMotor.Error THEN\n\t\tMC_ResetPassthoughMotor.Execute := TRUE;\n\tEND_IF\n\t_movePassthroughNow := FALSE;\n\tmovePassthroughTimeout.IN := FALSE;\n\t_reset := FALSE;\nEND_IF\n\n\n\nCASE adjustablePassthroughState OF\n\t\n\t0:  // Idle State.\n\t\tMC_ResetPassthoughMotor.Execute := FALSE;\n\t\tIF passthroughMotor.HomingDone\n\t\t\tAND NOT failedToClose.Active\n\t\t\tAND NOT failedToOpen.Active\n\t\t\tAND NOT failedToHome.Active\n\t\t\tAND NOT pressureBarObstructed.Active\n\t\t\tAND NOT motorFault.Active\n\t\t\tAND NOT failedToMovePassthrough.Active\n\t\t\tAND InDesiredPosition\n\t\tTHEN\n\t\t\t_ready := TRUE;\n\t\tELSE\n\t\t\t_ready := FALSE;\n\t\tEND_IF\n\t\t\n\t\tIF _homeNow AND NOT passthroughMotor.HomingDone THEN\n\t\t\tMC_HomePassthrough.Execute := TRUE;\n\t\t\tOpenLowPressure();\n\t\t\t_homeNow := FALSE;\n\t\t\tadjustablePassthroughState := 1;\n\t\tELSIF _homeNow AND passthroughMotor.HomingDone THEN\n\t\t\t_homeNow := FALSE;\n\t\tEND_IF\n\t\t\n\t\tIF _movePassthroughNow AND passthroughMotor.HomingDone THEN\n\t\t\tIF InDesiredPosition THEN\n\t\t\t\t_movePassthroughNow := FALSE;\n\t\t\t\tadjustablePassthroughState := 100;\t\t\t\t\n\t\t\tELSE\n\t\t\t\tMC_MovePassthrough.Position := passthroughSetting;\n\t\t\t\tMC_MovePassthrough.Velocity := ptVelo;\n\t\t\t\tMC_MovePassthrough.Acceleration := ptAccel;\n\t\t\t\tMC_MovePassthrough.Deceleration := ptDecel;\n\t\t\t\t_movePassthroughNow := FALSE;\n\t\t\t\tOpenLowPressure();\n\t\t\t\t\n\t\t\t\tIF UN00_Globals.simFaults.failedToMovePassthrough THEN\n\t\t\t\t\tmovePassthroughTimeout.PT := TO_TIME(((ABS(actualPassthrough - passthroughSetting) / ptVelo) * 1000) - 500) ;\n\t\t\t\tELSE\n\t\t\t\t\tmovePassthroughTimeout.PT := TO_TIME(((ABS(actualPassthrough - passthroughSetting) / ptVelo) * 1000) + 2000);\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\t\tMC_MovePassthrough.Execute := TRUE;\n\t\t\t\tadjustablePassthroughState := 2;\n\t\t\tEND_IF\n\t\tEND_IF\n\t\n\t1:\t// Homing\n\t\thomeTimeout.IN := TRUE;\n\t\tIF homeTimeout.Q \n\t\t\tOR MC_HomePassthrough.Error \n\t\t\tOR UN00_Globals.simFaults.pressureBarfailedToHome\n\t\tTHEN\n\t\t\tfailedToHome.Trigger();\n\t\t\tadjustablePassthroughState := 100;\n\t\tEND_IF\n\t\tIF MC_HomePassthrough.Done THEN\n\t\t\tadjustablePassthroughState := 100;\n\t\tEND_IF\n\t\n\t2:\t// Start Moving Passthrough\n\t\tmovePassthroughTimeout.IN := TRUE;\n\t\n\t\tIF MC_MovePassthrough.Error OR movePassthroughTimeout.Q THEN\n\t\t\tfailedToMovePassthrough.Trigger();\n\t\t\tMC_MovePassthrough.Execute := FALSE;\n\t\t\tMC_HaltPasstroughMotor.Execute := TRUE;\n\t\t\tExhaust();\n\t\t\tadjustablePassthroughState := 100;\n\t\tEND_IF\n\t\t\n\t\tIF MC_MovePassthrough.Done THEN\n\t\t\tOpen();\n\t\t\tMC_MovePassthrough.Execute := FALSE;\n\t\t\tadjustablePassthroughState := 100;\n\t\tEND_IF\n\t\t\n\t100:// Cleanup\n\t\tMC_HomePassthrough.Execute := FALSE;\n\t\t//resetPassthoughMotor.Execute := FALSE;\n\t\tMC_MovePassthrough.Execute := FALSE;\n\t\tMC_HaltPasstroughMotor.Execute := FALSE;\n\t\thomeTimeout.IN := FALSE;\n\t\tmovePassthroughTimeout.IN := FALSE;\n\t\t_homeNow := FALSE;\n\t\t\n\t\tadjustablePassthroughState := 0;\n\nEND_CASE","LineInfoPersistence":"(string)7a00934d-3752-4f3f-ae0c-c23a99e8a9e3_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_PneuPBarWithAdjPass EXTENDS FB_BaseComponent IMPLEMENTS IPressureBar, IHomable, IPostHomeMove\nVAR_INPUT\n\tsimulateIO : BOOL;\t\t\t\t\t\t\t\t\t\t\t\t// Simulate all I/O for testing\n\tpassthroughMotor : REFERENCE TO Axis_REF;\t\t\t// The motor axis for the passthrough\n\tptVelo : REAL := 0.5;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Velocity\n\tptAccel : REAL := 10.0;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Acceleration\n\tptDecel : REAL := 1.0;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Deceleration\n\thomeTimeoutSetting : TIME := T#20S;\t\t\t\t\t\t\t\t// Timeout for homing attempt\n\tpassthroughSetting : REAL := 8.0;\n\tcylinder : ICylinder;\nEND_VAR\nVAR_OUTPUT\n\tfailedToClose : FB_Fault(name := CONCAT(_prefix, 'Failed to Close'));\n\tfailedToOpen : FB_Fault(name := CONCAT(_prefix, 'Failed to Open'));\n\tfailedToHome : FB_Fault(name := CONCAT(_prefix, 'Failed to Home'));\n\tpressureBarObstructed : FB_Fault(name := CONCAT(_prefix, 'Obstructed'));\n\tmotorFault : FB_Fault(name := CONCAT(_prefix, 'Motor Fault'));\n\tfailedToMovePassthrough : FB_Fault(name := CONCAT(_prefix, 'Failed to Move Passthrough'));\n\tactualPassthrough : REAL := 8.0;\t\t\t\t\t\t\t\t// Current Passthrough Opening\n\t//CloseSolenoid : FB_PhysicalDigitalOutput(name := CONCAT(_prefix, 'Close Solenoid'));\n\t//OpenSolenoid : FB_PhysicalDigitalOutput(name := CONCAT(_prefix, 'Open Solenoid'));\nEND_VAR\nVAR\n\tsimClose : FB_SimulatedFeedbackPhysicalInput(name := CONCAT(_prefix,'Move In')) := (minDelay := 20, maxDelay := 60);\n\tsimOpen : FB_SimulatedFeedbackPhysicalInput(name := CONCAT(_prefix,'Move Out')) := (minDelay := 20, maxDelay := 60);\n\tMC_HomePassthrough : MC_Home;\n\tMC_MovePassthrough : MC_MoveAbsolute;\n\tMC_ResetPassthoughMotor : MC_Reset;\n\tMC_HaltPasstroughMotor : MC_Halt;\n\t_homeNow : BOOL;\n\t_movePassthroughNow : BOOL;\n\t_isFullyClosed : BOOL;\n\t_isFullyOpen : BOOL;\n\tadjustablePassthroughState : INT;\n\thomeTimeout : Standard.TON;\n\tmovePassthroughTimeout : Standard.TON;\n\tfailedToCloseTimer : Standard.TON;\n\tfailedToOpenTimer : Standard.TON;\n\tfaultTime : TIME := T#5S;\nEND_VAR\nVAR_IN_OUT\n\tPressureBarClosedSensor : FB_PhysicalDigitalInput;\n\tPressureBarOpenSensor : FB_PhysicalDigitalInput;\n\tObstructionSensor : FB_PhysicalDigitalInput;\nEND_VAR","LineInfoPersistence":"(string)7a00934d-3752-4f3f-ae0c-c23a99e8a9e3_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)4754","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}