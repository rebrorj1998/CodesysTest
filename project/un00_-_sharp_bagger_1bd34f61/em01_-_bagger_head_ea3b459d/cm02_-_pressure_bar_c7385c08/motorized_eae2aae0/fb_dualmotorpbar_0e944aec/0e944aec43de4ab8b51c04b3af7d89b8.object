{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)0e944aec-43de-4ab8-b51c-04b3af7d89b8","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_DualMotorPBar","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)eae2aae0-076a-4975-8f73-015b3cd883c9"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_DualMotorPBar()\n//\tDescription: Dual motor passthough, using a low torque motor for most movements and a high torque motor for clamping force to seal and \n//\t\t\t\t reverse bag\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: Wedsday, June 3rd 2020\n\nSUPER^();\n\n{region \"Axis Setup\"}\n// Setup of Motion Commands for passthrough motor axis\nMC_HomeBothMotors(Axis := bothMotors);\nMC_MoveBothMotorsABS(Axis := bothMotors);\nMC_MoveBothMotorsABSTorque(Axis := bothMotors);\nMC_MoveBothMotorsINC(Axis := bothMotors);\nMC_ResetBothMotors(Axis := bothMotors);\nMC_ResetFrontMotor(Axis := frontMotor);\nMC_ResetRearMotor(Axis := rearMotor);\nMC_HaltBothMotors(Axis := bothMotors);\n{endregion}\n\t \n{region \"Timers\"}\n// If homing not complete within reasonable time, error out\nhomeTimeout(IN := jawState = eDualMotorPBarStates.HomeJaw, PT := homeTimeoutSetting);\n// If reset of motors fails state machine must move on\nresetTimer(IN := jawState = eDualMotorPBarStates.Resetting);\n// Jaw move in delay\t \nmoveInDelay(IN := _closeNow, PT := moveInDelaySetting);\t  \n// Jaw test delay timer\njawTestDelayTimer();\n{endregion}\n\n\n{region \"I/O and Fault Setup\"}\n// Passthrough position is based on reported motor position\nactualPosition := frontMotor.ActPos;\n(*\n// Setup simulation of I/O and faults for testing\nsimClose(in := cylinder.RetractAsserted, simFeedbackFault := UN00_Globals.simFaults.pressureBarFailedToMoveIn, inputToSimulate := PressureBarClosedSensor);\nsimOpen(in := cylinder.ExtendAsserted, simFeedbackFault := UN00_Globals.simFaults.pressureBarFailedToMoveOut, inputToSimulate := PressureBarOpenSensor);\nObstructionSensor.simulate := PressureBarClosedSensor.simulate := PressureBarOpenSensor.simulate := simulateIO;\nObstructionSensor.simValue := NOT UN00_Globals.simFaults.pressureBarObstucted;\nEnableSimulation(device := cylinder, enableSim := simulateIO);\n*)\n\n_isFullyClosed := pressureBarClosedSensor;\n_isFullyOpen := TO_DINT(frontMotor.ActualPosition * 1000) <= (TO_DINT(passthroughSetting * 1000) + 10) AND TO_DINT(frontMotor.ActualPosition * 1000) >= (TO_DINT(passthroughSetting * 1000) - 10);\n//_IsHomed := _isFullyOpen AND bothMotorsHomed;\n\n// Failed to reach sensor timers\n// Guestimate closing/opening time with a bit of a cushion\nfailedToCloseTimer(IN := jawState = eDualMotorPBarStates.ClosingJaw AND NOT _isFullyClosed,\n\t\t\t\t\tPT := TO_TIME((passthroughSetting / closeVelo) * 1000.0) + jawCloseMotionFaultTimeOffset,\n\t\t\t\t\tQ => failedToClose.faultTrigger);\nfailedToOpenTimer(IN := jawState = eDualMotorPBarStates.OpeningJaw AND NOT _isFullyOpen,\n\t\t\t\t\tPT := TO_TIME((passthroughSetting / openVelo) * 1000.0) + jawOpenMotionFaultTimeOffset,\n\t\t\t\t\tQ => failedToOpen.faultTrigger);\n\n// Obstruction fault is normally closed, fail safe.  Fault if collapsable faceplate is broken anywhere outside of all the way in or all the way out\n\t \nIF NOT obstructionSensor AND NOT (pressureBarNearClosedSensor OR _isFullyOpen) THEN\n\tpressureBarObstructed.faultTrigger := TRUE;\nELSE\n\tpressureBarObstructed.faultTrigger := FALSE;\nEND_IF\n\t \n\t\t  \n// Trigger motor faults from drive\t\t\t\t\t\nIF frontMotor.Error THEN\n\tfrontMotorFault.faultTrigger := TRUE;\nELSE \n\tfrontMotorFault.faultTrigger := FALSE;\nEND_IF\n\nIF NOT frontMotor.CommStatus THEN\n\tfrontMotorCommFault.faultTrigger := TRUE;\nELSE \n\tfrontMotorCommFault.faultTrigger := FALSE;\nEND_IF\n \nIF rearMotor.Error THEN\n\trearMotorFault.faultTrigger := TRUE;\nELSE \n\trearMotorFault.faultTrigger := FALSE;\nEND_IF\n\t \nIF NOT rearMotor.CommStatus THEN\n\trearMotorCommFault.faultTrigger := TRUE;\nELSE \n\trearMotorCommFault.faultTrigger := FALSE;\nEND_IF\n\t \nIF bothMotors.Error THEN\n\tbothMotorsFault.faultTrigger := TRUE;\nELSE \n\tbothMotorsFault.faultTrigger := FALSE;\nEND_IF\n\t \nIF homeTimeout.Q \n\tOR UN00_Globals.simFaults.pressureBarfailedToHome\nTHEN\n\tfailedToHome.Trigger();\nEND_IF\n{endregion}\nfaultONS(CLK := pressureBarObstructed.Active OR failedToClose.Active OR bothMotorsFault.Active OR failedToOpen.Active);\nIF faultONS.OSR THEN\n\tjawState := eDualMotorPBarStates.Faulting;\nEND_IF\nIF stopJawTestMode THEN\n\tjawTestModeActive := FALSE;\nEND_IF\n\nIF _reset THEN\n\tjawState := eDualMotorPBarStates.Reset;\n\t_reset := FALSE;\nEND_IF\n\n_IsHomed := bothMotorsHomed AND _isFullyOpen;\n\nbothMotorsHomed := bothMotors.HomingDone;\nbothMotorsInPosition := frontMotor.TargetReached AND rearMotor.TargetReached;\n\nCASE jawState OF\n\t\n\teDualMotorPBarStates.Idle:\n\t \t\t// Idle State.\n\t\t\tjawTestDelayTimer.IN := FALSE;\n\t\t\tMC_ResetBothMotors.Execute := FALSE;\n\t\t\tIF bothMotorsHomed\n\t\t\t\tAND NOT failedToClose.Active\n\t\t\t\tAND NOT failedToOpen.Active\n\t\t\t\tAND NOT failedToHome.Active\n\t\t\t\tAND NOT pressureBarObstructed.Active\n\t\t\t\tAND NOT frontMotorFault.Active\n\t\t\t\tAND InDesiredPosition\n\t\t\tTHEN\n\t\t\t\t_ready := TRUE;\n\t\t\tELSE\n\t\t\t\t_ready := FALSE;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _homeNow THEN\n\t\t\t\t_homeNow := FALSE;\n\t\t\t\thomeJawState := eDualMotorPbarHomingStates.Idle;\n\t\t\t\tjawState := eDualMotorPBarStates.HomeJaw;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF beginJawTestMode THEN\n\t\t\t\tjawTestModeActive := TRUE;\n\t\t\t\tcurrentTestCycles := 0;\n\t\t\t\tjawState := eDualMotorPBarStates.CloseJaw;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _movePassthroughNow THEN\n\t\t\t\t_movePassthroughNow := FALSE;\n\t\t\t\tjawState := eDualMotorPBarStates.OpenJaw;\n\t\t\tELSIF _openNow OR openJawPB OR _makeReady THEN\n\t\t\t\topenJawPB := FALSE;\n\t\t\t\t_openNow := FALSE;\n\t\t\t\t_makeReady := FALSE;\n\t\t\t\tjawState := eDualMotorPBarStates.OpenJaw;\n\t\t\tELSIF (_closeNow AND moveInDelay.Q) OR closeJawPB THEN\n\t\t\t\tcloseJawPB := FALSE;\n\t\t\t\t_closeNow := FALSE;\n\t\t\t\tjawState := eDualMotorPBarStates.CloseJaw;\n\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\n\t\t\n\t\t\n\t\n\teDualMotorPBarStates.HomeJaw:\t\n\t\t// Normal Homing - not factory homing.\n\t\tCASE homeJawState OF  // Begin homing sub state machine\n\t\t\t\n// \t\t\teDualMotorPbarHomingStates.Idle:\n// \t\t\t\t\t// Move the jaw out a little bit in order to allow ZHome to happen without jamming.  Clears the rack from the rear motor\n// \t\t\t\t\tMC_MoveBothMotorsINC.Distance := jawHomeClearDistance;\n// \t\t\t\t\tMC_MoveBothMotorsINC.Velocity := 2;\n// \t\t\t\t\tMC_MoveBothMotorsINC.Acceleration := openAccel;\n// \t\t\t\t\tMC_MoveBothMotorsINC.Deceleration := openDecel;\n// \t\t\t\t\tMC_MoveBothMotorsINC.Execute := TRUE;\n// \t\t\t\t\thomeJawState := eDualMotorPbarHomingStates.MovingBothMotorsOutToClear;\n\t\t\t\t\t\n\t\t\teDualMotorPbarHomingStates.Idle:\n\t\t\t\t\t// Z home right away\n\t\t\t\t\thomeJawState := eDualMotorPbarHomingStates.ZHomeBothMotors;\t\n\t\t\t\n\t\t\teDualMotorPbarHomingStates.MovingBothMotorsOutToClear: // skipping this for testing - may not be needed \n\t\t\t\t\t// Wait for motors to move out to clear rack\n\t\t\t\t\tIF MC_MoveBothMotorsINC.Done THEN\n\t\t\t\t\t\tMC_MoveBothMotorsINC.Execute := FALSE;\n\t\t\t\t\t\thomeJawState := eDualMotorPbarHomingStates.ZHomeBothMotors;\n\t\t\t\t\tELSIF MC_MoveBothMotorsINC.Error THEN\n\t\t\t\t\t\tMC_MoveBothMotorsINC.Execute := FALSE;\n\t\t\t\t\t\tfailedToHome.Trigger();\n\t\t\t\t\t\tjawState := eDualMotorPBarStates.Faulting;\n\t\t\t\t\tEND_IF\n\t\t\t\n\t\t\teDualMotorPbarHomingStates.ZHomeBothMotors:\n\t\t\t\t\t// Move ZHome both motors\n\t\t\t\t\tMC_HomeBothMotors.Execute := TRUE;\n\t\t\t\t\thomeJawState := eDualMotorPbarHomingStates.ZHomingBothMotors;\n\t\t\t\t\t\n\t\t\teDualMotorPbarHomingStates.ZHomingBothMotors:\n\t\t\t\t\t// When ZHomed, Move out to Open s\n\t\t\t\t\tIF MC_HomeBothMotors.Done THEN\n\t\t\t\t\t\tMC_HomeBothMotors.Execute := FALSE;\n\t\t\t\t\t\thomeJawState := eDualMotorPbarHomingStates.MoveMotorsToPassthrough;\n\t\t\t\t\tELSIF MC_HomeBothMotors.Error THEN\n\t\t\t\t\t\tMC_HomeBothMotors.Execute := FALSE;\n\t\t\t\t\t\tfailedToHome.Trigger();\n\t\t\t\t\t\tjawState := eDualMotorPBarStates.Faulting;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\t\t\teDualMotorPbarHomingStates.MoveMotorsToPassthrough:\n\t\t\t\t\t// Move jaw out to passthrough\n\t\t\t\t\tMC_MoveBothMotorsABS.Position := passthroughSetting;\n\t\t\t\t\tMC_MoveBothMotorsABS.Velocity := openVelo;\n\t\t\t\t\tMC_MoveBothMotorsABS.Acceleration := openAccel;\n\t\t\t\t\tMC_MoveBothMotorsABS.Deceleration := openDecel;\n\t\t\t\t\tMC_MoveBothMotorsABS.Execute := TRUE;\n\t\t\t\t\thomeJawState := eDualMotorPbarHomingStates.MovingMotorsToPassthrough;\n\t\t\t\t\t//jawState := eDualMotorPBarStates.OpenJaw;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\teDualMotorPbarHomingStates.MovingMotorsToPassthrough:\n\t\t\t\t\t// If moved out to passthrough then we are done\n\t\t\t\t\tIF MC_MoveBothMotorsABS.Done THEN\n\t\t\t\t\t\tMC_MoveBothMotorsABS.Execute := FALSE;\n\t\t\t\t\t\t//_IsHomed := TRUE;\n\t\t\t\t\t\thomeJawState := eDualMotorPbarHomingStates.Idle;\n\t\t\t\t\t\tjawState := eDualMotorPBarStates.Idle;\n\t\t\t\t\tELSIF MC_MoveBothMotorsABS.Error THEN\n\t\t\t\t\t\tMC_MoveBothMotorsINC.Execute := FALSE;\n\t\t\t\t\t\tfailedToHome.Trigger();\n\t\t\t\t\t\tjawState := eDualMotorPBarStates.Faulting;\n\t\t\t\t\tEND_IF\n\t\tEND_CASE  // End Homing sub state machine\n\t\n\teDualMotorPBarStates.OpenJaw:\t\n\t\t// Move jaw out to passthrough\n\t\tMC_MoveBothMotorsABSTorque.Position := passthroughSetting;\n\t\tMC_MoveBothMotorsABSTorque.Velocity := openVelo;\n\t\tMC_MoveBothMotorsABSTorque.Acceleration := openAccel;\n\t\tMC_MoveBothMotorsABSTorque.Deceleration := openDecel;\n\t\tMC_MoveBothMotorsABSTorque.CurrentLimit := jawTorqueSetting;\n\t\tMC_MoveBothMotorsABSTorque.Execute := TRUE;\n\t\tjawState := eDualMotorPBarStates.OpeningJaw;\n\t\t\n\teDualMotorPBarStates.OpeningJaw:\n\t\t// wait for jaw to report open\n\t\tIF MC_MoveBothMotorsABSTorque.Done THEN\n\t\t\tMC_MoveBothMotorsABSTorque.Execute := FALSE;\n\t\t\tIF jawTestModeActive THEN\n\t\t\t\tjawTestDelayTimer.IN := TRUE;\n\t\t\t\tIF jawTestDelayTimer.Q THEN\n\t\t\t\t\tjawTestDelayTimer.IN := FALSE;\n\t\t\t\t\tjawState := eDualMotorPBarStates.CloseJaw;\n\t\t\t\t\tcurrentTestCycles := currentTestCycles + 1;\n\t\t\t\tEND_IF\n\t\t\tELSE\n\t\t\t\tjawState := eDualMotorPBarStates.Idle;\n\t\t\tEND_IF\n\t\tELSIF MC_MoveBothMotorsABSTorque.Error THEN\n\t\t\tMC_MoveBothMotorsINC.Execute := FALSE;\n\t\t\tfailedToOpen.Trigger();\n\t\t\tjawState := eDualMotorPBarStates.Faulting;\n\t\tEND_IF\n\teDualMotorPBarStates.OpenedJaw:\n\t\t//\n\t\t\n\teDualMotorPBarStates.CloseJaw:\t\n\t\t// Start Moving jaw to closed position\n\t\tMC_MoveBothMotorsABSTorque.Position := jawClosedSetting;\n\t\tMC_MoveBothMotorsABSTorque.Velocity := closeVelo;\n\t\tMC_MoveBothMotorsABSTorque.Acceleration := closeAccel;\n\t\tMC_MoveBothMotorsABSTorque.Deceleration := closeDecel;\n\t\tMC_MoveBothMotorsABSTorque.CurrentLimit := jawTorqueSetting;\n\t\tMC_MoveBothMotorsABSTorque.Execute := TRUE;\n\t\tjawState := eDualMotorPBarStates.ClosingJaw;\n\t\t\n\teDualMotorPBarStates.ClosingJaw:\n\t\t// Wait for jaw closed indication\n\t\tIF MC_MoveBothMotorsABSTorque.Done AND _isFullyClosed THEN\n\t\t\tMC_MoveBothMotorsABSTorque.Execute := FALSE;\n\t\t\tIF jawTestModeActive THEN\n\t\t\t\tjawTestDelayTimer.IN := TRUE;\n\t\t\t\tIF jawTestDelayTimer.Q THEN\n\t\t\t\t\tjawTestDelayTimer.IN := FALSE;\n\t\t\t\t\tjawState := eDualMotorPBarStates.OpenJaw;\n\t\t\t\tEND_IF\n\t\t\tELSE\n\t\t\t\tjawState := eDualMotorPBarStates.Idle;\n\t\t\tEND_IF\n\t\t\t\n\t\tELSIF MC_MoveBothMotorsABSTorque.Error THEN\n\t\t\tMC_MoveBothMotorsABSTorque.Execute := FALSE;\n\t\t\tfailedToClose.Trigger();\n\t\t\tjawState := eDualMotorPBarStates.Faulting;\n\t\tEND_IF\n\teDualMotorPBarStates.ClosedJaw:\n\t\t//\n\t\t\n\teDualMotorPBarStates.Faulting:\n\t\t// Free up motors on a fault\n\t\tMC_HomeBothMotors.Execute := FALSE;\n\t\t//resetPassthoughMotor.Execute := FALSE;\n\t\tMC_MoveBothMotorsABS.Execute := FALSE;\n\t\tMC_MoveBothMotorsINC.Execute := FALSE;\n\t\tMC_HaltBothMotors.Execute := FALSE;\n\t\tMC_MoveBothMotorsABSTorque.Execute := FALSE;\n\t\tMC_HaltBothMotors.Execute := TRUE;\n\t\tjawState := eDualMotorPBarStates.Faulted;\n\t\t\n\teDualMotorPBarStates.Faulted:\n\t\t//\n\t\tIF MC_HaltBothMotors.Done OR  MC_HaltBothMotors.Error THEN\n\t\t\tMC_HaltBothMotors.Execute := FALSE;\n\t\t\t\n\t\tEND_IF\n\t\t\n\teDualMotorPBarStates.Reset:\n\t\t//  Send reset to motors if they're faulted\n\t\t\n\t\tMC_ResetBothMotors.Execute := TRUE;\n\t\tMC_ResetFrontMotor.Execute := TRUE;\t\n\t\tMC_ResetRearMotor.Execute := TRUE;\t\n\t\thomeJawState := eDualMotorPbarHomingStates.Idle;\n\t\tMC_HomeBothMotors.Execute := FALSE;\n\t\t//resetPassthoughMotor.Execute := FALSE;\n\t\tMC_MoveBothMotorsABS.Execute := FALSE;\n\t\tMC_MoveBothMotorsINC.Execute := FALSE;\n\t\tMC_HaltBothMotors.Execute := FALSE;\n\t\tMC_MoveBothMotorsABSTorque.Execute := FALSE;\n\t\thomeTimeout.IN := FALSE;\n\t\t_homeNow := FALSE;\n\t\t_openNow := FALSE;\n\t\t_closeNow := FALSE;\n\t\tjawTestModeActive := FALSE;\n\t\tjawState := eDualMotorPBarStates.Resetting;\n\n\teDualMotorPBarStates.Resetting:\n\t\t//\n\t\tIF NOT bothMotors.Error OR resetTimer.Q THEN\n\t\t\tMC_ResetBothMotors.Execute := FALSE;\n\t\t\tMC_ResetFrontMotor.Execute := FALSE;\t\n\t\t\tMC_ResetRearMotor.Execute := FALSE;\n\t\t\tjawState := eDualMotorPBarStates.Idle;\n\t\tEND_IF\n\t\t\n\t\t\n\t\t\n\t\t\n\nEND_CASE","LineInfoPersistence":"(string)0e944aec-43de-4ab8-b51c-04b3af7d89b8_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_DualMotorPBar EXTENDS FB_BaseComponent IMPLEMENTS IPressureBar, IHomable\nVAR_INPUT\n\tsimulateIO : BOOL;\t\t\t\t\t\t\t\t\t\t\t\t// Simulate all I/O for testing\n\tfrontMotor : REFERENCE TO Axis_REF;\t\t\t\t// The motor axis for the front (low torque) passthrough\n\trearMotor : REFERENCE TO Axis_REF;\t\t\t\t\t// The motor axis for the rear (high torque) passthrough\n\tbothMotors : REFERENCE TO Axis_REF;\t\t\t\t// The motor axis for both passthrough motors\n\tcloseVelo : REAL := 10;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Velocity\n\tcloseAccel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Acceleration\n\tcloseDecel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Deceleration\n\topenVelo : REAL := 10;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Velocity\n\topenAccel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Acceleration\n\topenDecel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t\t// Passthrough Motor Deceleration\n\thomeTimeoutSetting : TIME := T#20S;\t\t\t\t\t\t\t\t// Timeout for homing attempt\n\tpassthroughSetting : REAL := 5.5;\n\tjawClosedSetting : REAL := -0.2;\n\tjawTorqueSetting : REAL := 100.0;\n\tmoveInDelaySetting : TIME;\n\tpressureBarClosedSensor : BOOL;\n\tpressureBarNearClosedSensor : BOOL;\n\tobstructionSensor : BOOL;\n\topenJawPB : BOOL;\n\tcloseJawPB : BOOL;\n\tbeginJawTestMode : BOOL;\n\tstopJawTestMode : BOOL;\n\t\nEND_VAR\nVAR_OUTPUT\n\tfailedToClose : FB_Fault(name := CONCAT(_prefix, 'Failed to Close'));\n\tfailedToOpen : FB_Fault(name := CONCAT(_prefix, 'Failed to Open'));\n\tfailedToHome : FB_Fault(name := CONCAT(_prefix, 'Failed to Home'));\n\tpressureBarObstructed : FB_Fault(name := CONCAT(_prefix, 'Obstructed'));\n\tfrontMotorFault : FB_Fault(name := CONCAT(_prefix, 'Front Motor Fault'));\n\tfrontMotorCommFault : FB_Fault(name := CONCAT(_prefix, 'Front Motor Comm Fault'));\n\trearMotorFault : FB_Fault(name := CONCAT(_prefix, 'Rear Motor Fault'));\n\trearMotorCommFault : FB_Fault(name := CONCAT(_prefix, 'Rear Motor Comm Fault'));\n\tbothMotorsFault : FB_Fault(name := CONCAT(_prefix, 'Both Motors Fault'));\n\tactualPosition : REAL := 5.5;\t\t\t\t\t\t\t\t// Current Passthrough Opening\n\tjawTestModeActive : BOOL;\n\tcurrentTestCycles : DINT;\nEND_VAR\nVAR\n\tsimClose : FB_SimulatedFeedbackPhysicalInput(name := CONCAT(_prefix,'Move In')) := (minDelay := 20, maxDelay := 60);\n\tsimOpen : FB_SimulatedFeedbackPhysicalInput(name := CONCAT(_prefix,'Move Out')) := (minDelay := 20, maxDelay := 60);\n\tMC_HomeBothMotors : MC_Home;\n\tMC_MoveBothMotorsABS : MC_MoveAbsolute;\n\tMC_MoveBothMotorsABSTorque : MC_MoveAbsoluteTorqueLimited;\n\tMC_MoveBothMotorsINC : MC_MoveRelative;\n\tMC_ResetBothMotors : MC_Reset;\n\tMC_HaltBothMotors : MC_Halt;\n\tMC_ResetFrontMotor : MC_Reset;\n\tMC_ResetRearMotor : MC_Reset;\n\t_homeNow : BOOL;\n\t_movePassthroughNow : BOOL;\n\t_openNow : BOOL;\n\t_closeNow : BOOL;\n\t_isFullyClosed : BOOL;\n\t_isFullyOpen : BOOL;\n\t_IsHomed : BOOL;\n\tjawState : eDualMotorPBarStates;\n\thomeJawState : eDualMotorPbarHomingStates;\n\thomeTimeout : Standard.TON;\n\tfailedToCloseTimer : Standard.TON;\n\tfailedToOpenTimer : Standard.TON;\n\tmoveInDelay : Standard.TON;\n\tjawOpenMotionFaultTimeOffset : TIME := T#500MS;\n\tjawCloseMotionFaultTimeOffset : TIME := T#180MS;\n\tbothMotorsHomed : BOOL;\n\tbothMotorsInPosition : BOOL;\n\tjawHomeClearDistance : REAL := 0.5;\n\tresetTimer: TON := (PT := T#2S);\n\tjawTestDelayTimer : Standard.TON := (PT := T#250MS);\n\tfaultONS : FB_ONS;\nEND_VAR\nVAR_IN_OUT\nEND_VAR","LineInfoPersistence":"(string)0e944aec-43de-4ab8-b51c-04b3af7d89b8_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)8527","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}