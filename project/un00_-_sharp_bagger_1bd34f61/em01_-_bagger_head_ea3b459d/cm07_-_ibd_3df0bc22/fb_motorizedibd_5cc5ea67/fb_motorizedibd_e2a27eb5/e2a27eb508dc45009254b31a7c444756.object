{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)e2a27eb5-08dc-4500-9254-b31a7c444756","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_MotorizedIBD","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)5cc5ea67-6ca0-4ec8-9ac4-9baa7840686f"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tFunction Block: FB_MotorizedIBD()\n//\tDescription: Motorized Independent Bag Deflator\n//\t\t\t\t \n//\tCreated by: Ben Hess\n//\tCreated Date: Tuesday, June 2nd 2020\n\nSUPER^();\n\n{region \"Axis Setup\"}\n// Setup of Motion Commands for passthrough motor axis\nMC_HomeIBDMotor(Axis := IBDMotor);\nMC_MoveIBDMotorABS(Axis := IBDMotor);\nMC_MoveIBDMotorABSTorque(Axis := IBDMotor);\nMC_MoveIBDMotorINC(Axis := IBDMotor);\nMC_ResetIBDMotor(Axis := IBDMotor);\nMC_HaltIBDMotor(Axis := IBDMotor);\n{endregion}\n_ibdClear := IBDMotor.ActualPosition >= clearThreshold;\n_isFullyOpen := TO_DINT(IBDMotor.ActualPosition * 1000) <= (TO_DINT(passthroughSetting * 1000) + 10) AND TO_DINT(IBDMotor.ActualPosition * 1000) >= (TO_DINT(passthroughSetting * 1000) - 10);\n\n{region \"Timers\"}\n// If homing not complete within reasonable time, error out\nhomeTimeout(PT := homeTimeoutSetting, IN := state = eMotorizedIBDStates.Homing);\n// If reset of motors fails state machine must move on\nresetTimer(IN := state = eMotorizedIBDStates.Resetting);\n{endregion}\n\nfailedToOpenTimer(IN := (state = eMotorizedIBDStates.MovingOut OR state = eMotorizedIBDStates.MovingOutAfterHome) AND NOT _isFullyOpen,\n\t\t\t\t\tPT := TO_TIME((passthroughSetting / openVelo) * 1000.0) + motionFaultTimeOffset,\n\t\t\t\t\tQ => );\n\t\t\t\t\t\n// Trigger motor faults from drive\t\t\t\t\t\nIF IBDMotor.Error AND THIS^.OptionActive THEN\n\tIBDMotorFault.faultTrigger := TRUE;\nELSE \n\tIBDMotorFault.faultTrigger := FALSE;\nEND_IF\n\nIF NOT IBDMotor.CommStatus AND THIS^.OptionActive THEN\n\tIBDMotorCommFault.faultTrigger := TRUE;\nELSE\n\tIBDMotorCommFault.faultTrigger := FALSE;\nEND_IF\n\nIF homeTimeout.Q THEN\n\tfailedToHome.Trigger();\nEND_IF\n{endregion}\n\nIF _reset THEN\n\tstate := eMotorizedIBDStates.Reset;\n\t_reset := FALSE;\nEND_IF\n\nfaultONS(CLK := _RemovePower OR failedToHome.Active OR failedToOpen.Active OR IBDMotorFault.Active OR IBDMotorCommFault.Active);\n\nIF faultONS.OSR THEN\n\tstate := eMotorizedIBDStates.Faulting;\nEND_IF\nCASE state OF\n\t\n\teMotorizedIBDStates.Idle:\n\t \t\t// Idle State.\n\t\t\tMC_ResetIBDMotor.Execute := FALSE;\n\t\t\tIF IBDMotor.HomingDone\n\t\t\t\tAND NOT failedToOpen.Active\n\t\t\t\tAND NOT failedToHome.Active\n\t\t\t\tAND NOT IBDMotorFault.Active\n\t\t\t\tAND _isFullyOpen\n\t\t\tTHEN\n\t\t\t\t_ready := TRUE;\n\t\t\tELSE\n\t\t\t\t_ready := FALSE;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _homeNow THEN\n\t\t\t\t_homeNow := FALSE;\n\t\t   \t\tIF THIS^.OptionActive THEN\n\t\t\t   \t\tstate := eMotorizedIBDStates.Home;\n\t\t    \tEND_IF\n\t\t\tEND_IF\n\t\t\t\n\t\t\t\n\t\t\tIF _MoveOut OR openIBDPB OR _makeReady THEN\n\t\t\t\t_MoveOut := FALSE;\n\t\t   \t\t_makeReady := FALSE;\n\t\t\t\tstate := eMotorizedIBDStates.MoveOut;\n\t\t\tELSIF _moveInToDeflate OR closeIBDPB THEN\n\t\t\t\t_moveInToDeflate := FALSE;\n\t\t\t\tstate := eMotorizedIBDStates.MoveIn;\n\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\n\teMotorizedIBDStates.Home:\t\n\t\t// Normal Homing - not factory homing.\n\t\t// Move the IBD to zero\n\t\tMC_HomeIBDMotor.Execute := TRUE;\n\t\tstate := eMotorizedIBDStates.Homing;\n\t\t\t\t\t\t\t\t\t\n\teMotorizedIBDStates.Homing:\t\t\n\t\t// When ZHomed, Move out to Open s\n\t\tIF MC_HomeIBDMotor.Done THEN\t\t\t\t\n\t\t\tMC_HomeIBDMotor.Execute := FALSE;\n\t   \t\t// Move jaw out to passthrough\n\t\t\tMC_MoveIBDMotorABS.Position := passthroughSetting;\n\t\t\tMC_MoveIBDMotorABS.Velocity := openVelo;\n\t\t\tMC_MoveIBDMotorABS.Acceleration := openAccel;\n\t\t\tMC_MoveIBDMotorABS.Deceleration := openDecel;\n\t\t\tMC_MoveIBDMotorABS.Execute := TRUE;\n\t\t\tstate := eMotorizedIBDStates.MovingOutAfterHome;\n\t\tELSIF MC_HomeIBDMotor.Error THEN\n\t\t\tMC_HomeIBDMotor.Execute := FALSE;\n\t\t\tfailedToHome.Trigger();\n\t\t\tstate := eMotorizedIBDStates.Faulting;\n\t\tEND_IF\n\t\t\t\n\teMotorizedIBDStates.MovingOutAfterHome:\t\t\n\t\t//\n   \t\t// wait for jaw to report open\n\t\tIF MC_MoveIBDMotorABS.Done THEN\n\t\t\tMC_MoveIBDMotorABS.Execute := FALSE;\n\t   \t\t_isHomed := TRUE;\n\t\t\tstate := eMotorizedIBDStates.Idle;\n\t\tELSIF MC_MoveIBDMotorABS.Error OR failedToOpenTimer.Q THEN\n\t\t\tMC_MoveIBDMotorABS.Execute := FALSE;\n\t\t\tfailedToOpen.Trigger();\n\t\t\tstate := eMotorizedIBDStates.Faulting;\n\t\tEND_IF\n   \n\teMotorizedIBDStates.MoveOut:\t\n\t\t// Move jaw out to passthrough\n\t\tMC_MoveIBDMotorABS.Position := passthroughSetting;\n\t\tMC_MoveIBDMotorABS.Velocity := openVelo;\n\t\tMC_MoveIBDMotorABS.Acceleration := openAccel;\n\t\tMC_MoveIBDMotorABS.Deceleration := openDecel;\n\t\tMC_MoveIBDMotorABS.Execute := TRUE;\n\t\tstate := eMotorizedIBDStates.MovingOut;\n\t\t\n\teMotorizedIBDStates.MovingOut:\n\t\t// wait for jaw to report open\n\t\tIF MC_MoveIBDMotorABS.Done THEN\n\t\t\tMC_MoveIBDMotorABS.Execute := FALSE;\n\t\t\tstate := eMotorizedIBDStates.Idle;\n\t\tELSIF MC_MoveIBDMotorABS.Error OR failedToOpenTimer.Q THEN\n\t\t\tMC_MoveIBDMotorABS.Execute := FALSE;\n\t\t\tfailedToOpen.Trigger();\n\t\t\tstate := eMotorizedIBDStates.Faulting;\n\t\tEND_IF\n\teMotorizedIBDStates.MovedOut:\n\t\t//\n\t\t\n\teMotorizedIBDStates.MoveIn:\t\n\t\t// Start Moving jaw to closed position\n\t\tMC_MoveIBDMotorABSTorque.Position := jawClosedSetting;\n\t\tMC_MoveIBDMotorABSTorque.Velocity := closeVelo;\n\t\tMC_MoveIBDMotorABSTorque.Acceleration := closeAccel;\n\t\tMC_MoveIBDMotorABSTorque.Deceleration := closeDecel;\n\t\tMC_MoveIBDMotorABSTorque.CurrentLimit := closeCurrent;\n\t\tMC_MoveIBDMotorABSTorque.Execute := TRUE;\n\t\tstate := eMotorizedIBDStates.MovingIn;\n\t\t\n\teMotorizedIBDStates.MovingIn:\n\t\t// Wait for jaw closed indication\n\t\tIF MC_MoveIBDMotorABSTorque.Done THEN\n\t\t\tMC_MoveIBDMotorABSTorque.Execute := FALSE;\n\t\t\tstate := eMotorizedIBDStates.Idle;\n\t\tELSIF MC_MoveIBDMotorABSTorque.Error THEN\n\t\t\tMC_MoveIBDMotorABSTorque.Execute := FALSE;\n\t\t\tstate := eMotorizedIBDStates.Faulting;\n\t\tEND_IF\n\teMotorizedIBDStates.MovedIn:\n\t\t//\n\t\t\n\teMotorizedIBDStates.Faulting:\n\t\t// Free up motors on a fault\n\t\tMC_HaltIBDMotor.Execute := TRUE;\n   \t\t_RemovePower := FALSE;\n\t\tIF MC_HaltIBDMotor.Done OR  MC_HaltIBDMotor.Error THEN\n\t\t\tstate := eMotorizedIBDStates.Faulted;\n\t\tEND_IF\n\t\t\n\teMotorizedIBDStates.Faulted:\n\t\t//\n\t\t\n\teMotorizedIBDStates.Reset:\n\t\t//  Send reset to motors if they're faulted\n\t\t//IF IBDMotor.Error THEN\n\t\t\tMC_ResetIBDMotor.Execute := TRUE;\n\t\t//END_IF\n\t\tMC_HomeIBDMotor.Execute := FALSE;\n\t\t//resetPassthoughMotor.Execute := FALSE;\n\t\tMC_MoveIBDMotorABS.Execute := FALSE;\n\t\tMC_MoveIBDMotorINC.Execute := FALSE;\n\t\tMC_HaltIBDMotor.Execute := FALSE;\n\t\tMC_MoveIBDMotorABSTorque.Execute := FALSE;\n\t\t_homeNow := FALSE;\n\t\t_moveOut := FALSE;\n\t\t_moveInToDeflate := FALSE;\n   \t\t_RemovePower := FALSE;\n\t\tstate := eMotorizedIBDStates.Resetting;\n\n\teMotorizedIBDStates.Resetting:\n\t\t//\n\t\tIF NOT IBDMotor.Error OR resetTimer.Q THEN\n\t\t\tMC_ResetIBDMotor.Execute := FALSE;\n\t\t\tstate := eMotorizedIBDStates.Idle;\n\t\tEND_IF\nEND_CASE","LineInfoPersistence":"(string)e2a27eb5-08dc-4500-9254-b31a7c444756_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FINAL FB_MotorizedIBD EXTENDS FB_BaseIBD IMPLEMENTS IHomable\nVAR_INPUT\n\tcloseVelo : REAL := 10;\t\t\t\t\t\t\t\t\t\t\t// IBD Motor Velocity\n\tcloseAccel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t// IBD Motor Acceleration\n\tcloseDecel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t// IBD Motor Deceleration\n\tcloseCurrent : REAL := 50.0;\t\t\t\n\topenVelo : REAL := 10;\t\t\t\t\t\t\t\t\t\t\t// IBD Motor Velocity\n\topenAccel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t// IBD Motor Acceleration\n\topenDecel : REAL := 100.0;\t\t\t\t\t\t\t\t\t\t// IBD Motor Deceleration\n\thomeTimeoutSetting : TIME := T#10S;\t\t\t\t\t\t\t\t// Timeout for homing attempt\n\tpassthroughSetting : REAL := 5.5;\n\tjawClosedSetting : REAL := 0;\n\topenIBDPB : BOOL;\n\tcloseIBDPB : BOOL;\n\tclearThreshold: REAL:= 2.0;\nEND_VAR\nVAR_OUTPUT\n\tfailedToOpen : FB_Fault(name := CONCAT(_prefix, 'Failed to Open'));\n\tfailedToHome : FB_Fault(name := CONCAT(_prefix, 'Failed to Home'));\n\tIBDMotorFault : FB_Fault(name := CONCAT(_prefix, 'Motor Fault'));\n\tIBDMotorCommFault : FB_Fault(name := CONCAT(_prefix, 'Motor Comm Fault'));\n\tactualPosition : REAL := 5.5;\n\t\nEND_VAR\nVAR\n\t_ibdClear:BOOL;\n\t_homeNow : BOOL;\n\t_isFullyOpen : BOOL;\n\t_isHomed : BOOL;\n\tMC_HomeIBDMotor : MC_Home;\n\tMC_MoveIBDMotorABS : MC_MoveAbsolute;\n\tMC_MoveIBDMotorABSTorque : MC_MoveAbsoluteTorqueLimited;\n\tMC_MoveIBDMotorINC : MC_MoveRelative;\n\tMC_ResetIBDMotor : MC_Reset;\n\tMC_HaltIBDMotor : MC_Halt;\n\thomeTimeout : Standard.TON;\n\tfailedToOpenTimer : Standard.TON;\n\tmotionFaultTimeOffset : TIME := T#5S;\n\tresetTimer: TON := (PT := T#2S);\n\tstate : eMotorizedIBDStates;\n\tfaultONS : FB_ONS;\nEND_VAR\nVAR_IN_OUT\n\tIBDMotor : Axis_REF;\nEND_VAR\n","LineInfoPersistence":"(string)e2a27eb5-08dc-4500-9254-b31a7c444756_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)363","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}