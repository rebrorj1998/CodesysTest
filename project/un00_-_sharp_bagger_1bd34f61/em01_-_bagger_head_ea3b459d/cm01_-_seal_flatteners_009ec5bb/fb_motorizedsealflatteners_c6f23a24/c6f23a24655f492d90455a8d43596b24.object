{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)c6f23a24-655f-492d-9045-5a8d43596b24","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_MotorizedSealFlatteners","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)009ec5bb-695c-42ec-824d-a6b3bdce9e1e"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\n{region \"Axis Setup\"}\n// Setup of Motion Commands for MSF Horizonal motor axis\nMC_MoveMSFHorizTorqueLimited(Axis := horizontalAxis);\nMC_MoveMSFHoriz(Axis := horizontalAxis);\nMC_HomeMSFHoriz(Axis := horizontalAxis);\nMC_HaltMSFHoriz(Axis := horizontalAxis);\nMC_ResetMSFHoriz(Axis := horizontalAxis);  \n{endregion}\nhorizontalAxisInterface := horizontalAxis;\n{region \"Timers\"}\n// If homing not complete within reasonable time, error out\nhomeTimeout(PT := homeTimeoutSetting);\n// If flatteners don't reach setpoint in reasonable time, error out\nmoveMSFHorizTimeout();\n\t \nclearanceDwellTimer(PT := TO_TIME(clearanceDwellSetting * 1000));\n{endregion}\n\nmsfHorizActualPosition := horizontalAxis.ActPos;\n\nIF _reset THEN\n\tstate := 100;\n\tnextState := 0;\n\tIF horizontalAxis.Error THEN\n\t\tMC_ResetMSFHoriz.Execute := TRUE;\n\tEND_IF\n\t_reset := FALSE;\nEND_IF\n\n\n\nIF __QUERYINTERFACE(horizontalAxisInterface, testInterface) THEN\n\ttestBool := TRUE;\nEND_IF\n \nCASE state OF\n\t0:\t\t// Idle\n\t\t\tMC_ResetMSFHoriz.Execute := FALSE;\n\t\t\tIF horizontalAxis.HomingDone\n\t\t\t\tAND NOT horizontalFailedToMove.Active\n\t\t\t\tAND NOT motorFault.Active\n\t\t\tTHEN\n\t\t\t\t_ready := TRUE;\n\t\t\tELSE\n\t\t\t\t_ready := FALSE;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _bagIsOpen THEN\n\t\t\t\tstate := 10;\n\t\t\t\t_inPosition := FALSE;\n\t\t\t\t_bagIsOpen := FALSE;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _toBagFeed THEN\n\t\t\t\tstate := 20;\n\t\t\t\t_inPosition := FALSE;\n\t\t\t\t_toBagFeed := FALSE;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _toSeal THEN\n\t\t\t\tstate := 30;\n\t\t\t\t_inPosition := FALSE;\n\t\t\t\t_toSeal := FALSE;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF _homeNow THEN\n\t\t\t\t_inPosition := FALSE;\n\t\t\t\tIF NOT horizontalAxis.HomingDone THEN\n\t\t\t\t\tMC_HomeMSFHoriz.Execute := TRUE;\n\t\t\t\t\tstate := 1;\n\t\t\t\tEND_IF\n\t\t\t\t_homeNow := FALSE;\n\t\t\tEND_IF\n\t\t\t\n\t1:\t\t// Homing\n\t\t\thomeTimeout.IN := TRUE;\n\t\t\tverticalAxis.MoveUp();\n\t\t\tIF homeTimeout.Q \n\t\t\t\tOR MC_HomeMSFHoriz.Error \n\t\t\t\tOR UN00_Globals.simFaults.msfHorizontalFailedToHome\n\t\t\tTHEN\n\t\t\t\thorizontalFailedToHome.Trigger();\n\t\t\t\tstate := 100;\n\t\t\tEND_IF\n\t\t\tIF MC_HomeMSFHoriz.Done THEN\n\t\t\t\tstate := 100;\n\t\t\tEND_IF\n\t\t\t\n\t\t\t\n\t2:\t\t// \n\t\t\t\n\t\n\t\t\n\t\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t4: \t\t// \n\t\n\t5:\t\t// \n\t\n\t6:\t\t// \n\t\n\t7:\t\t//\n\n\t10:\t\t// Move FROM bag feeding position TO bag holding because Bag Is Open\n\t\t\t// 1st step: Move In\n\t\t\t\n\t\t\tverticalAxis.MoveDown();\n\t\t\tMC_MoveMSFHoriz.Velocity := horizVelo;\n\t\t\tMC_MoveMSFHoriz.Acceleration := horizAccel;\n\t\t\tMC_MoveMSFHoriz.Deceleration := horizDecel;\n\t\t\tMC_MoveMSFHoriz.Position := miniumumPosition;\n\t\t\t\n\t\t\tmoveMSFHorizTimeout.PT := MoveTimeoutCalc(MC_MoveMSFHoriz.Position - msfHorizActualPosition, horizVelo, 1000);\n\t\t\tmoveMSFHorizTimeout.IN := TRUE;\n\t\t\tMC_MoveMSFHoriz.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Moving IN to Bag Open'));\n\t\t\tstate := 102;\n\t\t\tnextState := 11;\n\t\t\t\n\n\t11:\t\t// \tMove FROM bag feeding position TO bag holding because Bag Is Open\n\t\t\t// 2nd step - move to bag holding at low torque then set InPosition then go back to idle\n\t\t\tMC_MoveMSFHorizTorqueLimited.Velocity := horizVelo;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Acceleration := horizAccel;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Deceleration := horizDecel;\n\t\t\tMC_MoveMSFHorizTorqueLimited.CurrentLimit := bagHoldingCurrent;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Position := bagWidth + 0.5;\n\t\t\t\n\t\t\tmoveMSFHorizTimeout.PT := MoveTimeoutCalc(MC_MoveMSFHorizTorqueLimited.Position - msfHorizActualPosition, horizVelo, 1000);\n\t\t\tmoveMSFHorizTimeout.IN := TRUE;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Moving OUT to Bag Open'));\n\t\t\tstate := 101;\n\t\t\tnextState := 103;\n\t\t\t\n\t\n\t20:\t\t// Bag Feeding moves \n\t\t\t// 1st Step - Move to clearance position\n\t\t\t_inPosition := FALSE;\n\t\t\tMC_MoveMSFHoriz.Velocity := horizVelo;\n\t\t\tMC_MoveMSFHoriz.Acceleration := horizAccel;\n\t\t\tMC_MoveMSFHoriz.Deceleration := horizDecel;\n\t\t\tMC_MoveMSFHoriz.Position := bagWidth - clearanceOffset;\n\t\t\t\n\t\t\tmoveMSFHorizTimeout.PT := MoveTimeoutCalc(MC_MoveMSFHoriz.Position - msfHorizActualPosition, horizVelo, 1000);\n\t\t\tmoveMSFHorizTimeout.IN := TRUE;\n\t\t\tMC_MoveMSFHoriz.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Moving IN to Clearance'));\n\t\t\tstate := 102;\n\t\t\tnextState := 21;\n\t\n\t21:\t\t// Bag Feeding moves \n\t\t\t// 2nd Step - Move flatteners up and out of the way\n\t\t\tverticalAxis.MoveUp();\n\t\t\t\n\t\t\tclearanceDwellTimer.IN := TRUE;\n\t\t\tIF clearanceDwellTimer.Q THEN\n\t\t\t\tclearanceDwellTimer.IN := FALSE;\n\t\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Moved UP to Clearance'));\n\t\t\t\tstate := 22;\n\t\t\tEND_IF\n\t\t\t\n\t22:\t\t// Bag Feeding moves \n\t\t\t// 3rd Step - Move flatteners to outside of bag width to allow for feed\n\t\t\tMC_MoveMSFHoriz.Velocity := horizVelo;\n\t\t\tMC_MoveMSFHoriz.Acceleration := horizAccel;\n\t\t\tMC_MoveMSFHoriz.Deceleration := horizDecel;\n\t\t\tMC_MoveMSFHoriz.Position := bagWidth + clearanceOffset;\n\t\t\t\n\t\t\tmoveMSFHorizTimeout.PT := MoveTimeoutCalc(MC_MoveMSFHoriz.Position - msfHorizActualPosition, horizVelo, 1000);\n\t\t\tmoveMSFHorizTimeout.IN := TRUE;\n\t\t\tMC_MoveMSFHoriz.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Moving OUT to Clearance'));\n\t\t\tstate := 102;\n\t\t\tnextState := 103;\n\t\n\t30:    // Move Out to Seal (Low torque)\n\t\t\t_inPosition := FALSE;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Velocity := horizVelo;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Acceleration := horizAccel;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Deceleration := horizDecel;\n\t\t\tMC_MoveMSFHorizTorqueLimited.CurrentLimit := bagHoldingCurrent + sealCurrentAddition;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Position := bagWidth + 0.5;\n\t\t\t\n\t\t\tmoveMSFHorizTimeout.PT := MoveTimeoutCalc(MC_MoveMSFHorizTorqueLimited.Position - msfHorizActualPosition, horizVelo, 1000);\n\t\t\tmoveMSFHorizTimeout.IN := TRUE;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Execute := TRUE;\n\t\t\t_logger.AddLogItem(CONCAT(_prefix, 'Moving OUT LOW TORQUE to Seal'));\n\t\t\tstate := 101;\n\t\t\tnextState := 103;\n\t\t\n\t100:\t// Cleanup\n\t\t\tMC_HomeMSFHoriz.Execute := FALSE;\n\t\t\tMC_MoveMSFHoriz.Execute := FALSE;\n\t\t\tMC_HaltMSFHoriz.Execute := FALSE;\n\t\t\tMC_MoveMSFHorizTorqueLimited.Execute := FALSE;\n\t\t\tmoveMSFHorizTimeout.IN := FALSE;\n\t\t\thomeTimeout.IN := FALSE;\n\t\t\tclearanceDwellTimer.IN := FALSE;\n\t\t\tstate := nextState;\n\t\n\t101: \t// Wait for Torque Limited Move to complete\n\t\t\tIF MC_MoveMSFHorizTorqueLimited.Error OR moveMSFHorizTimeout.Q THEN\n\t\t\t\thorizontalFailedToMove.Trigger();\n\t\t\t\tMC_MoveMSFHorizTorqueLimited.Execute := FALSE;\n\t\t\t\tMC_HaltMSFHoriz.Execute := TRUE;\n\t\t\t\tnextState := 0;\n\t\t\t\tstate := 100;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF MC_MoveMSFHorizTorqueLimited.Done THEN\n\t\t\t\tmoveMSFHorizTimeout.IN := FALSE;\n\t\t\t\tMC_MoveMSFHorizTorqueLimited.Execute := FALSE;\n\t\t\t\tstate := nextState;\n\t\t\tEND_IF\n\t\t\t\n\t102: \t// Wait for normal move to complete\n\t\t\tIF MC_MoveMSFHoriz.Error OR moveMSFHorizTimeout.Q THEN\n\t\t\t\thorizontalFailedToMove.Trigger();\n\t\t\t\tmoveMSFHorizTimeout.IN := FALSE;\n\t\t\t\tMC_MoveMSFHoriz.Execute := FALSE;\n\t\t\t\tMC_HaltMSFHoriz.Execute := TRUE;\n\t\t\t\tnextState := 0;\n\t\t\t\tstate := 100;\n\t\t\tEND_IF\n\t\t\t\n\t\t\tIF MC_MoveMSFHoriz.Done THEN\n\t\t\t\tMC_MoveMSFHoriz.Execute := FALSE;\n\t\t\t\tmoveMSFHorizTimeout.IN := FALSE;\n\t\t\t\tstate := nextState;\n\t\t\tEND_IF\n\t\t\t\n\t103:\t// Set In Position and go back to idle\n\t\t\t_inPosition := TRUE;\n\t\t\tnextState := 0;\n\t\t\tstate := 100;\n\t\t\t\nEND_CASE","LineInfoPersistence":"(string)c6f23a24-655f-492d-9045-5a8d43596b24_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK FB_MotorizedSealFlatteners EXTENDS FB_BaseComponent IMPLEMENTS ISealFlatteners, IHomable\nVAR_INPUT\n\tverticalAxis : IUpDown;\n\t\n\tclearanceDwellSetting : REAL;\n\tbagWidth : REAL;\t\t\t\t\t\t// Bag width setting; will determine all MSF positions\n\thorizVelo : REAL := 10;\n\thorizAccel : REAL := 100;\n\thorizDecel : REAL := 100;\n\tbagHoldingCurrent : REAL := 0.8;\n\tsealCurrentAddition : REAL := 0.3;\n\thomeTimeoutSetting : TIME := T#20S;\t\t// Timeout for homing attempt\n\tmaximumPosition : REAL := 18.5;\n\tminiumumPosition : REAL := 7.25;\n\tclearanceOffset : REAL := 1.0;\nEND_VAR\nVAR_OUTPUT\n\tmsfHorizActualPosition : REAL;\n\thorizontalFailedToMove : FB_Fault(name := CONCAT(_prefix, 'Horizontal Axis Failed to Move'));\n\thorizontalFailedToHome : FB_Fault(name := CONCAT(_prefix, 'Horizontal Axis Failed to Home'));\n\tmotorFault : FB_Fault(name := CONCAT(_prefix, 'Motor Fault'));\nEND_VAR\nVAR\n\tMC_MoveMSFHorizTorqueLimited : MC_MoveAbsoluteTorqueLimited;\n\tMC_MoveMSFHoriz : MC_MoveAbsolute;\n\tMC_HomeMSFHoriz : MC_Home;\n\tMC_HaltMSFHoriz : MC_Halt;\n\tMC_ResetMSFHoriz : MC_Reset;\n\t\n\thorizontalAxisInterface : IAxisRef;\n\tstate : INT;\n\t_inPosition : BOOL;\n\t_bagIsOpen : BOOL;\n\t_toBagFeed : BOOL;\n\t_toSeal : BOOL;\n\t_homeNow : BOOL;\n\thomeTimeout : Standard.TON;\n\tmoveMSFHorizTimeout : Standard.TON;\n\tclearanceDwellTimer : Standard.TON;\n\tnextState : INT := 0;\t\t\t\t\t// State to move to after confirmation of physical move\n\ttestInterface : IHomable;\n\ttestBool : BOOL;\nEND_VAR\nVAR_IN_OUT\n\thorizontalAxis : Axis_REF;\n\t\nEND_VAR","LineInfoPersistence":"(string)c6f23a24-655f-492d-9045-5a8d43596b24_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)828","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}