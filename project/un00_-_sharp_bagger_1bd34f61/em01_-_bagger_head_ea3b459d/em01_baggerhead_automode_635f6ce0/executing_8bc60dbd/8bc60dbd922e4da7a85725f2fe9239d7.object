{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)8bc60dbd-922e-4da7-a857-25f2fe9239d7","ParentGuid":"(Guid)635f6ce0-22ed-41ef-bb07-816209bcdea9","Name":"(string)Executing","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)f8a58466-d7f6-439f-bbb8-d4600e41d099","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"f8a58466","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//\tMethod: EM01_Bagger_Automode.Executing()\n//\tDescription: Executing is the state in which the machine is producing bags.  In this state, the bagger is homed and ready to initiate a cycle any time.  \n//\t\t\t\t In normal operation, the machine should be in this state most of the time\n//\t\t\t\t The logic below is generic and coded to interfaces for each component\t\n//\tCreated by: Ben Hess\n//\tCreated Date: Tuesday, March 26, 2019\ncurrentBaggerState := 'Executing';\n\nIF NOT __ISVALIDREF(bagger) THEN\n\tRETURN;\nEND_IF\n\n// Clear starting done status because if we're here starting state is complete.\n_startingDone := FALSE;\n\nIF resetTriggered THEN\n\tstate := HEAD_STATES.Idle;\n\tsealAndSeparateSubState := SEAL_SEPARATE_STATES.Idle;\n\treleaseAndFeedSubState := RELEASE_FEED_STATES.Idle;\n\tbagOpenSubState := BAG_OPEN_ASSIST_STATES.Idle;\nEND_IF\n\n// Run Cycle timer for machine cycle\ncycleTimer();\nvacuumDwellTimer(PT := bagger.vacuumDwell);\n// State machine for overall head states\nCASE state OF\n    HEAD_STATES.Idle :                              // Start cycle\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF  GlobalObjects.CollectionOfComponents.CheckIfAllReady() THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.StartCycleRequest THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF MoveRequested(bagger.pressureBar) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.MovePassthrough);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbaggerCycleActive := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.StartCycleRequest := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcycleComplete := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcycleTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_logger.AddLogItem('Cycle Started');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.SealAndSeparateBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tHEAD_STATES.MovePassthrough : \t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tPostHomeMoveIfNeeded(bagger.pressureBar);\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.MovingPassthrough);\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n    HEAD_STATES.MovingPassthrough :                 //\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT bagger.pressureBar.Busy THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.MovedPassthrough);\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                  \n\tHEAD_STATES.MovedPassthrough : \t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.Idle);\n                  \n    HEAD_STATES.SealAndSeparateBag :                // Begin Seal and Separate State machine\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.pressureBar.Ready THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT bagger.pressureBar.Busy THEN\n\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.MoveJawIn);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.SealingAndSeparatingBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.pressureBar.MakeReady();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    \n                \n    HEAD_STATES.SealingAndSeparatingBag :          //\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF sealAndSeparateSubState = SEAL_SEPARATE_STATES.Done THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.SealedAndSeparatedBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.Idle);\n                                                    END_IF    \n\n    HEAD_STATES.SealedAndSeparatedBag :             //\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.ReleaseAndFeedBag);                                    \n                                                    \n    HEAD_STATES.ReleaseAndFeedBag :                 // Open the jaw and release the bag\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.MoveJawOutAndFeedBag);\n                                                    SetHeadState(HEAD_STATES.ReleasingAndFeedingBag);\n                                                    \n    HEAD_STATES.ReleasingAndFeedingBag :            // \n                                                    IF releaseAndFeedSubState = RELEASE_FEED_STATES.Done THEN\n                                                        SetHeadState(HEAD_STATES.ReleasedAndFedBag);\n                                                        SetReleaseFeedState(RELEASE_FEED_STATES.Idle);\n                                                    END_IF\n                                                    \n    HEAD_STATES.ReleasedAndFedBag :                 // Start opening bag if bag open assist is enabled, otherwise end cycle now\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.bagOpenAssistEnabled THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.OpenBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.OpenedBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                        \n                                                         \n                                                    \n                                \n    HEAD_STATES.OpenBag :                            // Close jaw to grab the bag\n                                                    SetBagOpenState(BAG_OPEN_ASSIST_STATES.MoveJawIn);\n                                                    SetHeadState(HEAD_STATES.OpeningBag);\n                                                    \n                                                    \n    HEAD_STATES.OpeningBag :                        // Open jaw and grab onto the bag.  Feed a new bag out if missed\n                                                    IF bagOpenSubState = BAG_OPEN_ASSIST_STATES.Done THEN\n                                                        SetHeadState(HEAD_STATES.OpenedBag);\n                                                        SetBagOpenState(BAG_OPEN_ASSIST_STATES.Idle);\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF bagOpenSubState = BAG_OPEN_ASSIST_STATES.FeedNewBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.SealAndSeparateBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.Idle);\n                                                    END_IF\n                                                    \n    HEAD_STATES.OpenedBag :                         // End cycle           \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.barcodeVerifier.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.barcodeVerifier.VerificationFault THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.barcodeVerificationFailed.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF bagger.barcodeVerifier.GoodRead OR bagger.barcodeVerifier.BadRead OR (NOT bagger.barcodeVerifier.GoodRead AND NOT bagger.barcodeVerifier.BadRead) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbaggerCycleActive := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.Idle);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcycleTime := (TIME_TO_REAL(cycleTimer.ET) / 1000); \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcycleTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_logger.AddLogItem(CONCAT('Cycle Complete in ',TO_STRING(cycleTime)));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF \n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbaggerCycleActive := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetHeadState(HEAD_STATES.Idle);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcycleTime := (TIME_TO_REAL(cycleTimer.ET) / 1000); \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcycleTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_logger.AddLogItem(CONCAT('Cycle Complete in ',TO_STRING(cycleTime)));\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tcycleComplete := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t \n                                                    \n                                                  \n    //HEAD_STATES.Fault :                                \n                                                    \nEND_CASE\n\n\n\nCASE sealAndSeparateSubState OF\n    //SEAL_SEPARATE_STATES.Idle : \n        \n    SEAL_SEPARATE_STATES.MoveJawIn :                // Perform actions as enabled - close jaw and move flatteners out. If jaw is disabled then go right to reverse bag\n                                                    IF bagger.sealFlatteners.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.sealFlatteners.ToSeal();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.IBD.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.IBD.MoveInToDeflate();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.pressureBar.ready AND NOT bagger.pressureBar.Busy THEN\n\t                                                    bagger.pressureBar.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.MovingJawIn);\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF NOT bagger.pressureBar.ready AND NOT bagger.pressureBar.Busy THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.pressureBar.MakeReady();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    \n                                                    \n                                                    \n    SEAL_SEPARATE_STATES.MovingJawIn :              // If Jaw is in and flatteners out then move on\n                                                   \tIF (NOT bagger.sealFlatteners.OptionActive OR bagger.sealFlatteners.InPosition)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND bagger.pressureBar.IsFullyClosed THEN    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.MovedJawIn);\n                                                    END_IF\n                                                                \n    SEAL_SEPARATE_STATES.MovedJawIn :               // Seal bag now if separate before seal option selected\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT bagger.separateBeforeSealEnabled THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.sealer.BeginSealing();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.ReverseBag);\n                                                    \n    SEAL_SEPARATE_STATES.ReverseBag :               // Start reversing bag to seal\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.bagDelivery.ReverseToSeparate();\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.ReversingBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                                    \n    SEAL_SEPARATE_STATES.ReversingBag :             // \n                                                    IF bagger.bagDelivery.BagSeparated \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (bagger.sealer.SealComplete OR bagger.separateBeforeSealEnabled)\n                                                        THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.Reversedbag);\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n    SEAL_SEPARATE_STATES.Reversedbag :              // \n                                                    IF bagger.separateBeforeSealEnabled THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.SealBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.Done);\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_SEPARATE_STATES.SealBag:\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.sealer.BeginSealing();\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.SealingBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tSEAL_SEPARATE_STATES.SealingBag:\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.sealer.SealComplete THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetSealSeparateState(SEAL_SEPARATE_STATES.Done);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                    \n    //SEAL_SEPARATE_STATES.Done :                   // \n                                                    \n                                    \n    //SEAL_SEPARATE_STATES.Fault :\t\t\t\t\t//\nEND_CASE\n\n\nCASE releaseAndFeedSubState OF\n    //RELEASE_FEED_STATES.Idle :                    //\n                                                        \n    RELEASE_FEED_STATES.MoveJawOutAndFeedBag :        \t\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.bagOpenFingers.ReleaseBag();\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.sealFlatteners.ToBagFeed();\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT bagger.pressureBar.Busy THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.pressureBar.Open();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.IBD.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.IBD.MoveOut();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.loadPlate.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.loadPlate.BeginDischarge();\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tdischarge.TakeAwayBag(THIS^);\n\t\t\t\t\t\t\t\t\t\t\t\t\t//releaseAndFeedSubState := RELEASE_FEED_STATES.WaitForOKFromDischarge;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t// If printer is enabled then perform printer operation of bag delivery, otherwise just feed new bag out.\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT bagger.printer.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.pressureBar.IsReadyForFeed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.bagDelivery.FeedBagOut();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.MovingJawOutAndFeedingBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.FeedToReverseOffset);\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n    RELEASE_FEED_STATES.WaitForOKFromDischarge :   \t// Wait for EM02 - Discharge to give OK to feed bag signal\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF discharge.OKToFeedBag THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT bagger.printer.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.pressureBar.IsReadyForFeed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.bagDelivery.FeedBagOut();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.MovingJawOutAndFeedingBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.FeedToReverseOffset);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF   \n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t         \n\tRELEASE_FEED_STATES.FeedToReverseOffset :              // Start feeding to the print start position\n                                                    bagger.bagDelivery.FeedToReverseOffset();\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.FeedingToReverseOffset);\n                                                        \n    RELEASE_FEED_STATES.FeedingToReverseOffset :            // Once offset done start printing\n                                                    IF bagger.bagDelivery.BagAtReverseOffset THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.WaitForPrinter);\n                                                    END_IF                                  \n    \n    RELEASE_FEED_STATES.WaitForPrinter :            // Data Ready means the printer has a label and we're all set to print\n                                                    IF bagger.printer.HasLabel AND bagger.pressureBar.IsReadyForFeed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.FeedToOffset);\n                                                    END_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.cancelPrint OR NOT bagger.printer.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.bagDelivery.FeedBagOut();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.MovingJawOutAndFeedingBag);\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t                                          \n                                                    \n    RELEASE_FEED_STATES.FeedToOffset :              // Start feeding to the print offset\n                                                    bagger.bagDelivery.FeedToPrintOffset();\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.FeedingToOffset);\n                                                        \n    RELEASE_FEED_STATES.FeedingToOffset :            // Once offset done start printing\n                                                    IF bagger.bagDelivery.ReadyForPrint THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.printer.BeginPrinting();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.bagDelivery.FeedAtPrintSpeed();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.barcodeVerifier.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.barcodeVerifier.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.StartPrinting);\n                                                    END_IF                                            \n    \n    RELEASE_FEED_STATES.StartPrinting :             // Printer starts print cycle and bag delivery starts moving at print speed\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.Printing);\n\n    //RELEASE_FEED_STATES.SendPrintSignal:            //                                     \n\n    RELEASE_FEED_STATES.Printing :                  // Wait for print to finish\n                                                    IF bagger.printer.PrintDone THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.StopPrinting);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//bagger.bagDelivery.FeedBagOut();\n                                                    END_IF\n                                                    \n    RELEASE_FEED_STATES.StopPrinting :              // Tell bag delivery it's okay to feed out the rest of the bag and the printer that it can prep itself for the next print\n                                                   \n\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.MovingJawOutAndFeedingBag);\n                                                                                \n                                                                                                            \n    RELEASE_FEED_STATES.MovingJawOutAndFeedingBag : // \n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (bagger.sealFlatteners.InPosition OR NOT bagger.sealFlatteners.OptionActive) \n                                                        AND bagger.pressureBar.IsFullyOpen \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND bagger.bagDelivery.BagFeedDone\n                                                        THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.MovedJawOutAndFedBag);\n                                                    END_IF\n                                                    \n    RELEASE_FEED_STATES.MovedJawOutAndFedBag :        \n\t\t\t\t\t\t\t\t\t\t\t\t\tSetReleaseFeedState(RELEASE_FEED_STATES.Done);\n    //RELEASE_FEED_STATES.Done :\t\t\t\t\t\t\n    //RELEASE_FEED_STATES.Fault :\t\t\t\t\t\t\nEND_CASE\n\n\n\nCASE bagOpenSubState OF\n    BAG_OPEN_ASSIST_STATES.Idle :                    // \n                                                    \n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MoveJawIn :                // Close jaw against bag. In the future we may also start vacuum here\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT bagger.pressureBar.Busy THEN\n                                                    bagger.pressureBar.Close();\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MovingJawIn);    \n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MovingJawIn :            // Move on once jaw is closed\n                                                    IF bagger.pressureBar.IsFullyClosed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.vacuumBagOpen.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.vacuumBagOpen.StartVacuum();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MovedJawIn);      \n                                                    END_IF\n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MovedJawIn :             // Hold onto the bag with vacuum to build suction\n\t\t\t\t\t\t\t\t\t\t\t\t\tvacuumDwellTimer.IN := TRUE;\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF (vacuumDwellTimer.Q OR NOT bagger.vacuumBagOpen.OptionActive) THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvacuumDwellTimer.IN := FALSE;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MoveJawOut);\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n                                                                   \n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MoveJawOut :             // Open the jaw and move seal flatteners in and to bag holding\n\t\t\t\t\t\t\t\t\t\t\t\t\tIF NOT bagger.pressureBar.Busy THEN\n\t                                                    bagger.pressureBar.Open();\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MovingJawOutAndGrab);\n                                                    \n                                                    \n    BAG_OPEN_ASSIST_STATES.MovingJawOutAndGrab :    \t// \t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.bagOpenFingers.OptionActive THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.bagOpenFingers.GrabBag();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.bagOpenSensorEnabled THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.CheckForSuccessfulBagGrab);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.BagOpened);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.BagOpened);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\n\tBAG_OPEN_ASSIST_STATES.CheckForSuccessfulBagGrab : \t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.CurrentBagOpenRetryCount < bagger.bagOpenRetrySetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.bagOpenFingers.BagGrabbed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.BagOpened);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSIF bagger.bagOpenFingers.BagMissed THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.BagFailedToOpen);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\tBAG_OPEN_ASSIST_STATES.BagFailedToOpen :\t\t\t// \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.bagOpenFingers.ReleaseBag();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.CurrentBagOpenRetryCount := bagger.CurrentBagOpenRetryCount + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.CurrentBagOpenRetryCount < bagger.bagOpenRetrySetting THEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MoveJawIn);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.CurrentBagOpenRetryCount := 0; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.failedToOpenBag.Trigger();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\n\t\n\tBAG_OPEN_ASSIST_STATES.BagOpened :\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.vacuumBagOpen.StopVacuum();\n                                                    \tbagger.sealFlatteners.BagIsOpen();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbagger.CurrentBagOpenRetryCount := 0;\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.bagsMade.Increment();\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.airFilterClean.Increment();\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\tHMIData.baggerCycles.Increment();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                      \n    BAG_OPEN_ASSIST_STATES.MovingJawOutAfterGrab :\t\t// \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF bagger.pressureBar.IsFullyOpen \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND (bagger.sealFlatteners.InPosition OR NOT bagger.sealFlatteners.OptionActive)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.MovedJawOut);    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND_IF\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\tBAG_OPEN_ASSIST_STATES.MovedJawOut :            \t// \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetBagOpenState(BAG_OPEN_ASSIST_STATES.Done);\n\n                                                             \n                                                \n\t//BAG_OPEN_ASSIST_STATES.FeedNewBag :   \t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                                \n    //BAG_OPEN_ASSIST_STATES.Done :                    \t// \n                                                            \n    //BAG_OPEN_ASSIST_STATES.Fault :                    //\n\nEND_CASE","LineInfoPersistence":"(string)8bc60dbd-922e-4da7-a857-25f2fe9239d7_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)METHOD Executing\n","LineInfoPersistence":"(string)8bc60dbd-922e-4da7-a857-25f2fe9239d7_Decl_LineIds"}}}}}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","f8a58466":"{f8a58466-d7f6-439f-bbb8-d4600e41d099}","string":"System.String"}}},"FormatVersion":"1.0"}