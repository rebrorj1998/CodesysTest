<TestScript>
  <Information>
    <Name>Alpha Bagger Export</Name>
    <Version>0.1</Version>
    <Author>Ben Hess</Author>
  </Information>
  <Sequence>
    <TestCase definesScope="False">
      <Information>
        <Title>Open SharpBagger Project and build</Title>
      </Information>
      <Actions>
        <Action>
          <Information>
            <Title>Close Project</Title>
          </Information>
          <Settings>
            <Entry Name="Condition" />
            <Entry Name="ExecutionDelay">0</Entry>
            <Entry Name="ForceEvaluation">False</Entry>
            <Entry Name="IgnoreResults">False</Entry>
            <Entry Name="RequireCancel">True</Entry>
            <Entry Name="ResultVariable" />
            <Entry Name="RetryOnError">0|0</Entry>
          </Settings>
          <Command TestRunner="TestManager.Projects" Verb="CloseProject" />
          <Configuration>
            <Entry Name="FailNoProject">False</Entry>
          </Configuration>
        </Action>
        <Action>
          <Information>
            <Title>Load SharpBagger Project</Title>
          </Information>
          <Settings>
            <Entry Name="Condition" />
            <Entry Name="ExecutionDelay">0</Entry>
            <Entry Name="ForceEvaluation">False</Entry>
            <Entry Name="IgnoreResults">False</Entry>
            <Entry Name="ResultVariable" />
            <Entry Name="RetryOnError">0|0</Entry>
          </Settings>
          <Command TestRunner="TestManager.Projects" Verb="LoadProject" />
          <Configuration>
            <Entry Name="FailOnMissingLibraries">False</Entry>
            <Entry Name="OtherMessageBoxes">ReportAsError</Entry>
            <Entry Name="PathToProject">C:\Users\bhess\source\repos\SharpController\alpha\AlphaController.project</Entry>
            <Entry Name="UpdateCompilerVersion">False</Entry>
            <Entry Name="UpdateLibraryVerions">False</Entry>
            <Entry Name="UpdateStorageFormate">False</Entry>
            <Entry Name="UpdateVisualisationProfile">False</Entry>
          </Configuration>
        </Action>
        <Action>
          <Information>
            <Title>Export POUs</Title>
          </Information>
          <Settings>
            <Entry Name="Condition" />
            <Entry Name="ExecutionDelay">0</Entry>
            <Entry Name="ForceEvaluation">False</Entry>
            <Entry Name="IgnoreResults">False</Entry>
            <Entry Name="ResultVariable" />
            <Entry Name="RetryOnError">0|0</Entry>
          </Settings>
          <Parameters>
            <Inputs>
              <Parameter Name="workspace" Variable="$GLOBALS.workspace" />
            </Inputs>
          </Parameters>
          <Command TestRunner="TestManager.Scripting" Verb="ExecuteScript" />
          <Configuration>
            <Entry Name="Command"># Tests CoDeSys native import/export functionality.
from __future__ import print_function
import os

proj = projects.primary

# We're interested in POU nodes:
POUGuid = Guid("6f9dac99-8de1-4efc-8465-68ac443b7d08")

# We collect all POU nodes in that list.
pous = []


# From the parent node on, we recursively add POU nodes:
def CollectPous(node):
    if node.type == POUGuid:
        pous.append(node)
    else:
        for child in node.get_children():
            CollectPous(child)


# Now we collect all the leaf nodes.
for node in proj.get_children():
    CollectPous(node)

# We print everything just to know what's going on.
for i in pous:
    print("found: ", i.type, i.guid, i.get_name())

# And now we export the files.
for candidate in pous:
    # We create a list of objects to export:
    # The object itsself
    objects = [candidate]

    # And sub-objects (POUs can have actions, properties, ...)
    objects.extend(candidate.get_children())

    # And the parent folders.
    parent = candidate.parent
    while ((not parent.is_root) and parent.is_folder):
        objects.append(parent)
        parent = parent.parent

    # Create an unique file name:
    filename = "C:\\Users\\bhess\\source\\repos\\SharpController\\alpha\\export\\%s.st" % (candidate.get_name())

    # Delete the file if it's already there
    if os.path.isfile(filename):
        os.remove(filename)

    # print some user information
    print("exporting ", len(objects), " objects to: ", filename)

    # and actually export the project.
    #proj.export_native(objects, filename)
    for textobject in objects:
       if textobject.has_textual_declaration:
           o = textobject.textual_declaration
           with open(filename, 'a+') as f:
               f.write("\n\n" + o.text)
       if textobject.has_textual_implementation:
           o = textobject.textual_implementation
           with open(filename, 'a+') as f:
               f.write("\n" + o.text)
    f.close()

print("script finished.")</Entry>
            <Entry Name="ImplicitImport">True</Entry>
            <Entry Name="ShowTabs">True</Entry>
          </Configuration>
        </Action>
      </Actions>
    </TestCase>
    <TestCase definesScope="False">
      <Information>
        <Title>Close</Title>
      </Information>
      <Actions>
        <Action>
          <Information>
            <Title>Close without Saving</Title>
          </Information>
          <Settings>
            <Entry Name="Condition" />
            <Entry Name="ExecutionDelay">0</Entry>
            <Entry Name="ForceEvaluation">False</Entry>
            <Entry Name="IgnoreResults">False</Entry>
            <Entry Name="ResultVariable" />
            <Entry Name="RetryOnError">0|0</Entry>
          </Settings>
          <Command TestRunner="TestManager.Projects" Verb="CloseProject" />
          <Configuration>
            <Entry Name="FailNoProject">False</Entry>
          </Configuration>
        </Action>
      </Actions>
    </TestCase>
  </Sequence>
</TestScript>